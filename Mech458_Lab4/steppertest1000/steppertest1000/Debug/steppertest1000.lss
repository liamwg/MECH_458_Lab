
steppertest1000.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000264  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080020c  0080020c  00000304  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dd9  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c34  00000000  00000000  0000117d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d4  00000000  00000000  00001db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00002188  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058b  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e7  00000000  00000000  00002763  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000284a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e6       	ldi	r30, 0x64	; 100
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 30       	cpi	r26, 0x0E	; 14
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	5c d0       	rcall	.+184    	; 0x1d8 <main>
 120:	9f c0       	rjmp	.+318    	; 0x260 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <mTimer>:
int spin[4] = {0b00001100, 0b00000110, 0b00000011, 0b00001001};




void mTimer(int count) {
 124:	ac 01       	movw	r20, r24
	int i = 0;

	TCCR1B |=_BV(WGM12);		//Set clear timer on compare
 126:	e1 e8       	ldi	r30, 0x81	; 129
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	80 83       	st	Z, r24
	OCR1A = 0x07D0;				//Set timer upper limit to 2000 (1ms @ 2MHz)
 130:	80 ed       	ldi	r24, 0xD0	; 208
 132:	97 e0       	ldi	r25, 0x07	; 7
 134:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 138:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	TCNT1 = 0x0000;				//Set timer start to 0
 13c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 140:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	TIMSK1 |= 0x02;				//Enable interrupt, remove if sei ()
 144:	ef e6       	ldi	r30, 0x6F	; 111
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	80 83       	st	Z, r24

	TIFR1 |=_BV(OCF1A);			//Clear timer flag
 14e:	86 b3       	in	r24, 0x16	; 22
 150:	82 60       	ori	r24, 0x02	; 2
 152:	86 bb       	out	0x16, r24	; 22




void mTimer(int count) {
	int i = 0;
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 e0       	ldi	r19, 0x00	; 0
	TCNT1 = 0x0000;				//Set timer start to 0
	TIMSK1 |= 0x02;				//Enable interrupt, remove if sei ()

	TIFR1 |=_BV(OCF1A);			//Clear timer flag

	while(i<count)
 158:	07 c0       	rjmp	.+14     	; 0x168 <mTimer+0x44>
	{
		while ((TIFR1 & 0x02) != 0x02);	//Check if timer flag set
 15a:	b1 9b       	sbis	0x16, 1	; 22
 15c:	fe cf       	rjmp	.-4      	; 0x15a <mTimer+0x36>
		
		TIFR1 |=_BV(OCF1A);		//Clear increment
 15e:	96 b3       	in	r25, 0x16	; 22
 160:	92 60       	ori	r25, 0x02	; 2
 162:	96 bb       	out	0x16, r25	; 22
		i++;					//repeat until i = count
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255
	TCNT1 = 0x0000;				//Set timer start to 0
	TIMSK1 |= 0x02;				//Enable interrupt, remove if sei ()

	TIFR1 |=_BV(OCF1A);			//Clear timer flag

	while(i<count)
 168:	24 17       	cp	r18, r20
 16a:	35 07       	cpc	r19, r21
 16c:	b4 f3       	brlt	.-20     	; 0x15a <mTimer+0x36>
		
		TIFR1 |=_BV(OCF1A);		//Clear increment
		i++;					//repeat until i = count
		//end if
	}  //end while
}  //end mTimer
 16e:	08 95       	ret

00000170 <StepperGo>:


void StepperGo(){
	
	current_step += dir;
 170:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <dir>
 174:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <dir+0x1>
 178:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 17c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 180:	82 0f       	add	r24, r18
 182:	93 1f       	adc	r25, r19
 184:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 188:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
	
	if(current_step == 4)
 18c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 190:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 194:	04 97       	sbiw	r24, 0x04	; 4
 196:	21 f4       	brne	.+8      	; 0x1a0 <StepperGo+0x30>
	current_step = 0;
 198:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <__data_end+0x1>
 19c:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
	if(current_step == -1)
 1a0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 1a4:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	31 f4       	brne	.+12     	; 0x1b8 <StepperGo+0x48>
	current_step = 3;
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 1b4:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
	
	PORTA = spin[current_step];
 1b8:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__data_end>
 1bc:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__data_end+0x1>
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	e0 50       	subi	r30, 0x00	; 0
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	80 81       	ld	r24, Z
 1ca:	82 b9       	out	0x02, r24	; 2
	mTimer(step_delay);
 1cc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <step_delay>
 1d0:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <step_delay+0x1>
 1d4:	a7 cf       	rjmp	.-178    	; 0x124 <mTimer>
 1d6:	08 95       	ret

000001d8 <main>:
}




int main(void) {
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
	
	//PROGRAM INITIALIZATION 
	TCCR1B |=_BV(CS11);		//Set scaled clock 16MHz/8 -> 2MHz
 1dc:	e1 e8       	ldi	r30, 0x81	; 129
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	80 83       	st	Z, r24
	DDRA = 0xFF;			//Set port A to output
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	81 b9       	out	0x01, r24	; 1
	
	//STEPPER INITIALIZATION - go 50 steps CW and output current step index
		dir = 1;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <dir+0x1>
 1f2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <dir>
		
		
		for (int i = 0; i < 500; i++) {
 1f6:	c0 e0       	ldi	r28, 0x00	; 0
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <main+0x28>
			StepperGo();
 1fc:	b9 df       	rcall	.-142    	; 0x170 <StepperGo>
	
	//STEPPER INITIALIZATION - go 50 steps CW and output current step index
		dir = 1;
		
		
		for (int i = 0; i < 500; i++) {
 1fe:	21 96       	adiw	r28, 0x01	; 1
 200:	c4 3f       	cpi	r28, 0xF4	; 244
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	d8 07       	cpc	r29, r24
 206:	d4 f3       	brlt	.-12     	; 0x1fc <main+0x24>
			StepperGo();
		}
		
		mTimer(3000);
 208:	88 eb       	ldi	r24, 0xB8	; 184
 20a:	9b e0       	ldi	r25, 0x0B	; 11
 20c:	8b df       	rcall	.-234    	; 0x124 <mTimer>
	
	//PROPER STEP DISPLAY PROOF
		
		//go CW 180 degrees	
		
		dir = 1;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <dir+0x1>
 216:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <dir>
		for (int i = 0; i < 1024; i++) {
 21a:	c0 e0       	ldi	r28, 0x00	; 0
 21c:	d0 e0       	ldi	r29, 0x00	; 0
			StepperGo();
 21e:	02 c0       	rjmp	.+4      	; 0x224 <main+0x4c>
 220:	a7 df       	rcall	.-178    	; 0x170 <StepperGo>
	//PROPER STEP DISPLAY PROOF
		
		//go CW 180 degrees	
		
		dir = 1;
		for (int i = 0; i < 1024; i++) {
 222:	21 96       	adiw	r28, 0x01	; 1
 224:	c1 15       	cp	r28, r1
 226:	84 e0       	ldi	r24, 0x04	; 4
 228:	d8 07       	cpc	r29, r24
			StepperGo();
		}
			
		//PORTA = 0;
		mTimer(2000);
 22a:	d4 f3       	brlt	.-12     	; 0x220 <main+0x48>
 22c:	80 ed       	ldi	r24, 0xD0	; 208
 22e:	97 e0       	ldi	r25, 0x07	; 7
 230:	79 df       	rcall	.-270    	; 0x124 <mTimer>
		
		//go CCW 180 degrees
		
		dir = 1;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <dir+0x1>
 23a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <dir>
		for (int i = 0; i < 1024; i++) {
 23e:	c0 e0       	ldi	r28, 0x00	; 0
 240:	d0 e0       	ldi	r29, 0x00	; 0
			StepperGo();
 242:	02 c0       	rjmp	.+4      	; 0x248 <main+0x70>
 244:	95 df       	rcall	.-214    	; 0x170 <StepperGo>
		mTimer(2000);
		
		//go CCW 180 degrees
		
		dir = 1;
		for (int i = 0; i < 1024; i++) {
 246:	21 96       	adiw	r28, 0x01	; 1
 248:	c1 15       	cp	r28, r1
 24a:	84 e0       	ldi	r24, 0x04	; 4
 24c:	d8 07       	cpc	r29, r24
			StepperGo();
		}
		
		mTimer(2000);
 24e:	d4 f3       	brlt	.-12     	; 0x244 <main+0x6c>
 250:	80 ed       	ldi	r24, 0xD0	; 208
 252:	97 e0       	ldi	r25, 0x07	; 7
 254:	67 df       	rcall	.-306    	; 0x124 <mTimer>

		
}
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
