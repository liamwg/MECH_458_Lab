
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000286  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fa2  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c34  00000000  00000000  00001326  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ad  00000000  00000000  00001f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00002408  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000587  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000192  00000000  00000000  00002a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002b9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a0 30       	cpi	r26, 0x00	; 0
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	81 d0       	rcall	.+258    	; 0x208 <main>
 106:	bd c0       	rjmp	.+378    	; 0x282 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <mTimer>:
	
	i = 0; //initializes loop counter
	
	//Set the Waveform Generation Mode bit description to Clear Timer on Compare Math mode (CTC) only
	
	TCCR1B |=_BV(WGM12);		//Set WGM bits to 0100, page 145
 10a:	e1 e8       	ldi	r30, 0x81	; 129
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	20 81       	ld	r18, Z
 110:	28 60       	ori	r18, 0x08	; 8
 112:	20 83       	st	Z, r18
							//note WGM is spread over two register
							
	OCR1A = 0x03E8; //Sets output compare register for 1000 cycles = 1ms
 114:	28 ee       	ldi	r18, 0xE8	; 232
 116:	33 e0       	ldi	r19, 0x03	; 3
 118:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 11c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	
	TCNT1 = 0x0000; //Sets initial value of timer counter to 0x0000
 120:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 124:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	
	TIMSK1 = TIMSK1 | 0b00000010; //Enable the output compare interrupt
 128:	ef e6       	ldi	r30, 0x6F	; 111
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	20 81       	ld	r18, Z
 12e:	22 60       	ori	r18, 0x02	; 2
 130:	20 83       	st	Z, r18
	
	TIFR1 |= _BV(OCF1A); //clear timer interrupt flag and begin new timing
 132:	26 b3       	in	r18, 0x16	; 22
 134:	22 60       	ori	r18, 0x02	; 2
 136:	26 bb       	out	0x16, r18	; 22
	The system clock has been pre-scaled by 2. 
	*/
	
	int i; //keeps track of loop number
	
	i = 0; //initializes loop counter
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 e0       	ldi	r19, 0x00	; 0
	
	TIFR1 |= _BV(OCF1A); //clear timer interrupt flag and begin new timing
	
	//Poll the timer to determine when the timer has reached 0x03E8
	
	while(i<count){
 13c:	07 c0       	rjmp	.+14     	; 0x14c <mTimer+0x42>
		
		if((TIFR1 & 0x02) == 0x02){
 13e:	b1 9b       	sbis	0x16, 1	; 22
 140:	05 c0       	rjmp	.+10     	; 0x14c <mTimer+0x42>
			
			TIFR1 |= _BV(OCF1A); // clear interrupt flag by writing a ONE to the bit
 142:	46 b3       	in	r20, 0x16	; 22
 144:	42 60       	ori	r20, 0x02	; 2
 146:	46 bb       	out	0x16, r20	; 22
			
			i++; //increment loop number
 148:	2f 5f       	subi	r18, 0xFF	; 255
 14a:	3f 4f       	sbci	r19, 0xFF	; 255
	
	TIFR1 |= _BV(OCF1A); //clear timer interrupt flag and begin new timing
	
	//Poll the timer to determine when the timer has reached 0x03E8
	
	while(i<count){
 14c:	28 17       	cp	r18, r24
 14e:	39 07       	cpc	r19, r25
 150:	b4 f3       	brlt	.-20     	; 0x13e <mTimer+0x34>
		} // end if
	} // end while
	
	return;
	
}// mTimer	
 152:	08 95       	ret

00000154 <CW>:
		
	}
	
}

void CW (int steps){
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	8c 01       	movw	r16, r24
		char step1 = 0b00110000;
		char step2 = 0b00000110;
		char step3 = 0b00101000;
		char step4 = 0b00000101;
		
	for (int k = 0; k < (steps/4); k++){
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	d0 e0       	ldi	r29, 0x00	; 0
 162:	15 c0       	rjmp	.+42     	; 0x18e <CW+0x3a>
		int step_wait = 20;
		PORTA = step1;
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	82 b9       	out	0x02, r24	; 2
		mTimer(step_wait);
 168:	84 e1       	ldi	r24, 0x14	; 20
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	ce df       	rcall	.-100    	; 0x10a <mTimer>
		PORTA = step2;
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	82 b9       	out	0x02, r24	; 2
		mTimer(step_wait);
 172:	84 e1       	ldi	r24, 0x14	; 20
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	c9 df       	rcall	.-110    	; 0x10a <mTimer>
		PORTA = step3;
 178:	88 e2       	ldi	r24, 0x28	; 40
 17a:	82 b9       	out	0x02, r24	; 2
		mTimer(step_wait);
 17c:	84 e1       	ldi	r24, 0x14	; 20
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	c4 df       	rcall	.-120    	; 0x10a <mTimer>
		PORTA = step4;
 182:	85 e0       	ldi	r24, 0x05	; 5
		mTimer(step_wait);
 184:	82 b9       	out	0x02, r24	; 2
 186:	84 e1       	ldi	r24, 0x14	; 20
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	bf df       	rcall	.-130    	; 0x10a <mTimer>
		char step1 = 0b00110000;
		char step2 = 0b00000110;
		char step3 = 0b00101000;
		char step4 = 0b00000101;
		
	for (int k = 0; k < (steps/4); k++){
 18c:	21 96       	adiw	r28, 0x01	; 1
 18e:	c8 01       	movw	r24, r16
 190:	11 23       	and	r17, r17
 192:	0c f4       	brge	.+2      	; 0x196 <CW+0x42>
 194:	03 96       	adiw	r24, 0x03	; 3
 196:	95 95       	asr	r25
 198:	87 95       	ror	r24
 19a:	95 95       	asr	r25
 19c:	87 95       	ror	r24
 19e:	c8 17       	cp	r28, r24
 1a0:	d9 07       	cpc	r29, r25
 1a2:	04 f3       	brlt	.-64     	; 0x164 <CW+0x10>
		PORTA = step3;
		mTimer(step_wait);
		PORTA = step4;
		mTimer(step_wait);
	}	
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	08 95       	ret

000001ae <CCW>:

void CCW(int steps){
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	8c 01       	movw	r16, r24
	char step1 = 0b00110000;
	char step2 = 0b00000110;
	char step3 = 0b00101000;
	char step4 = 0b00000101;
	
	for (int k = 0; k < (steps/4); k++){
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
 1bc:	15 c0       	rjmp	.+42     	; 0x1e8 <CCW+0x3a>
		int step_wait = 20;
		PORTA = step4;
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	82 b9       	out	0x02, r24	; 2
		mTimer(step_wait);
 1c2:	84 e1       	ldi	r24, 0x14	; 20
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	a1 df       	rcall	.-190    	; 0x10a <mTimer>
		PORTA = step3;
 1c8:	88 e2       	ldi	r24, 0x28	; 40
 1ca:	82 b9       	out	0x02, r24	; 2
		mTimer(step_wait);
 1cc:	84 e1       	ldi	r24, 0x14	; 20
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	9c df       	rcall	.-200    	; 0x10a <mTimer>
		PORTA = step2;
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	82 b9       	out	0x02, r24	; 2
		mTimer(step_wait);
 1d6:	84 e1       	ldi	r24, 0x14	; 20
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	97 df       	rcall	.-210    	; 0x10a <mTimer>
		PORTA = step1;
 1dc:	80 e3       	ldi	r24, 0x30	; 48
		mTimer(step_wait);
 1de:	82 b9       	out	0x02, r24	; 2
 1e0:	84 e1       	ldi	r24, 0x14	; 20
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	92 df       	rcall	.-220    	; 0x10a <mTimer>
	char step1 = 0b00110000;
	char step2 = 0b00000110;
	char step3 = 0b00101000;
	char step4 = 0b00000101;
	
	for (int k = 0; k < (steps/4); k++){
 1e6:	21 96       	adiw	r28, 0x01	; 1
 1e8:	c8 01       	movw	r24, r16
 1ea:	11 23       	and	r17, r17
 1ec:	0c f4       	brge	.+2      	; 0x1f0 <CCW+0x42>
 1ee:	03 96       	adiw	r24, 0x03	; 3
 1f0:	95 95       	asr	r25
 1f2:	87 95       	ror	r24
 1f4:	95 95       	asr	r25
 1f6:	87 95       	ror	r24
 1f8:	c8 17       	cp	r28, r24
 1fa:	d9 07       	cpc	r29, r25
 1fc:	04 f3       	brlt	.-64     	; 0x1be <CCW+0x10>
		PORTA = step2;
		mTimer(step_wait);
		PORTA = step1;
		mTimer(step_wait);
	}
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	08 95       	ret

00000208 <main>:
void mTimer(int count);

int main(){
	
	//TIMER CODE
	CLKPR = 0x80;
 208:	e1 e6       	ldi	r30, 0x61	; 97
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	90 e8       	ldi	r25, 0x80	; 128
 20e:	90 83       	st	Z, r25
	CLKPR = 0x01;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 83       	st	Z, r24
	TCCR1B |= _BV(CS11);
 214:	e1 e8       	ldi	r30, 0x81	; 129
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	82 60       	ori	r24, 0x02	; 2
 21c:	80 83       	st	Z, r24

// Set Ports A, C, F to outputs
	DDRA = 0xFF;
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	81 b9       	out	0x01, r24	; 1
	DDRC = 0xFF;
 222:	87 b9       	out	0x07, r24	; 7
	DDRF = 0xFF;
 224:	80 bb       	out	0x10, r24	; 16
	DDRB = 0xFF;
 226:	84 b9       	out	0x04, r24	; 4
	
//PWM code
	TCCR0A = 0b10000011; //set first two bits to 10, clear OC0A on compare match, set last two bits to WGM mode 3, bits 011 (bits are separated into 2 registers)
 228:	83 e8       	ldi	r24, 0x83	; 131
 22a:	84 bd       	out	0x24, r24	; 36
	
	TCCR0B = 0b00000011; // set bit 3 to WGM mode 3 (first bit of 011), set last 3 bits to 011 to prescale clock by 64
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	85 bd       	out	0x25, r24	; 37
	
	TIMSK0 = 0b00000010; // set bit 1 to 1, enables OCIE0A
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
	
	OCR0A = 0x80; // set OCRA to 50% duty cycle (128)
 236:	97 bd       	out	0x27, r25	; 39
	
	
	while(1){
		CW(16);
 238:	80 e1       	ldi	r24, 0x10	; 16
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	8b df       	rcall	.-234    	; 0x154 <CW>
		mTimer(1000);
 23e:	88 ee       	ldi	r24, 0xE8	; 232
 240:	93 e0       	ldi	r25, 0x03	; 3
 242:	63 df       	rcall	.-314    	; 0x10a <mTimer>
		CW(32);
 244:	80 e2       	ldi	r24, 0x20	; 32
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	85 df       	rcall	.-246    	; 0x154 <CW>
		mTimer(1000);
 24a:	88 ee       	ldi	r24, 0xE8	; 232
 24c:	93 e0       	ldi	r25, 0x03	; 3
 24e:	5d df       	rcall	.-326    	; 0x10a <mTimer>
		CW(100);
 250:	84 e6       	ldi	r24, 0x64	; 100
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	7f df       	rcall	.-258    	; 0x154 <CW>
		mTimer(1000);
 256:	88 ee       	ldi	r24, 0xE8	; 232
 258:	93 e0       	ldi	r25, 0x03	; 3
 25a:	57 df       	rcall	.-338    	; 0x10a <mTimer>
		CCW(16);
 25c:	80 e1       	ldi	r24, 0x10	; 16
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	a6 df       	rcall	.-180    	; 0x1ae <CCW>
		mTimer(1000);
 262:	88 ee       	ldi	r24, 0xE8	; 232
 264:	93 e0       	ldi	r25, 0x03	; 3
 266:	51 df       	rcall	.-350    	; 0x10a <mTimer>
		CCW(32);
 268:	80 e2       	ldi	r24, 0x20	; 32
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	a0 df       	rcall	.-192    	; 0x1ae <CCW>
		mTimer(1000);
 26e:	88 ee       	ldi	r24, 0xE8	; 232
 270:	93 e0       	ldi	r25, 0x03	; 3
 272:	4b df       	rcall	.-362    	; 0x10a <mTimer>
 274:	84 e6       	ldi	r24, 0x64	; 100
		CCW(100);
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	9a df       	rcall	.-204    	; 0x1ae <CCW>
 27a:	88 ee       	ldi	r24, 0xE8	; 232
 27c:	93 e0       	ldi	r25, 0x03	; 3
		mTimer(1000);
 27e:	45 df       	rcall	.-374    	; 0x10a <mTimer>
 280:	db cf       	rjmp	.-74     	; 0x238 <main+0x30>

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
