
Mech458_Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d37  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bf3  00000000  00000000  00000fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000371  00000000  00000000  00001bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000054d  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000094  00000000  00000000  000024b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002545  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	27 d0       	rcall	.+78     	; 0x144 <main>
  f6:	55 c0       	rjmp	.+170    	; 0x1a2 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <mTimer>:
	
	i = 0; //initializes loop counter
	
	//Set the Waveform Generation Mode bit description to Clear Timer on Compare Math mode (CTC) only
	
	TCCR1B |=_BV(WGM12);		//Set WGM bits to 0100, page 145
  fa:	e1 e8       	ldi	r30, 0x81	; 129
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	20 81       	ld	r18, Z
 100:	28 60       	ori	r18, 0x08	; 8
 102:	20 83       	st	Z, r18
							//note WGM is spread over two register
							
	OCR1A = 0x03E8; //Sets output compare register for 1000 cycles = 1ms
 104:	28 ee       	ldi	r18, 0xE8	; 232
 106:	33 e0       	ldi	r19, 0x03	; 3
 108:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 10c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	
	TCNT1 = 0x0000; //Sets initial value of timer counter to 0x0000
 110:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 114:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	
	TIMSK1 = TIMSK1 | 0b00000010; //Enable the output compare interrupt
 118:	ef e6       	ldi	r30, 0x6F	; 111
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	20 81       	ld	r18, Z
 11e:	22 60       	ori	r18, 0x02	; 2
 120:	20 83       	st	Z, r18
	
	TIFR1 |= _BV(OCF1A); //clear timer interrupt flag and begin new timing
 122:	26 b3       	in	r18, 0x16	; 22
 124:	22 60       	ori	r18, 0x02	; 2
 126:	26 bb       	out	0x16, r18	; 22
	The system clock has been pre-scaled by 2. 
	*/
	
	int i; //keeps track of loop number
	
	i = 0; //initializes loop counter
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
	
	TIFR1 |= _BV(OCF1A); //clear timer interrupt flag and begin new timing
	
	//Poll the timer to determine when the timer has reached 0x03E8
	
	while(i<count){
 12c:	07 c0       	rjmp	.+14     	; 0x13c <mTimer+0x42>
		
		if((TIFR1 & 0x02) == 0x02){
 12e:	b1 9b       	sbis	0x16, 1	; 22
 130:	05 c0       	rjmp	.+10     	; 0x13c <mTimer+0x42>
			
			TIFR1 |= _BV(OCF1A); // clear interrupt flag by writing a ONE to the bit
 132:	46 b3       	in	r20, 0x16	; 22
 134:	42 60       	ori	r20, 0x02	; 2
 136:	46 bb       	out	0x16, r20	; 22
			
			i++; //increment loop number
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
	
	TIFR1 |= _BV(OCF1A); //clear timer interrupt flag and begin new timing
	
	//Poll the timer to determine when the timer has reached 0x03E8
	
	while(i<count){
 13c:	28 17       	cp	r18, r24
 13e:	39 07       	cpc	r19, r25
 140:	b4 f3       	brlt	.-20     	; 0x12e <mTimer+0x34>
		} // end if
	} // end while
	
	return;
	
}// mTimer	
 142:	08 95       	ret

00000144 <main>:

/* ################## MAIN ROUTINE ################## */
int main(int argc, char *argv[]){
	
	//TIMER CODE
	CLKPR = 0x80;
 144:	e1 e6       	ldi	r30, 0x61	; 97
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	80 83       	st	Z, r24
	CLKPR = 0x01;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 83       	st	Z, r24
	
	//Timer Instructions
	//Sets timer 1 to run at 1Mz. note CPU clock set to 8MHz
	
	TCCR1B |= _BV(CS11);	//BV sets the bit to logic 1
 150:	e1 e8       	ldi	r30, 0x81	; 129
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	82 60       	ori	r24, 0x02	; 2
 158:	80 83       	st	Z, r24
						//Note the register is TCCR1B1
						//TCCR1 is the timer/counter control resister 1
						//B is the "B" register and 1 is bit 1
						//CS means clock select, has the pre-scaler set to 8
						
	DDRL = 0xFF;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	}
*/
	
	//Knight Rider
	
	DDRC = 0xFF;
 160:	87 b9       	out	0x07, r24	; 7
	
	
	while(1){
		PORTC = 0b11000000;
 162:	80 ec       	ldi	r24, 0xC0	; 192
 164:	88 b9       	out	0x08, r24	; 8
		mTimer(200);
 166:	88 ec       	ldi	r24, 0xC8	; 200
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	c7 df       	rcall	.-114    	; 0xfa <mTimer>
		
		for(int k = 1; k < 7; k++){
 16c:	c1 e0       	ldi	r28, 0x01	; 1
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	07 c0       	rjmp	.+14     	; 0x180 <main+0x3c>
			PORTC = PORTC >> 1;
 172:	88 b1       	in	r24, 0x08	; 8
 174:	86 95       	lsr	r24
 176:	88 b9       	out	0x08, r24	; 8
			mTimer(200);
 178:	88 ec       	ldi	r24, 0xC8	; 200
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	be df       	rcall	.-132    	; 0xfa <mTimer>
	
	while(1){
		PORTC = 0b11000000;
		mTimer(200);
		
		for(int k = 1; k < 7; k++){
 17e:	21 96       	adiw	r28, 0x01	; 1
 180:	c7 30       	cpi	r28, 0x07	; 7
 182:	d1 05       	cpc	r29, r1
 184:	b4 f3       	brlt	.-20     	; 0x172 <main+0x2e>
 186:	c1 e0       	ldi	r28, 0x01	; 1
 188:	d0 e0       	ldi	r29, 0x00	; 0
 18a:	07 c0       	rjmp	.+14     	; 0x19a <main+0x56>
			PORTC = PORTC >> 1;
			mTimer(200);
		}
		
		for(int k = 1; k < 6; k++){
			PORTC = PORTC << 1;
 18c:	88 b1       	in	r24, 0x08	; 8
 18e:	88 0f       	add	r24, r24
 190:	88 b9       	out	0x08, r24	; 8
			mTimer(200);
 192:	88 ec       	ldi	r24, 0xC8	; 200
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	b1 df       	rcall	.-158    	; 0xfa <mTimer>
		for(int k = 1; k < 7; k++){
			PORTC = PORTC >> 1;
			mTimer(200);
		}
		
		for(int k = 1; k < 6; k++){
 198:	21 96       	adiw	r28, 0x01	; 1
 19a:	c6 30       	cpi	r28, 0x06	; 6
 19c:	d1 05       	cpc	r29, r1
 19e:	b4 f3       	brlt	.-20     	; 0x18c <main+0x48>
 1a0:	e0 cf       	rjmp	.-64     	; 0x162 <main+0x1e>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
