
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  000004dc  00000570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800218  00800218  00000588  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014fc  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e46  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b3  00000000  00000000  000029e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00003298  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067e  00000000  00000000  0000348c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009d9  00000000  00000000  00003b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000044e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	d2 c1       	rjmp	.+932    	; 0x3b2 <__vector_3>
   e:	00 00       	nop
  10:	1b c2       	rjmp	.+1078   	; 0x448 <__vector_4>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	d1 c1       	rjmp	.+930    	; 0x418 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ed       	ldi	r30, 0xDC	; 220
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 31       	cpi	r26, 0x18	; 24
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e1       	ldi	r26, 0x18	; 24
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 31       	cpi	r26, 0x1B	; 27
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d1       	rcall	.+516    	; 0x324 <main>
 120:	db c1       	rjmp	.+950    	; 0x4d8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <LCDBusyLoop>:
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 b9       	out	0x07, r24	; 7
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	88 b9       	out	0x08, r24	; 8
 130:	88 b1       	in	r24, 0x08	; 8
 132:	8f 7b       	andi	r24, 0xBF	; 191
 134:	88 b9       	out	0x08, r24	; 8
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDBusyLoop+0x14>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCDBusyLoop+0x1a>
 13e:	88 b1       	in	r24, 0x08	; 8
 140:	80 68       	ori	r24, 0x80	; 128
 142:	88 b9       	out	0x08, r24	; 8
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <LCDBusyLoop+0x22>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCDBusyLoop+0x28>
 14c:	86 b1       	in	r24, 0x06	; 6
 14e:	82 95       	swap	r24
 150:	80 7f       	andi	r24, 0xF0	; 240
 152:	92 e0       	ldi	r25, 0x02	; 2
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <LCDBusyLoop+0x30>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCDBusyLoop+0x36>
 15a:	98 b1       	in	r25, 0x08	; 8
 15c:	9f 77       	andi	r25, 0x7F	; 127
 15e:	98 b9       	out	0x08, r25	; 8
 160:	95 e0       	ldi	r25, 0x05	; 5
 162:	9a 95       	dec	r25
 164:	f1 f7       	brne	.-4      	; 0x162 <LCDBusyLoop+0x3e>
 166:	00 00       	nop
 168:	98 b1       	in	r25, 0x08	; 8
 16a:	90 68       	ori	r25, 0x80	; 128
 16c:	98 b9       	out	0x08, r25	; 8
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDBusyLoop+0x4c>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCDBusyLoop+0x52>
 176:	96 b1       	in	r25, 0x06	; 6
 178:	80 78       	andi	r24, 0x80	; 128
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	9a 95       	dec	r25
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCDBusyLoop+0x58>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCDBusyLoop+0x5e>
 182:	98 b1       	in	r25, 0x08	; 8
 184:	9f 77       	andi	r25, 0x7F	; 127
 186:	98 b9       	out	0x08, r25	; 8
 188:	95 e0       	ldi	r25, 0x05	; 5
 18a:	9a 95       	dec	r25
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCDBusyLoop+0x66>
 18e:	00 00       	nop
 190:	81 11       	cpse	r24, r1
 192:	d5 cf       	rjmp	.-86     	; 0x13e <LCDBusyLoop+0x1a>
 194:	88 b1       	in	r24, 0x08	; 8
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	88 b9       	out	0x08, r24	; 8
 19a:	87 b1       	in	r24, 0x07	; 7
 19c:	8f 60       	ori	r24, 0x0F	; 15
 19e:	87 b9       	out	0x07, r24	; 7
 1a0:	08 95       	ret

000001a2 <LCDByte>:
 1a2:	28 2f       	mov	r18, r24
 1a4:	22 95       	swap	r18
 1a6:	2f 70       	andi	r18, 0x0F	; 15
 1a8:	8f 70       	andi	r24, 0x0F	; 15
 1aa:	61 11       	cpse	r22, r1
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <LCDByte+0x14>
 1ae:	98 b1       	in	r25, 0x08	; 8
 1b0:	9f 7b       	andi	r25, 0xBF	; 191
 1b2:	98 b9       	out	0x08, r25	; 8
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <LCDByte+0x1a>
 1b6:	98 b1       	in	r25, 0x08	; 8
 1b8:	90 64       	ori	r25, 0x40	; 64
 1ba:	98 b9       	out	0x08, r25	; 8
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	9a 95       	dec	r25
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCDByte+0x1c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCDByte+0x22>
 1c4:	98 b1       	in	r25, 0x08	; 8
 1c6:	90 68       	ori	r25, 0x80	; 128
 1c8:	98 b9       	out	0x08, r25	; 8
 1ca:	98 b1       	in	r25, 0x08	; 8
 1cc:	90 7f       	andi	r25, 0xF0	; 240
 1ce:	92 2b       	or	r25, r18
 1d0:	98 b9       	out	0x08, r25	; 8
 1d2:	95 e0       	ldi	r25, 0x05	; 5
 1d4:	9a 95       	dec	r25
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCDByte+0x32>
 1d8:	00 00       	nop
 1da:	98 b1       	in	r25, 0x08	; 8
 1dc:	9f 77       	andi	r25, 0x7F	; 127
 1de:	98 b9       	out	0x08, r25	; 8
 1e0:	95 e0       	ldi	r25, 0x05	; 5
 1e2:	9a 95       	dec	r25
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCDByte+0x40>
 1e6:	00 00       	nop
 1e8:	98 b1       	in	r25, 0x08	; 8
 1ea:	90 68       	ori	r25, 0x80	; 128
 1ec:	98 b9       	out	0x08, r25	; 8
 1ee:	98 b1       	in	r25, 0x08	; 8
 1f0:	90 7f       	andi	r25, 0xF0	; 240
 1f2:	89 2b       	or	r24, r25
 1f4:	88 b9       	out	0x08, r24	; 8
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCDByte+0x56>
 1fc:	00 00       	nop
 1fe:	88 b1       	in	r24, 0x08	; 8
 200:	8f 77       	andi	r24, 0x7F	; 127
 202:	88 b9       	out	0x08, r24	; 8
 204:	95 e0       	ldi	r25, 0x05	; 5
 206:	9a 95       	dec	r25
 208:	f1 f7       	brne	.-4      	; 0x206 <LCDByte+0x64>
 20a:	00 00       	nop
 20c:	8b cf       	rjmp	.-234    	; 0x124 <LCDBusyLoop>
 20e:	08 95       	ret

00000210 <InitLCD>:
 210:	cf 93       	push	r28
 212:	c8 2f       	mov	r28, r24
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	86 e7       	ldi	r24, 0x76	; 118
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <InitLCD+0xa>
 222:	00 c0       	rjmp	.+0      	; 0x224 <InitLCD+0x14>
 224:	00 00       	nop
 226:	87 b1       	in	r24, 0x07	; 7
 228:	8f 60       	ori	r24, 0x0F	; 15
 22a:	87 b9       	out	0x07, r24	; 7
 22c:	87 b1       	in	r24, 0x07	; 7
 22e:	80 68       	ori	r24, 0x80	; 128
 230:	87 b9       	out	0x07, r24	; 7
 232:	87 b1       	in	r24, 0x07	; 7
 234:	80 64       	ori	r24, 0x40	; 64
 236:	87 b9       	out	0x07, r24	; 7
 238:	87 b1       	in	r24, 0x07	; 7
 23a:	80 62       	ori	r24, 0x20	; 32
 23c:	87 b9       	out	0x07, r24	; 7
 23e:	88 b1       	in	r24, 0x08	; 8
 240:	80 7f       	andi	r24, 0xF0	; 240
 242:	88 b9       	out	0x08, r24	; 8
 244:	88 b1       	in	r24, 0x08	; 8
 246:	8f 77       	andi	r24, 0x7F	; 127
 248:	88 b9       	out	0x08, r24	; 8
 24a:	88 b1       	in	r24, 0x08	; 8
 24c:	8f 7d       	andi	r24, 0xDF	; 223
 24e:	88 b9       	out	0x08, r24	; 8
 250:	88 b1       	in	r24, 0x08	; 8
 252:	8f 7b       	andi	r24, 0xBF	; 191
 254:	88 b9       	out	0x08, r24	; 8
 256:	00 c0       	rjmp	.+0      	; 0x258 <InitLCD+0x48>
 258:	00 c0       	rjmp	.+0      	; 0x25a <InitLCD+0x4a>
 25a:	00 00       	nop
 25c:	88 b1       	in	r24, 0x08	; 8
 25e:	80 68       	ori	r24, 0x80	; 128
 260:	88 b9       	out	0x08, r24	; 8
 262:	88 b1       	in	r24, 0x08	; 8
 264:	82 60       	ori	r24, 0x02	; 2
 266:	88 b9       	out	0x08, r24	; 8
 268:	25 e0       	ldi	r18, 0x05	; 5
 26a:	2a 95       	dec	r18
 26c:	f1 f7       	brne	.-4      	; 0x26a <InitLCD+0x5a>
 26e:	00 00       	nop
 270:	88 b1       	in	r24, 0x08	; 8
 272:	8f 77       	andi	r24, 0x7F	; 127
 274:	88 b9       	out	0x08, r24	; 8
 276:	85 e0       	ldi	r24, 0x05	; 5
 278:	8a 95       	dec	r24
 27a:	f1 f7       	brne	.-4      	; 0x278 <InitLCD+0x68>
 27c:	00 00       	nop
 27e:	52 df       	rcall	.-348    	; 0x124 <LCDBusyLoop>
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	8c 2f       	mov	r24, r28
 284:	8c 60       	ori	r24, 0x0C	; 12
 286:	8d df       	rcall	.-230    	; 0x1a2 <LCDByte>
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	88 e2       	ldi	r24, 0x28	; 40
 28c:	8a df       	rcall	.-236    	; 0x1a2 <LCDByte>
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <LCDWriteString>:
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	ec 01       	movw	r28, r24
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <LCDWriteString+0xe>
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	82 df       	rcall	.-252    	; 0x1a2 <LCDByte>
 29e:	21 96       	adiw	r28, 0x01	; 1
 2a0:	88 81       	ld	r24, Y
 2a2:	81 11       	cpse	r24, r1
 2a4:	fa cf       	rjmp	.-12     	; 0x29a <LCDWriteString+0x8>
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 2ac:	88 32       	cpi	r24, 0x28	; 40
 2ae:	28 f4       	brcc	.+10     	; 0x2ba <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 2b0:	61 11       	cpse	r22, r1
 2b2:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	80 68       	ori	r24, 0x80	; 128
 2b8:	74 cf       	rjmp	.-280    	; 0x1a2 <LCDByte>
 2ba:	08 95       	ret

000002bc <mTimer>:
	current_cw = 1;
}

void CCW(){
	PORTB = 0b01110000;
	current_cw = 0;
 2bc:	ac 01       	movw	r20, r24
 2be:	e1 e8       	ldi	r30, 0x81	; 129
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	82 60       	ori	r24, 0x02	; 2
 2c6:	80 83       	st	Z, r24
 2c8:	80 81       	ld	r24, Z
 2ca:	88 60       	ori	r24, 0x08	; 8
 2cc:	80 83       	st	Z, r24
 2ce:	80 ed       	ldi	r24, 0xD0	; 208
 2d0:	97 e0       	ldi	r25, 0x07	; 7
 2d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 2da:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 2de:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 2e2:	86 b3       	in	r24, 0x16	; 22
 2e4:	82 60       	ori	r24, 0x02	; 2
 2e6:	86 bb       	out	0x16, r24	; 22
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	07 c0       	rjmp	.+14     	; 0x2fc <mTimer+0x40>
 2ee:	b1 9b       	sbis	0x16, 1	; 22
 2f0:	fe cf       	rjmp	.-4      	; 0x2ee <mTimer+0x32>
 2f2:	96 b3       	in	r25, 0x16	; 22
 2f4:	92 60       	ori	r25, 0x02	; 2
 2f6:	96 bb       	out	0x16, r25	; 22
 2f8:	2f 5f       	subi	r18, 0xFF	; 255
 2fa:	3f 4f       	sbci	r19, 0xFF	; 255
 2fc:	24 17       	cp	r18, r20
 2fe:	35 07       	cpc	r19, r21
 300:	b4 f3       	brlt	.-20     	; 0x2ee <mTimer+0x32>
 302:	e1 e8       	ldi	r30, 0x81	; 129
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	8d 7f       	andi	r24, 0xFD	; 253
 30a:	80 83       	st	Z, r24
 30c:	08 95       	ret

0000030e <brake>:
}

void brake(){
	PORTB = 0b01111000;
 30e:	88 e7       	ldi	r24, 0x78	; 120
 310:	85 b9       	out	0x05, r24	; 5
 312:	08 95       	ret

00000314 <PWM>:
}

void PWM(){
TCCR0A = 0b10000011; //set first two bits to 10, clear OC0A on compare match, set last two bits to WGM mode 3, bits 011 (bits are separated into 2 registers)
 314:	83 e8       	ldi	r24, 0x83	; 131
 316:	84 bd       	out	0x24, r24	; 36

TCCR0B = 0b00000011; // set bit 3 to WGM mode 3 (first bit of 011), set last 3 bits to 011 to prescale clock by 64
 318:	83 e0       	ldi	r24, 0x03	; 3
 31a:	85 bd       	out	0x25, r24	; 37

//TIMSK0 = 0b00000010; // set bit 1 to 1, enables OCIE0A

OCR0A = ADC_result; // set OCRA to potentiometer
 31c:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
 320:	87 bd       	out	0x27, r24	; 39
 322:	08 95       	ret

00000324 <main>:


void main()
{
	//TIMER CODE
	CLKPR = 0x80;
 324:	e1 e6       	ldi	r30, 0x61	; 97
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 e8       	ldi	r24, 0x80	; 128
 32a:	80 83       	st	Z, r24
	CLKPR = 0x01;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 83       	st	Z, r24
	//TCCR1B |= _BV(CS11);

	cli();  // disable all of the interrupt ==========================
 330:	f8 94       	cli
	
	// config the external interrupt ======================================
	EIMSK |= (_BV(INT2));      // enable INT2
 332:	8d b3       	in	r24, 0x1d	; 29
 334:	84 60       	ori	r24, 0x04	; 4
 336:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (_BV(ISC21) | _BV(ISC20));   // rising edge interrupt
 338:	e9 e6       	ldi	r30, 0x69	; 105
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	80 63       	ori	r24, 0x30	; 48
 340:	80 83       	st	Z, r24
	
	//interrupt for switching belt direction
	EIMSK |= (_BV(INT3));	//enable INT3
 342:	8d b3       	in	r24, 0x1d	; 29
 344:	88 60       	ori	r24, 0x08	; 8
 346:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (_BV(ISC31));// | _BV(ISC30)); //rising edge interrupt
 348:	80 81       	ld	r24, Z
 34a:	80 68       	ori	r24, 0x80	; 128
 34c:	80 83       	st	Z, r24
	// config ADC =========================================================
	// by default, the ADC input (analog input is set to be ADC0 / PORTF0
	ADCSRA |= _BV(ADEN);   // enable ADC
 34e:	ca e7       	ldi	r28, 0x7A	; 122
 350:	d0 e0       	ldi	r29, 0x00	; 0
 352:	88 81       	ld	r24, Y
 354:	80 68       	ori	r24, 0x80	; 128
 356:	88 83       	st	Y, r24
	ADCSRA |= _BV(ADIE);   // enable interrupt of ADC
 358:	88 81       	ld	r24, Y
 35a:	88 60       	ori	r24, 0x08	; 8
 35c:	88 83       	st	Y, r24
	ADMUX |= _BV(ADLAR) | _BV(REFS0);  // sets voltage reference selection and ADC left adjust result
 35e:	ec e7       	ldi	r30, 0x7C	; 124
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	80 66       	ori	r24, 0x60	; 96
 366:	80 83       	st	Z, r24
	
	// set the PORTC as output to display the ADC result ==================
	DDRC  = 0xff;
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xff;
 36c:	84 b9       	out	0x04, r24	; 4
	DDRL = 0xff; //set PORTB as output for DC motor
 36e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	// sets the Global Enable for all interrupts ==========================
	sei();
 372:	78 94       	sei

	
	//Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	4c df       	rcall	.-360    	; 0x210 <InitLCD>
	
	
	PWM(); //initialize PWM
 378:	cd df       	rcall	.-102    	; 0x314 <PWM>
 37a:	88 81       	ld	r24, Y
	//CW(); // turn cw
	//mTimer(10);
	
		// initialize the ADC, start one conversion at the beginning ==========
		ADCSRA |= _BV(ADSC);
 37c:	80 64       	ori	r24, 0x40	; 64
 37e:	88 83       	st	Y, r24
 380:	80 e1       	ldi	r24, 0x10	; 16
	
	while (1)
	{  
		PORTL = 0x10;
 382:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 386:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <ADC_result_flag>
		//mTimer(500);
		if (ADC_result_flag) 
 38a:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <ADC_result_flag+0x1>
 38e:	89 2b       	or	r24, r25
 390:	b9 f3       	breq	.-18     	; 0x380 <main+0x5c>
 392:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
		{
					OCR0A = ADC_result; //change PWM to current potentiometer input
 396:	87 bd       	out	0x27, r24	; 39
 398:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <ADC_result_flag+0x1>
					ADC_result_flag = 0x00; //clear ADC flag
 39c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <ADC_result_flag>
 3a0:	ea e7       	ldi	r30, 0x7A	; 122
					ADCSRA |= _BV(ADSC); //start another ADC
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	80 64       	ori	r24, 0x40	; 64
 3a8:	80 83       	st	Z, r24
 3aa:	80 e3       	ldi	r24, 0x30	; 48
			PORTL = 0x30;
 3ac:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 3b0:	e7 cf       	rjmp	.-50     	; 0x380 <main+0x5c>

000003b2 <__vector_3>:
 3b2:	1f 92       	push	r1
	}// end while
}   // end main

// sensor switch:  Active HIGH starts AD converstion =======
ISR(INT2_vect)
{  // when there is a rising edge, we need to do ADC =====================
 3b4:	0f 92       	push	r0
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	0f 92       	push	r0
 3ba:	11 24       	eor	r1, r1
 3bc:	0b b6       	in	r0, 0x3b	; 59
 3be:	0f 92       	push	r0
 3c0:	2f 93       	push	r18
 3c2:	3f 93       	push	r19
 3c4:	4f 93       	push	r20
 3c6:	5f 93       	push	r21
 3c8:	6f 93       	push	r22
 3ca:	7f 93       	push	r23
 3cc:	8f 93       	push	r24
 3ce:	9f 93       	push	r25
 3d0:	af 93       	push	r26
 3d2:	bf 93       	push	r27
 3d4:	ef 93       	push	r30
 3d6:	ff 93       	push	r31
	if((PIND & 0x04) == 0x04){
 3d8:	4a 9b       	sbis	0x09, 2	; 9
 3da:	0b c0       	rjmp	.+22     	; 0x3f2 <__vector_3+0x40>
		PORTB = 0x00;
 3dc:	15 b8       	out	0x05, r1	; 5
		LCDClear();
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	df de       	rcall	.-578    	; 0x1a2 <LCDByte>
		LCDWriteStringXY(0,0, "Kill Switch Activated");
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	61 df       	rcall	.-318    	; 0x2ac <LCDGotoXY>
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	92 e0       	ldi	r25, 0x02	; 2
 3ee:	51 df       	rcall	.-350    	; 0x292 <LCDWriteString>
 3f0:	ff cf       	rjmp	.-2      	; 0x3f0 <__vector_3+0x3e>
		while (1){} //infinite loop
 } 
 }  // the interrupt will be triggered if the ADC is done ======================== 
 3f2:	ff 91       	pop	r31
 3f4:	ef 91       	pop	r30
 3f6:	bf 91       	pop	r27
 3f8:	af 91       	pop	r26
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	7f 91       	pop	r23
 400:	6f 91       	pop	r22
 402:	5f 91       	pop	r21
 404:	4f 91       	pop	r20
 406:	3f 91       	pop	r19
 408:	2f 91       	pop	r18
 40a:	0f 90       	pop	r0
 40c:	0b be       	out	0x3b, r0	; 59
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

00000418 <__vector_29>:
 
 ISR(ADC_vect)  {
 418:	1f 92       	push	r1
 41a:	0f 92       	push	r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	8f 93       	push	r24
 424:	9f 93       	push	r25
	ADC_result = ADCH;
 426:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 42a:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
	ADC_result_flag = 1;
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <ADC_result_flag+0x1>
 436:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <ADC_result_flag>
 }
 43a:	9f 91       	pop	r25
 43c:	8f 91       	pop	r24
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <__vector_4>:

ISR(INT3_vect){
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	0b b6       	in	r0, 0x3b	; 59
 454:	0f 92       	push	r0
 456:	2f 93       	push	r18
 458:	3f 93       	push	r19
 45a:	4f 93       	push	r20
 45c:	5f 93       	push	r21
 45e:	6f 93       	push	r22
 460:	7f 93       	push	r23
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
 466:	af 93       	push	r26
 468:	bf 93       	push	r27
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
	if ((PIND & 0x08) == 0x00){
 46e:	4b 99       	sbic	0x09, 3	; 9
 470:	20 c0       	rjmp	.+64     	; 0x4b2 <__vector_4+0x6a>
	//PORTL = 0x80;	
	brake();
 472:	4d df       	rcall	.-358    	; 0x30e <brake>
	mTimer(20); //debounce
 474:	84 e1       	ldi	r24, 0x14	; 20
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	21 df       	rcall	.-446    	; 0x2bc <mTimer>
	if(current_cw == 1){
 47a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 47e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	49 f4       	brne	.+18     	; 0x498 <__vector_4+0x50>
			PORTB = 0b00111000;
 486:	88 e3       	ldi	r24, 0x38	; 56
 488:	85 b9       	out	0x05, r24	; 5
			current_cw = 1;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 492:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 496:	08 c0       	rjmp	.+16     	; 0x4a8 <__vector_4+0x60>
	}
	else {
			PORTB = 0b00111000;
 498:	88 e3       	ldi	r24, 0x38	; 56
 49a:	85 b9       	out	0x05, r24	; 5
			current_cw = 1;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 4a4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	}
	while((PIND & 0x08) == 0x00){
 4a8:	4b 9b       	sbis	0x09, 3	; 9
 4aa:	fe cf       	rjmp	.-4      	; 0x4a8 <__vector_4+0x60>
		
	}
	mTimer(20);//debounce
 4ac:	84 e1       	ldi	r24, 0x14	; 20
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	05 df       	rcall	.-502    	; 0x2bc <mTimer>
	//PORTL = 0x00;
	}
	
}
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	bf 91       	pop	r27
 4b8:	af 91       	pop	r26
 4ba:	9f 91       	pop	r25
 4bc:	8f 91       	pop	r24
 4be:	7f 91       	pop	r23
 4c0:	6f 91       	pop	r22
 4c2:	5f 91       	pop	r21
 4c4:	4f 91       	pop	r20
 4c6:	3f 91       	pop	r19
 4c8:	2f 91       	pop	r18
 4ca:	0f 90       	pop	r0
 4cc:	0b be       	out	0x3b, r0	; 59
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <_exit>:
 4d8:	f8 94       	cli

000004da <__stop_program>:
 4da:	ff cf       	rjmp	.-2      	; 0x4da <__stop_program>
