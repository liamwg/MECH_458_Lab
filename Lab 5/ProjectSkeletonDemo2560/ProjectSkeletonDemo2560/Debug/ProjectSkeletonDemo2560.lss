
ProjectSkeletonDemo2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800200  000007d6  0000086a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080025a  0080025a  000008c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018bd  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ed5  00000000  00000000  000022a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000974  00000000  00000000  00003176  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00003aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000772  00000000  00000000  00003d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be6  00000000  00000000  000044ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000050d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c1       	rjmp	.+788    	; 0x31e <__vector_2>
   a:	00 00       	nop
   c:	e5 c1       	rjmp	.+970    	; 0x3d8 <__vector_3>
   e:	00 00       	nop
  10:	32 c2       	rjmp	.+1124   	; 0x476 <__vector_4>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	4f c2       	rjmp	.+1182   	; 0x514 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ed       	ldi	r30, 0xD6	; 214
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 35       	cpi	r26, 0x5A	; 90
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e5       	ldi	r26, 0x5A	; 90
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 36       	cpi	r26, 0x63	; 99
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	15 d3       	rcall	.+1578   	; 0x74a <main>
 120:	58 c3       	rjmp	.+1712   	; 0x7d2 <_exit>

00000122 <__bad_interrupt>:
 122:	30 c1       	rjmp	.+608    	; 0x384 <__vector_default>

00000124 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 12a:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
 12c:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <LCDBusyLoop+0xc>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCDBusyLoop+0x12>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 136:	47 9a       	sbi	0x08, 7	; 8
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	9a 95       	dec	r25
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x16>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1c>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 140:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 142:	82 95       	swap	r24
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	92 e0       	ldi	r25, 0x02	; 2
 148:	9a 95       	dec	r25
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x24>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCDBusyLoop+0x2a>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 14e:	47 98       	cbi	0x08, 7	; 8
 150:	95 e0       	ldi	r25, 0x05	; 5
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <LCDBusyLoop+0x2e>
 156:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 158:	47 9a       	sbi	0x08, 7	; 8
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDBusyLoop+0x38>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCDBusyLoop+0x3e>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 162:	96 b1       	in	r25, 0x06	; 6
 164:	92 e0       	ldi	r25, 0x02	; 2
 166:	9a 95       	dec	r25
 168:	f1 f7       	brne	.-4      	; 0x166 <LCDBusyLoop+0x42>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCDBusyLoop+0x48>

		busy=status & 0b10000000;

		_delay_us(0.5);
		
		CLEAR_E();
 16c:	47 98       	cbi	0x08, 7	; 8
 16e:	95 e0       	ldi	r25, 0x05	; 5
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDBusyLoop+0x4c>
 174:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 176:	88 23       	and	r24, r24
 178:	f4 f2       	brlt	.-68     	; 0x136 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 17a:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 17c:	87 b1       	in	r24, 0x07	; 7
 17e:	8f 60       	ori	r24, 0x0F	; 15
 180:	87 b9       	out	0x07, r24	; 7
 182:	08 95       	ret

00000184 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 184:	28 2f       	mov	r18, r24
 186:	22 95       	swap	r18
 188:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 18a:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 18c:	61 11       	cpse	r22, r1
 18e:	02 c0       	rjmp	.+4      	; 0x194 <LCDByte+0x10>
	CLEAR_RS();
 190:	46 98       	cbi	0x08, 6	; 8
 192:	01 c0       	rjmp	.+2      	; 0x196 <LCDByte+0x12>
else
	SET_RS();
 194:	46 9a       	sbi	0x08, 6	; 8
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	9a 95       	dec	r25
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCDByte+0x14>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCDByte+0x1a>

_delay_us(0.500);		//tAS


SET_E();
 19e:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 1a0:	98 b1       	in	r25, 0x08	; 8
 1a2:	90 7f       	andi	r25, 0xF0	; 240
 1a4:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 1a6:	98 b9       	out	0x08, r25	; 8
 1a8:	95 e0       	ldi	r25, 0x05	; 5
 1aa:	9a 95       	dec	r25
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCDByte+0x26>
 1ae:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 1b0:	47 98       	cbi	0x08, 7	; 8
 1b2:	95 e0       	ldi	r25, 0x05	; 5
 1b4:	9a 95       	dec	r25
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCDByte+0x30>
 1b8:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 1ba:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1bc:	98 b1       	in	r25, 0x08	; 8
 1be:	90 7f       	andi	r25, 0xF0	; 240
 1c0:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 1c2:	88 b9       	out	0x08, r24	; 8
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCDByte+0x42>
 1ca:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 1cc:	47 98       	cbi	0x08, 7	; 8
 1ce:	95 e0       	ldi	r25, 0x05	; 5
 1d0:	9a 95       	dec	r25
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCDByte+0x4c>
 1d4:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 1d6:	a6 cf       	rjmp	.-180    	; 0x124 <LCDBusyLoop>
 1d8:	08 95       	ret

000001da <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 1da:	cf 93       	push	r28
 1dc:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	86 e7       	ldi	r24, 0x76	; 118
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <InitLCD+0xa>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <InitLCD+0x14>
 1ee:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1f0:	87 b1       	in	r24, 0x07	; 7
 1f2:	8f 60       	ori	r24, 0x0F	; 15
 1f4:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 1f6:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1f8:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1fa:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 1fc:	88 b1       	in	r24, 0x08	; 8
 1fe:	80 7f       	andi	r24, 0xF0	; 240
 200:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 202:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 204:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 206:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	00 c0       	rjmp	.+0      	; 0x20a <InitLCD+0x30>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <InitLCD+0x32>
 20c:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 20e:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 210:	41 9a       	sbi	0x08, 1	; 8
 212:	25 e0       	ldi	r18, 0x05	; 5
 214:	2a 95       	dec	r18
 216:	f1 f7       	brne	.-4      	; 0x214 <InitLCD+0x3a>
 218:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 21a:	47 98       	cbi	0x08, 7	; 8
 21c:	85 e0       	ldi	r24, 0x05	; 5
 21e:	8a 95       	dec	r24
 220:	f1 f7       	brne	.-4      	; 0x21e <InitLCD+0x44>
 222:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 224:	7f df       	rcall	.-258    	; 0x124 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	8c 2f       	mov	r24, r28
 22a:	8c 60       	ori	r24, 0x0C	; 12
 22c:	ab df       	rcall	.-170    	; 0x184 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	88 e2       	ldi	r24, 0x28	; 40
 232:	a8 df       	rcall	.-176    	; 0x184 <LCDByte>
}
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 23e:	88 81       	ld	r24, Y
 240:	88 23       	and	r24, r24
 242:	31 f0       	breq	.+12     	; 0x250 <LCDWriteString+0x18>
 244:	21 96       	adiw	r28, 0x01	; 1
 {
	LCDData(*msg);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	9d df       	rcall	.-198    	; 0x184 <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 24a:	89 91       	ld	r24, Y+
 24c:	81 11       	cpse	r24, r1
 24e:	fb cf       	rjmp	.-10     	; 0x246 <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	00 d0       	rcall	.+0      	; 0x264 <LCDWriteInt+0xe>
 264:	1f 92       	push	r1
 266:	1f 92       	push	r1
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 26e:	fe 01       	movw	r30, r28
 270:	31 96       	adiw	r30, 0x01	; 1
 272:	25 e0       	ldi	r18, 0x05	; 5
 274:	df 01       	movw	r26, r30
 276:	1d 92       	st	X+, r1
 278:	2a 95       	dec	r18
 27a:	e9 f7       	brne	.-6      	; 0x276 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
 27c:	00 97       	sbiw	r24, 0x00	; 0
 27e:	51 f0       	breq	.+20     	; 0x294 <LCDWriteInt+0x3e>
 280:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
 282:	2a e0       	ldi	r18, 0x0A	; 10
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	b9 01       	movw	r22, r18
 288:	7d d2       	rcall	.+1274   	; 0x784 <__divmodhi4>
 28a:	82 93       	st	-Z, r24
	val=val/10;
 28c:	86 2f       	mov	r24, r22
 28e:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 290:	00 97       	sbiw	r24, 0x00	; 0
 292:	c9 f7       	brne	.-14     	; 0x286 <LCDWriteInt+0x30>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 294:	bf ef       	ldi	r27, 0xFF	; 255
 296:	eb 16       	cp	r14, r27
 298:	fb 06       	cpc	r15, r27
 29a:	69 f4       	brne	.+26     	; 0x2b6 <LCDWriteInt+0x60>
		while(str[j]==0) j++;
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	81 11       	cpse	r24, r1
 2a0:	1d c0       	rjmp	.+58     	; 0x2dc <LCDWriteInt+0x86>
 2a2:	fe 01       	movw	r30, r28
 2a4:	32 96       	adiw	r30, 0x02	; 2
 2a6:	00 e0       	ldi	r16, 0x00	; 0
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	0f 5f       	subi	r16, 0xFF	; 255
 2ac:	1f 4f       	sbci	r17, 0xFF	; 255
 2ae:	81 91       	ld	r24, Z+
 2b0:	88 23       	and	r24, r24
 2b2:	d9 f3       	breq	.-10     	; 0x2aa <LCDWriteInt+0x54>
 2b4:	0f c0       	rjmp	.+30     	; 0x2d4 <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 2b6:	05 e0       	ldi	r16, 0x05	; 5
 2b8:	10 e0       	ldi	r17, 0x00	; 0
 2ba:	0e 19       	sub	r16, r14
 2bc:	1f 09       	sbc	r17, r15
 2be:	0a c0       	rjmp	.+20     	; 0x2d4 <LCDWriteInt+0x7e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2c0:	f8 01       	movw	r30, r16
 2c2:	81 91       	ld	r24, Z+
 2c4:	8f 01       	movw	r16, r30
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	80 5d       	subi	r24, 0xD0	; 208
 2ca:	5c df       	rcall	.-328    	; 0x184 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2cc:	0e 15       	cp	r16, r14
 2ce:	1f 05       	cpc	r17, r15
 2d0:	b9 f7       	brne	.-18     	; 0x2c0 <LCDWriteInt+0x6a>
 2d2:	11 c0       	rjmp	.+34     	; 0x2f6 <LCDWriteInt+0xa0>
 2d4:	05 30       	cpi	r16, 0x05	; 5
 2d6:	11 05       	cpc	r17, r1
 2d8:	1c f0       	brlt	.+6      	; 0x2e0 <LCDWriteInt+0x8a>
 2da:	0d c0       	rjmp	.+26     	; 0x2f6 <LCDWriteInt+0xa0>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 2dc:	00 e0       	ldi	r16, 0x00	; 0
 2de:	10 e0       	ldi	r17, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	8c 0f       	add	r24, r28
 2e6:	9d 1f       	adc	r25, r29
 2e8:	08 0f       	add	r16, r24
 2ea:	19 1f       	adc	r17, r25
 2ec:	7e 01       	movw	r14, r28
 2ee:	96 e0       	ldi	r25, 0x06	; 6
 2f0:	e9 0e       	add	r14, r25
 2f2:	f1 1c       	adc	r15, r1
 2f4:	e5 cf       	rjmp	.-54     	; 0x2c0 <LCDWriteInt+0x6a>
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	08 95       	ret

0000030e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 30e:	88 32       	cpi	r24, 0x28	; 40
 310:	28 f4       	brcc	.+10     	; 0x31c <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 312:	61 11       	cpse	r22, r1
 314:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	34 cf       	rjmp	.-408    	; 0x184 <LCDByte>
 31c:	08 95       	ret

0000031e <__vector_2>:

	OCR0A = 0xA0; // set OCRA to something
}

void CCW(){
	PORTB = 0b01110000;
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	0b b6       	in	r0, 0x3b	; 59
 32a:	0f 92       	push	r0
 32c:	2f 93       	push	r18
 32e:	3f 93       	push	r19
 330:	4f 93       	push	r20
 332:	5f 93       	push	r21
 334:	6f 93       	push	r22
 336:	7f 93       	push	r23
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
 33c:	af 93       	push	r26
 33e:	bf 93       	push	r27
 340:	ef 93       	push	r30
 342:	ff 93       	push	r31
 344:	49 99       	sbic	0x09, 1	; 9
 346:	0b c0       	rjmp	.+22     	; 0x35e <__vector_2+0x40>
 348:	15 b8       	out	0x05, r1	; 5
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	1a df       	rcall	.-460    	; 0x184 <LCDByte>
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	dc df       	rcall	.-72     	; 0x30e <LCDGotoXY>
 356:	82 e1       	ldi	r24, 0x12	; 18
 358:	92 e0       	ldi	r25, 0x02	; 2
 35a:	6e df       	rcall	.-292    	; 0x238 <LCDWriteString>
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__vector_2+0x3e>
 35e:	ff 91       	pop	r31
 360:	ef 91       	pop	r30
 362:	bf 91       	pop	r27
 364:	af 91       	pop	r26
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	7f 91       	pop	r23
 36c:	6f 91       	pop	r22
 36e:	5f 91       	pop	r21
 370:	4f 91       	pop	r20
 372:	3f 91       	pop	r19
 374:	2f 91       	pop	r18
 376:	0f 90       	pop	r0
 378:	0b be       	out	0x3b, r0	; 59
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <__vector_default>:
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <mTimer>:
 398:	ac 01       	movw	r20, r24
 39a:	e1 e8       	ldi	r30, 0x81	; 129
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	90 81       	ld	r25, Z
 3a0:	98 60       	ori	r25, 0x08	; 8
 3a2:	90 83       	st	Z, r25
 3a4:	88 ee       	ldi	r24, 0xE8	; 232
 3a6:	93 e0       	ldi	r25, 0x03	; 3
 3a8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 3b0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 3b4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 3b8:	b1 9a       	sbi	0x16, 1	; 22
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	05 c0       	rjmp	.+10     	; 0x3ca <mTimer+0x32>
 3c0:	b1 9b       	sbis	0x16, 1	; 22
 3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <mTimer+0x28>
 3c4:	b1 9a       	sbi	0x16, 1	; 22
 3c6:	2f 5f       	subi	r18, 0xFF	; 255
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ca:	24 17       	cp	r18, r20
 3cc:	35 07       	cpc	r19, r21
 3ce:	1c f4       	brge	.+6      	; 0x3d6 <mTimer+0x3e>
 3d0:	b1 9b       	sbis	0x16, 1	; 22
 3d2:	f6 cf       	rjmp	.-20     	; 0x3c0 <mTimer+0x28>
 3d4:	f7 cf       	rjmp	.-18     	; 0x3c4 <mTimer+0x2c>
 3d6:	08 95       	ret

000003d8 <__vector_3>:
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	0b b6       	in	r0, 0x3b	; 59
 3e4:	0f 92       	push	r0
 3e6:	2f 93       	push	r18
 3e8:	3f 93       	push	r19
 3ea:	4f 93       	push	r20
 3ec:	5f 93       	push	r21
 3ee:	6f 93       	push	r22
 3f0:	7f 93       	push	r23
 3f2:	8f 93       	push	r24
 3f4:	9f 93       	push	r25
 3f6:	af 93       	push	r26
 3f8:	bf 93       	push	r27
 3fa:	ef 93       	push	r30
 3fc:	ff 93       	push	r31
 3fe:	84 e1       	ldi	r24, 0x14	; 20
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	ca df       	rcall	.-108    	; 0x398 <mTimer>
 404:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <i>
 408:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <i+0x1>
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <i+0x1>
 412:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <i>
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	9f ef       	ldi	r25, 0xFF	; 255
 41a:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <lowest_ref+0x1>
 41e:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <lowest_ref>
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	89 e0       	ldi	r24, 0x09	; 9
 426:	73 df       	rcall	.-282    	; 0x30e <LCDGotoXY>
 428:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <i>
 42c:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <i+0x1>
 430:	65 e0       	ldi	r22, 0x05	; 5
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	10 df       	rcall	.-480    	; 0x256 <LCDWriteInt>
 436:	4a 9b       	sbis	0x09, 2	; 9
 438:	05 c0       	rjmp	.+10     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 43a:	ea e7       	ldi	r30, 0x7A	; 122
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	80 64       	ori	r24, 0x40	; 64
 442:	80 83       	st	Z, r24
 444:	84 e1       	ldi	r24, 0x14	; 20
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	a7 df       	rcall	.-178    	; 0x398 <mTimer>
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <STATE>
 450:	ff 91       	pop	r31
 452:	ef 91       	pop	r30
 454:	bf 91       	pop	r27
 456:	af 91       	pop	r26
 458:	9f 91       	pop	r25
 45a:	8f 91       	pop	r24
 45c:	7f 91       	pop	r23
 45e:	6f 91       	pop	r22
 460:	5f 91       	pop	r21
 462:	4f 91       	pop	r20
 464:	3f 91       	pop	r19
 466:	2f 91       	pop	r18
 468:	0f 90       	pop	r0
 46a:	0b be       	out	0x3b, r0	; 59
 46c:	0f 90       	pop	r0
 46e:	0f be       	out	0x3f, r0	; 63
 470:	0f 90       	pop	r0
 472:	1f 90       	pop	r1
 474:	18 95       	reti

00000476 <__vector_4>:
 476:	1f 92       	push	r1
 478:	0f 92       	push	r0
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	0f 92       	push	r0
 47e:	11 24       	eor	r1, r1
 480:	0b b6       	in	r0, 0x3b	; 59
 482:	0f 92       	push	r0
 484:	2f 93       	push	r18
 486:	3f 93       	push	r19
 488:	4f 93       	push	r20
 48a:	5f 93       	push	r21
 48c:	6f 93       	push	r22
 48e:	7f 93       	push	r23
 490:	8f 93       	push	r24
 492:	9f 93       	push	r25
 494:	af 93       	push	r26
 496:	bf 93       	push	r27
 498:	ef 93       	push	r30
 49a:	ff 93       	push	r31
 49c:	84 e1       	ldi	r24, 0x14	; 20
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	7b df       	rcall	.-266    	; 0x398 <mTimer>
 4a2:	4b 99       	sbic	0x09, 3	; 9
 4a4:	1f c0       	rjmp	.+62     	; 0x4e4 <__vector_4+0x6e>
 4a6:	83 e0       	ldi	r24, 0x03	; 3
 4a8:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <STATE>
 4ac:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <i>
 4b0:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <i+0x1>
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <i+0x1>
 4ba:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <i>
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	25 df       	rcall	.-438    	; 0x30e <LCDGotoXY>
 4c4:	88 e2       	ldi	r24, 0x28	; 40
 4c6:	92 e0       	ldi	r25, 0x02	; 2
 4c8:	b7 de       	rcall	.-658    	; 0x238 <LCDWriteString>
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	89 e0       	ldi	r24, 0x09	; 9
 4ce:	1f df       	rcall	.-450    	; 0x30e <LCDGotoXY>
 4d0:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <i>
 4d4:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <i+0x1>
 4d8:	65 e0       	ldi	r22, 0x05	; 5
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	bc de       	rcall	.-648    	; 0x256 <LCDWriteInt>
 4de:	82 e3       	ldi	r24, 0x32	; 50
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	5a df       	rcall	.-332    	; 0x398 <mTimer>
 4e4:	4b 9b       	sbis	0x09, 3	; 9
 4e6:	fe cf       	rjmp	.-4      	; 0x4e4 <__vector_4+0x6e>
 4e8:	84 e1       	ldi	r24, 0x14	; 20
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	55 df       	rcall	.-342    	; 0x398 <mTimer>
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	bf 91       	pop	r27
 4f4:	af 91       	pop	r26
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	7f 91       	pop	r23
 4fc:	6f 91       	pop	r22
 4fe:	5f 91       	pop	r21
 500:	4f 91       	pop	r20
 502:	3f 91       	pop	r19
 504:	2f 91       	pop	r18
 506:	0f 90       	pop	r0
 508:	0b be       	out	0x3b, r0	; 59
 50a:	0f 90       	pop	r0
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	0f 90       	pop	r0
 510:	1f 90       	pop	r1
 512:	18 95       	reti

00000514 <__vector_29>:
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	0b b6       	in	r0, 0x3b	; 59
 520:	0f 92       	push	r0
 522:	2f 93       	push	r18
 524:	3f 93       	push	r19
 526:	4f 93       	push	r20
 528:	5f 93       	push	r21
 52a:	6f 93       	push	r22
 52c:	7f 93       	push	r23
 52e:	8f 93       	push	r24
 530:	9f 93       	push	r25
 532:	af 93       	push	r26
 534:	bf 93       	push	r27
 536:	ef 93       	push	r30
 538:	ff 93       	push	r31
 53a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <ADC_low+0x1>
 544:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <ADC_low>
 548:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	98 2f       	mov	r25, r24
 550:	88 27       	eor	r24, r24
 552:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <ADC_high+0x1>
 556:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <ADC_high>
 55a:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <ADC_low>
 55e:	30 91 62 02 	lds	r19, 0x0262	; 0x800262 <ADC_low+0x1>
 562:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <ADC_high>
 566:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <ADC_high+0x1>
 56a:	82 0f       	add	r24, r18
 56c:	93 1f       	adc	r25, r19
 56e:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <__data_end+0x1>
 572:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <__data_end>
 576:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <__data_end>
 57a:	30 91 5b 02 	lds	r19, 0x025B	; 0x80025b <__data_end+0x1>
 57e:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <lowest_ref>
 582:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <lowest_ref+0x1>
 586:	28 17       	cp	r18, r24
 588:	39 07       	cpc	r19, r25
 58a:	58 f4       	brcc	.+22     	; 0x5a2 <__vector_29+0x8e>
 58c:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__data_end>
 590:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <__data_end+0x1>
 594:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <lowest_ref+0x1>
 598:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <lowest_ref>
 59c:	84 e1       	ldi	r24, 0x14	; 20
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	fb de       	rcall	.-522    	; 0x398 <mTimer>
 5a2:	84 e1       	ldi	r24, 0x14	; 20
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	f8 de       	rcall	.-528    	; 0x398 <mTimer>
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	eb dd       	rcall	.-1066   	; 0x184 <LCDByte>
 5ae:	4a 9b       	sbis	0x09, 2	; 9
 5b0:	05 c0       	rjmp	.+10     	; 0x5bc <__vector_29+0xa8>
 5b2:	ea e7       	ldi	r30, 0x7A	; 122
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	80 64       	ori	r24, 0x40	; 64
 5ba:	80 83       	st	Z, r24
 5bc:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <lowest_ref>
 5c0:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <lowest_ref+0x1>
 5c4:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <alum_low>
 5c8:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <alum_low+0x1>
 5cc:	28 17       	cp	r18, r24
 5ce:	39 07       	cpc	r19, r25
 5d0:	94 f0       	brlt	.+36     	; 0x5f6 <__vector_29+0xe2>
 5d2:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <lowest_ref>
 5d6:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <lowest_ref+0x1>
 5da:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <alum_high>
 5de:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <alum_high+0x1>
 5e2:	82 17       	cp	r24, r18
 5e4:	93 07       	cpc	r25, r19
 5e6:	3c f0       	brlt	.+14     	; 0x5f6 <__vector_29+0xe2>
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	90 de       	rcall	.-736    	; 0x30e <LCDGotoXY>
 5ee:	81 e3       	ldi	r24, 0x31	; 49
 5f0:	92 e0       	ldi	r25, 0x02	; 2
 5f2:	22 de       	rcall	.-956    	; 0x238 <LCDWriteString>
 5f4:	56 c0       	rjmp	.+172    	; 0x6a2 <__vector_29+0x18e>
 5f6:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <lowest_ref>
 5fa:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <lowest_ref+0x1>
 5fe:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <steel_low>
 602:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <steel_low+0x1>
 606:	28 17       	cp	r18, r24
 608:	39 07       	cpc	r19, r25
 60a:	94 f0       	brlt	.+36     	; 0x630 <__vector_29+0x11c>
 60c:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <lowest_ref>
 610:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <lowest_ref+0x1>
 614:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <steel_high>
 618:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <steel_high+0x1>
 61c:	82 17       	cp	r24, r18
 61e:	93 07       	cpc	r25, r19
 620:	3c f0       	brlt	.+14     	; 0x630 <__vector_29+0x11c>
 622:	61 e0       	ldi	r22, 0x01	; 1
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	73 de       	rcall	.-794    	; 0x30e <LCDGotoXY>
 628:	8a e3       	ldi	r24, 0x3A	; 58
 62a:	92 e0       	ldi	r25, 0x02	; 2
 62c:	05 de       	rcall	.-1014   	; 0x238 <LCDWriteString>
 62e:	39 c0       	rjmp	.+114    	; 0x6a2 <__vector_29+0x18e>
 630:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <lowest_ref>
 634:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <lowest_ref+0x1>
 638:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <white_low>
 63c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <white_low+0x1>
 640:	28 17       	cp	r18, r24
 642:	39 07       	cpc	r19, r25
 644:	94 f0       	brlt	.+36     	; 0x66a <__vector_29+0x156>
 646:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <lowest_ref>
 64a:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <lowest_ref+0x1>
 64e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <white_high>
 652:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <white_high+0x1>
 656:	82 17       	cp	r24, r18
 658:	93 07       	cpc	r25, r19
 65a:	3c f0       	brlt	.+14     	; 0x66a <__vector_29+0x156>
 65c:	61 e0       	ldi	r22, 0x01	; 1
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	56 de       	rcall	.-852    	; 0x30e <LCDGotoXY>
 662:	80 e4       	ldi	r24, 0x40	; 64
 664:	92 e0       	ldi	r25, 0x02	; 2
 666:	e8 dd       	rcall	.-1072   	; 0x238 <LCDWriteString>
 668:	1c c0       	rjmp	.+56     	; 0x6a2 <__vector_29+0x18e>
 66a:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <lowest_ref>
 66e:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <lowest_ref+0x1>
 672:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <black_low>
 676:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <black_low+0x1>
 67a:	28 17       	cp	r18, r24
 67c:	39 07       	cpc	r19, r25
 67e:	8c f0       	brlt	.+34     	; 0x6a2 <__vector_29+0x18e>
 680:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <lowest_ref>
 684:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <lowest_ref+0x1>
 688:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 68c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 690:	82 17       	cp	r24, r18
 692:	93 07       	cpc	r25, r19
 694:	34 f0       	brlt	.+12     	; 0x6a2 <__vector_29+0x18e>
 696:	61 e0       	ldi	r22, 0x01	; 1
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	39 de       	rcall	.-910    	; 0x30e <LCDGotoXY>
 69c:	86 e4       	ldi	r24, 0x46	; 70
 69e:	92 e0       	ldi	r25, 0x02	; 2
 6a0:	cb dd       	rcall	.-1130   	; 0x238 <LCDWriteString>
 6a2:	ff 91       	pop	r31
 6a4:	ef 91       	pop	r30
 6a6:	bf 91       	pop	r27
 6a8:	af 91       	pop	r26
 6aa:	9f 91       	pop	r25
 6ac:	8f 91       	pop	r24
 6ae:	7f 91       	pop	r23
 6b0:	6f 91       	pop	r22
 6b2:	5f 91       	pop	r21
 6b4:	4f 91       	pop	r20
 6b6:	3f 91       	pop	r19
 6b8:	2f 91       	pop	r18
 6ba:	0f 90       	pop	r0
 6bc:	0b be       	out	0x3b, r0	; 59
 6be:	0f 90       	pop	r0
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	0f 90       	pop	r0
 6c4:	1f 90       	pop	r1
 6c6:	18 95       	reti

000006c8 <PWM>:
 6c8:	83 e8       	ldi	r24, 0x83	; 131
 6ca:	84 bd       	out	0x24, r24	; 36
 6cc:	83 e0       	ldi	r24, 0x03	; 3
 6ce:	85 bd       	out	0x25, r24	; 37
 6d0:	80 ea       	ldi	r24, 0xA0	; 160
 6d2:	87 bd       	out	0x27, r24	; 39
 6d4:	08 95       	ret

000006d6 <initialize>:
}

void initialize(){
	//Timer Code
	CLKPR = 0x80;
 6d6:	e1 e6       	ldi	r30, 0x61	; 97
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 e8       	ldi	r24, 0x80	; 128
 6dc:	80 83       	st	Z, r24
	CLKPR = 0x01;		//  sets system clock to 8MHz
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	80 83       	st	Z, r24
	TCCR1B |= _BV(CS11);
 6e2:	e1 e8       	ldi	r30, 0x81	; 129
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	80 81       	ld	r24, Z
 6e8:	82 60       	ori	r24, 0x02	; 2
 6ea:	80 83       	st	Z, r24
	
	//Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
 6ec:	83 e0       	ldi	r24, 0x03	; 3
 6ee:	75 dd       	rcall	.-1302   	; 0x1da <InitLCD>
	
	LCDClear();
 6f0:	60 e0       	ldi	r22, 0x00	; 0
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	47 dd       	rcall	.-1394   	; 0x184 <LCDByte>
	LCDWriteStringXY(0,0,"Counter=00000");
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	09 de       	rcall	.-1006   	; 0x30e <LCDGotoXY>
 6fc:	8c e4       	ldi	r24, 0x4C	; 76
 6fe:	92 e0       	ldi	r25, 0x02	; 2
 700:	9b dd       	rcall	.-1226   	; 0x238 <LCDWriteString>

	STATE = 0;
 702:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <STATE>

	cli();		// Disables all interrupts
 706:	f8 94       	cli
	
	//Setting inputs and outputs
	DDRD = 0b11110000;	// Going to set up INT2 & INT3 on PORTD
 708:	80 ef       	ldi	r24, 0xF0	; 240
 70a:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xFF;		// just use as a display
 70c:	8f ef       	ldi	r24, 0xFF	; 255
 70e:	87 b9       	out	0x07, r24	; 7

	// Set up the Interrupt 0,3 options
	//External Interrupt Control Register A - EICRA (pg 110 and under the EXT_INT tab to the right
	// Set Interrupt sense control to catch a rising edge
	
	EIMSK |= _BV(INT1); //enable INT2
 710:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= _BV(ISC11);  //falling edge interrupt
 712:	e9 e6       	ldi	r30, 0x69	; 105
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	88 60       	ori	r24, 0x08	; 8
 71a:	80 83       	st	Z, r24
	
	EIMSK |= _BV(INT2); //enable INT2
 71c:	ea 9a       	sbi	0x1d, 2	; 29
	EICRA |= _BV(ISC21) | _BV(ISC20); //rising edge interrupt
 71e:	80 81       	ld	r24, Z
 720:	80 63       	ori	r24, 0x30	; 48
 722:	80 83       	st	Z, r24
	
	EIMSK |= _BV(INT3); //enable INT3
 724:	eb 9a       	sbi	0x1d, 3	; 29
	EICRA |= _BV(ISC31); //falling edge interrupt
 726:	80 81       	ld	r24, Z
 728:	80 68       	ori	r24, 0x80	; 128
 72a:	80 83       	st	Z, r24
	
	ADCSRA |= _BV(ADEN) | _BV(ADIE);   // enable ADC and interrupt of ADC
 72c:	ea e7       	ldi	r30, 0x7A	; 122
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	80 81       	ld	r24, Z
 732:	88 68       	ori	r24, 0x88	; 136
 734:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADPS2) | _BV(ADPS0); //prescale by 1/32
 736:	80 81       	ld	r24, Z
 738:	85 60       	ori	r24, 0x05	; 5
 73a:	80 83       	st	Z, r24
	ADMUX |=_BV(REFS0);  // sets voltage reference selection and ADC left adjust result
 73c:	ec e7       	ldi	r30, 0x7C	; 124
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	80 64       	ori	r24, 0x40	; 64
 744:	80 83       	st	Z, r24

	// See page 112 - EIFR External Interrupt Flags...notice how they reset on their own in 'C'...not in assembly
	//EIMSK |= 0x0C;

	// Enable all interrupts
	sei();	// Note this sets the Global Enable for all interrupts
 746:	78 94       	sei
 748:	08 95       	ret

0000074a <main>:
volatile const int black_high = 1023;


int main(int argc, char *argv[]){
	
	initialize(); //initializes LCD, interrupts
 74a:	c5 df       	rcall	.-118    	; 0x6d6 <initialize>

	PWM(); //initialize PWM 
 74c:	bd df       	rcall	.-134    	; 0x6c8 <PWM>
 74e:	80 e7       	ldi	r24, 0x70	; 112

	OCR0A = 0xA0; // set OCRA to something
}

void CCW(){
	PORTB = 0b01110000;
 750:	85 b9       	out	0x05, r24	; 5
 752:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <STATE>

	// POLLING STATE
	POLLING_STAGE:
	//PORTC |= 0xF0;	// Indicates this state is active
	
	switch(STATE){
 756:	82 30       	cpi	r24, 0x02	; 2
 758:	61 f0       	breq	.+24     	; 0x772 <main+0x28>
 75a:	18 f4       	brcc	.+6      	; 0x762 <main+0x18>
 75c:	81 30       	cpi	r24, 0x01	; 1
 75e:	31 f0       	breq	.+12     	; 0x76c <main+0x22>
 760:	f8 cf       	rjmp	.-16     	; 0x752 <main+0x8>
 762:	83 30       	cpi	r24, 0x03	; 3
 764:	49 f0       	breq	.+18     	; 0x778 <main+0x2e>
 766:	85 30       	cpi	r24, 0x05	; 5
 768:	51 f0       	breq	.+20     	; 0x77e <main+0x34>
 76a:	f3 cf       	rjmp	.-26     	; 0x752 <main+0x8>
 76c:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <STATE>

	MAGNETIC_STAGE:
	// Do whatever is necessary HERE
	//PORTC = 0x01; // Just output pretty lights know you made it here
	//Reset the state variable
	STATE = 0;
 770:	f0 cf       	rjmp	.-32     	; 0x752 <main+0x8>
	goto POLLING_STAGE;
 772:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <STATE>

	REFLECTIVE_STAGE:
	
	//PORTC = 0x04; // Just output pretty lights know you made it here
	//Reset the state variable
	STATE = 0;
 776:	ed cf       	rjmp	.-38     	; 0x752 <main+0x8>
	goto POLLING_STAGE;
 778:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <STATE>
	
	BUCKET_STAGE:
	// Do whatever is necessary HERE
	//PORTC = 0x08;
	//Reset the state variable
	STATE = 0;
 77c:	ea cf       	rjmp	.-44     	; 0x752 <main+0x8>
	goto POLLING_STAGE;
 77e:	80 e0       	ldi	r24, 0x00	; 0
	// The closing STATE ... how would you get here?
	//PORTC = 0xF0;	// Indicates this state is active
	// Stop everything here...'MAKE SAFE'
	return(0);

}
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	08 95       	ret

00000784 <__divmodhi4>:
 784:	97 fb       	bst	r25, 7
 786:	07 2e       	mov	r0, r23
 788:	16 f4       	brtc	.+4      	; 0x78e <__divmodhi4+0xa>
 78a:	00 94       	com	r0
 78c:	06 d0       	rcall	.+12     	; 0x79a <__divmodhi4_neg1>
 78e:	77 fd       	sbrc	r23, 7
 790:	08 d0       	rcall	.+16     	; 0x7a2 <__divmodhi4_neg2>
 792:	0b d0       	rcall	.+22     	; 0x7aa <__udivmodhi4>
 794:	07 fc       	sbrc	r0, 7
 796:	05 d0       	rcall	.+10     	; 0x7a2 <__divmodhi4_neg2>
 798:	3e f4       	brtc	.+14     	; 0x7a8 <__divmodhi4_exit>

0000079a <__divmodhi4_neg1>:
 79a:	90 95       	com	r25
 79c:	81 95       	neg	r24
 79e:	9f 4f       	sbci	r25, 0xFF	; 255
 7a0:	08 95       	ret

000007a2 <__divmodhi4_neg2>:
 7a2:	70 95       	com	r23
 7a4:	61 95       	neg	r22
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255

000007a8 <__divmodhi4_exit>:
 7a8:	08 95       	ret

000007aa <__udivmodhi4>:
 7aa:	aa 1b       	sub	r26, r26
 7ac:	bb 1b       	sub	r27, r27
 7ae:	51 e1       	ldi	r21, 0x11	; 17
 7b0:	07 c0       	rjmp	.+14     	; 0x7c0 <__udivmodhi4_ep>

000007b2 <__udivmodhi4_loop>:
 7b2:	aa 1f       	adc	r26, r26
 7b4:	bb 1f       	adc	r27, r27
 7b6:	a6 17       	cp	r26, r22
 7b8:	b7 07       	cpc	r27, r23
 7ba:	10 f0       	brcs	.+4      	; 0x7c0 <__udivmodhi4_ep>
 7bc:	a6 1b       	sub	r26, r22
 7be:	b7 0b       	sbc	r27, r23

000007c0 <__udivmodhi4_ep>:
 7c0:	88 1f       	adc	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	5a 95       	dec	r21
 7c6:	a9 f7       	brne	.-22     	; 0x7b2 <__udivmodhi4_loop>
 7c8:	80 95       	com	r24
 7ca:	90 95       	com	r25
 7cc:	bc 01       	movw	r22, r24
 7ce:	cd 01       	movw	r24, r26
 7d0:	08 95       	ret

000007d2 <_exit>:
 7d2:	f8 94       	cli

000007d4 <__stop_program>:
 7d4:	ff cf       	rjmp	.-2      	; 0x7d4 <__stop_program>
