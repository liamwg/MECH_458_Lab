
Lab3_Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000005c2  00000656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800206  00800206  0000065c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000068c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000120e  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d4b  00000000  00000000  00001942  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b4  00000000  00000000  0000268d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00002c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f2  00000000  00000000  00002d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030a  00000000  00000000  0000331a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003624  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ec       	ldi	r30, 0xC2	; 194
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 30       	cpi	r26, 0x0A	; 10
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	64 d0       	rcall	.+200    	; 0x1e8 <main>
 120:	4e c2       	rjmp	.+1180   	; 0x5be <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <mTimer>:
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 124:	ac 01       	movw	r20, r24
 126:	e1 e8       	ldi	r30, 0x81	; 129
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	90 81       	ld	r25, Z
 12c:	98 60       	ori	r25, 0x08	; 8
 12e:	90 83       	st	Z, r25
 130:	88 ee       	ldi	r24, 0xE8	; 232
 132:	93 e0       	ldi	r25, 0x03	; 3
 134:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 138:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 13c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 140:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 144:	ef e6       	ldi	r30, 0x6F	; 111
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	90 81       	ld	r25, Z
 14a:	92 60       	ori	r25, 0x02	; 2
 14c:	90 83       	st	Z, r25
 14e:	b1 9a       	sbi	0x16, 1	; 22
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	05 c0       	rjmp	.+10     	; 0x160 <mTimer+0x3c>
 156:	b1 9b       	sbis	0x16, 1	; 22
 158:	fe cf       	rjmp	.-4      	; 0x156 <mTimer+0x32>
 15a:	b1 9a       	sbi	0x16, 1	; 22
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
 160:	24 17       	cp	r18, r20
 162:	35 07       	cpc	r19, r21
 164:	1c f4       	brge	.+6      	; 0x16c <mTimer+0x48>
 166:	b1 9b       	sbis	0x16, 1	; 22
 168:	f6 cf       	rjmp	.-20     	; 0x156 <mTimer+0x32>
 16a:	f7 cf       	rjmp	.-18     	; 0x15a <mTimer+0x36>
 16c:	08 95       	ret

0000016e <initLink>:

/**************************************************************************************
* DESC: This initializes a link and returns the pointer to the new link or NULL if error 
* INPUT: the head and tail pointers by reference
*/
void initLink(link **newLink){
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
	//link *l;
	*newLink = (link*)malloc(sizeof(link));
 174:	84 e0       	ldi	r24, 0x04	; 4
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	01 d1       	rcall	.+514    	; 0x37c <malloc>
 17a:	99 83       	std	Y+1, r25	; 0x01
 17c:	88 83       	st	Y, r24
	(*newLink)->next = NULL;
 17e:	fc 01       	movw	r30, r24
 180:	13 82       	std	Z+3, r1	; 0x03
 182:	12 82       	std	Z+2, r1	; 0x02
	return;
}/*initLink*/
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <enqueue>:
*  INPUT: the head and tail pointers, and a pointer to the new link that was created 
*/
/* will put an item at the tail of the queue */
void enqueue(link **h, link **t, link **nL){

	if (*t != NULL){
 18a:	db 01       	movw	r26, r22
 18c:	ed 91       	ld	r30, X+
 18e:	fc 91       	ld	r31, X
 190:	30 97       	sbiw	r30, 0x00	; 0
 192:	61 f0       	breq	.+24     	; 0x1ac <enqueue+0x22>
		/* Not an empty queue */
		(*t)->next = *nL;
 194:	da 01       	movw	r26, r20
 196:	8d 91       	ld	r24, X+
 198:	9c 91       	ld	r25, X
 19a:	11 97       	sbiw	r26, 0x01	; 1
 19c:	93 83       	std	Z+3, r25	; 0x03
 19e:	82 83       	std	Z+2, r24	; 0x02
		*t = *nL; //(*t)->next;
 1a0:	8d 91       	ld	r24, X+
 1a2:	9c 91       	ld	r25, X
 1a4:	fb 01       	movw	r30, r22
 1a6:	91 83       	std	Z+1, r25	; 0x01
 1a8:	80 83       	st	Z, r24
 1aa:	08 95       	ret
	}/*if*/
	else{
		/* It's an empty Queue */
		//(*h)->next = *nL;
		//should be this
		*h = *nL;
 1ac:	da 01       	movw	r26, r20
 1ae:	2d 91       	ld	r18, X+
 1b0:	3c 91       	ld	r19, X
 1b2:	11 97       	sbiw	r26, 0x01	; 1
 1b4:	fc 01       	movw	r30, r24
 1b6:	31 83       	std	Z+1, r19	; 0x01
 1b8:	20 83       	st	Z, r18
		*t = *nL;
 1ba:	8d 91       	ld	r24, X+
 1bc:	9c 91       	ld	r25, X
 1be:	db 01       	movw	r26, r22
 1c0:	8d 93       	st	X+, r24
 1c2:	9c 93       	st	X, r25
 1c4:	08 95       	ret

000001c6 <dequeue>:
* DESC : Removes the link from the head of the list and assigns it to deQueuedLink
* INPUT: The head and tail pointers, and a ptr 'deQueuedLink' 
* 		 which the removed link will be assigned to
*/
/* This will remove the link and element within the link from the head of the queue */
void dequeue(link **h, link **deQueuedLink){
 1c6:	fc 01       	movw	r30, r24
	/* ENTER YOUR CODE HERE */
	*deQueuedLink = *h;	// Will set to NULL if Head points to NULL
 1c8:	80 81       	ld	r24, Z
 1ca:	91 81       	ldd	r25, Z+1	; 0x01
 1cc:	db 01       	movw	r26, r22
 1ce:	8d 93       	st	X+, r24
 1d0:	9c 93       	st	X, r25
	/* Ensure it is not an empty queue */
	if (*h != NULL){
 1d2:	a0 81       	ld	r26, Z
 1d4:	b1 81       	ldd	r27, Z+1	; 0x01
 1d6:	10 97       	sbiw	r26, 0x00	; 0
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <dequeue+0x20>
		*h = (*h)->next;
 1da:	12 96       	adiw	r26, 0x02	; 2
 1dc:	8d 91       	ld	r24, X+
 1de:	9c 91       	ld	r25, X
 1e0:	13 97       	sbiw	r26, 0x03	; 3
 1e2:	91 83       	std	Z+1, r25	; 0x01
 1e4:	80 83       	st	Z, r24
 1e6:	08 95       	ret

000001e8 <main>:
/* Avoid using these */

/* main routine 
   You need to add the mtimer function to this project.    */

int main(){	
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	28 97       	sbiw	r28, 0x08	; 8
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
	link *newLink;		/* A ptr to a link aggregate data type (struct) */
	link *rtnLink;		/* same as the above */
	element eTest;		/* A variable to hold the aggregate data type known as element */

	//TIMER CODE
	CLKPR = 0x80;
 1fc:	e1 e6       	ldi	r30, 0x61	; 97
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 e8       	ldi	r24, 0x80	; 128
 202:	80 83       	st	Z, r24
	CLKPR = 0x01;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 83       	st	Z, r24
	TCCR1B |= _BV(CS11);
 208:	e1 e8       	ldi	r30, 0x81	; 129
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	80 83       	st	Z, r24

	DDRA = 0x00; // sets Port A to input
 212:	11 b8       	out	0x01, r1	; 1
	DDRC = 0xFF; // sets Port C to output
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	87 b9       	out	0x07, r24	; 7

while (1){

	rtnLink = NULL;
 218:	18 86       	std	Y+8, r1	; 0x08
 21a:	1f 82       	std	Y+7, r1	; 0x07
	newLink = NULL;
 21c:	1e 82       	std	Y+6, r1	; 0x06
 21e:	1d 82       	std	Y+5, r1	; 0x05
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 220:	1a 82       	std	Y+2, r1	; 0x02
 222:	19 82       	std	Y+1, r1	; 0x01
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 224:	1c 82       	std	Y+4, r1	; 0x04
 226:	1b 82       	std	Y+3, r1	; 0x03
	rtnLink = NULL;
	newLink = NULL;

	setup(&head, &tail);

	while((PINA & 0x04) == 0x04); //check for switch being pressed
 228:	02 99       	sbic	0x00, 2	; 0
 22a:	fe cf       	rjmp	.-4      	; 0x228 <main+0x40>
	
	mTimer(20); // debounce timer
 22c:	84 e1       	ldi	r24, 0x14	; 20
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	79 df       	rcall	.-270    	; 0x124 <mTimer>
	
	initLink(&newLink);
 232:	ce 01       	movw	r24, r28
 234:	05 96       	adiw	r24, 0x05	; 5
 236:	9b df       	rcall	.-202    	; 0x16e <initLink>
	newLink->e.stage = (PINA & 0x03);
 238:	ed 81       	ldd	r30, Y+5	; 0x05
 23a:	fe 81       	ldd	r31, Y+6	; 0x06
 23c:	80 b1       	in	r24, 0x00	; 0
 23e:	83 70       	andi	r24, 0x03	; 3
 240:	81 83       	std	Z+1, r24	; 0x01
	enqueue(&head, &tail, &newLink);
 242:	ae 01       	movw	r20, r28
 244:	4b 5f       	subi	r20, 0xFB	; 251
 246:	5f 4f       	sbci	r21, 0xFF	; 255
 248:	be 01       	movw	r22, r28
 24a:	6d 5f       	subi	r22, 0xFD	; 253
 24c:	7f 4f       	sbci	r23, 0xFF	; 255
 24e:	ce 01       	movw	r24, r28
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	9b df       	rcall	.-202    	; 0x18a <enqueue>
	while((PINA & 0x04) == 0x00); //check for switch being not pressed
 254:	02 9b       	sbis	0x00, 2	; 0
 256:	fe cf       	rjmp	.-4      	; 0x254 <main+0x6c>

	
	//getting second input
	while((PINA & 0x04) == 0x04); //check for switch being pressed
 258:	02 99       	sbic	0x00, 2	; 0
		
	mTimer(20); // debounce timer
 25a:	fe cf       	rjmp	.-4      	; 0x258 <main+0x70>
 25c:	84 e1       	ldi	r24, 0x14	; 20
 25e:	90 e0       	ldi	r25, 0x00	; 0
		
	initLink(&newLink);
 260:	61 df       	rcall	.-318    	; 0x124 <mTimer>
 262:	ce 01       	movw	r24, r28
 264:	05 96       	adiw	r24, 0x05	; 5
 266:	83 df       	rcall	.-250    	; 0x16e <initLink>
	newLink->e.stage = (PINA & 0x03);
 268:	ed 81       	ldd	r30, Y+5	; 0x05
 26a:	fe 81       	ldd	r31, Y+6	; 0x06
 26c:	80 b1       	in	r24, 0x00	; 0
 26e:	83 70       	andi	r24, 0x03	; 3
 270:	81 83       	std	Z+1, r24	; 0x01
	enqueue(&head, &tail, &newLink);
 272:	ae 01       	movw	r20, r28
 274:	4b 5f       	subi	r20, 0xFB	; 251
 276:	5f 4f       	sbci	r21, 0xFF	; 255
 278:	be 01       	movw	r22, r28
 27a:	6d 5f       	subi	r22, 0xFD	; 253
 27c:	7f 4f       	sbci	r23, 0xFF	; 255
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	83 df       	rcall	.-250    	; 0x18a <enqueue>
	while((PINA & 0x04) == 0x00); //check for switch being not pressed
 284:	02 9b       	sbis	0x00, 2	; 0
	
	//getting third input
	while((PINA & 0x04) == 0x04); //check for switch being pressed
 286:	fe cf       	rjmp	.-4      	; 0x284 <main+0x9c>
	
	mTimer(20); // debounce timer
 288:	02 99       	sbic	0x00, 2	; 0
 28a:	fe cf       	rjmp	.-4      	; 0x288 <main+0xa0>
 28c:	84 e1       	ldi	r24, 0x14	; 20
 28e:	90 e0       	ldi	r25, 0x00	; 0
	
	initLink(&newLink);
 290:	49 df       	rcall	.-366    	; 0x124 <mTimer>
 292:	ce 01       	movw	r24, r28
 294:	05 96       	adiw	r24, 0x05	; 5
 296:	6b df       	rcall	.-298    	; 0x16e <initLink>
	newLink->e.stage = (PINA & 0x03);
 298:	ed 81       	ldd	r30, Y+5	; 0x05
 29a:	fe 81       	ldd	r31, Y+6	; 0x06
 29c:	80 b1       	in	r24, 0x00	; 0
 29e:	83 70       	andi	r24, 0x03	; 3
 2a0:	81 83       	std	Z+1, r24	; 0x01
	enqueue(&head, &tail, &newLink);
 2a2:	ae 01       	movw	r20, r28
 2a4:	4b 5f       	subi	r20, 0xFB	; 251
 2a6:	5f 4f       	sbci	r21, 0xFF	; 255
 2a8:	be 01       	movw	r22, r28
 2aa:	6d 5f       	subi	r22, 0xFD	; 253
 2ac:	7f 4f       	sbci	r23, 0xFF	; 255
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 96       	adiw	r24, 0x01	; 1
	while((PINA & 0x04) == 0x00); //check for switch being not pressed
 2b2:	6b df       	rcall	.-298    	; 0x18a <enqueue>
	
	//getting fourth input
	while((PINA & 0x04) == 0x04); //check for switch being pressed
 2b4:	02 9b       	sbis	0x00, 2	; 0
 2b6:	fe cf       	rjmp	.-4      	; 0x2b4 <main+0xcc>
	
	mTimer(20); // debounce timer
 2b8:	02 99       	sbic	0x00, 2	; 0
 2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <main+0xd0>
 2bc:	84 e1       	ldi	r24, 0x14	; 20
 2be:	90 e0       	ldi	r25, 0x00	; 0
	
	initLink(&newLink);
 2c0:	31 df       	rcall	.-414    	; 0x124 <mTimer>
 2c2:	ce 01       	movw	r24, r28
 2c4:	05 96       	adiw	r24, 0x05	; 5
 2c6:	53 df       	rcall	.-346    	; 0x16e <initLink>
	newLink->e.stage = (PINA & 0x03);
 2c8:	ed 81       	ldd	r30, Y+5	; 0x05
 2ca:	fe 81       	ldd	r31, Y+6	; 0x06
 2cc:	80 b1       	in	r24, 0x00	; 0
 2ce:	83 70       	andi	r24, 0x03	; 3
	enqueue(&head, &tail, &newLink);
 2d0:	81 83       	std	Z+1, r24	; 0x01
 2d2:	ae 01       	movw	r20, r28
 2d4:	4b 5f       	subi	r20, 0xFB	; 251
 2d6:	5f 4f       	sbci	r21, 0xFF	; 255
 2d8:	be 01       	movw	r22, r28
 2da:	6d 5f       	subi	r22, 0xFD	; 253
 2dc:	7f 4f       	sbci	r23, 0xFF	; 255
 2de:	ce 01       	movw	r24, r28
	while((PINA & 0x04) == 0x00); //check for switch being not pressed
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	53 df       	rcall	.-346    	; 0x18a <enqueue>
	//done collecting values
	
	//dequeue first link
	dequeue(&head, &rtnLink); /* remove the item at the head of the list */
 2e4:	02 9b       	sbis	0x00, 2	; 0
 2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <main+0xfc>
 2e8:	be 01       	movw	r22, r28
 2ea:	69 5f       	subi	r22, 0xF9	; 249
 2ec:	7f 4f       	sbci	r23, 0xFF	; 255
 2ee:	ce 01       	movw	r24, r28
	free(rtnLink);
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	69 df       	rcall	.-302    	; 0x1c6 <dequeue>
 2f4:	8f 81       	ldd	r24, Y+7	; 0x07
 2f6:	98 85       	ldd	r25, Y+8	; 0x08
	
	dequeue(&head, &rtnLink); /* remove the item at the head of the list */
 2f8:	d9 d0       	rcall	.+434    	; 0x4ac <free>
 2fa:	be 01       	movw	r22, r28
 2fc:	69 5f       	subi	r22, 0xF9	; 249
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	ce 01       	movw	r24, r28
	PORTC |= rtnLink->e.stage;
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	60 df       	rcall	.-320    	; 0x1c6 <dequeue>
 306:	98 b1       	in	r25, 0x08	; 8
 308:	ef 81       	ldd	r30, Y+7	; 0x07
 30a:	f8 85       	ldd	r31, Y+8	; 0x08
	free(rtnLink);
 30c:	81 81       	ldd	r24, Z+1	; 0x01
 30e:	89 2b       	or	r24, r25
 310:	88 b9       	out	0x08, r24	; 8
 312:	8f 81       	ldd	r24, Y+7	; 0x07
	mTimer(1000);
 314:	98 85       	ldd	r25, Y+8	; 0x08
 316:	ca d0       	rcall	.+404    	; 0x4ac <free>
 318:	88 ee       	ldi	r24, 0xE8	; 232
		
	dequeue(&head, &rtnLink); /* remove the item at the head of the list */
 31a:	93 e0       	ldi	r25, 0x03	; 3
 31c:	03 df       	rcall	.-506    	; 0x124 <mTimer>
 31e:	be 01       	movw	r22, r28
 320:	69 5f       	subi	r22, 0xF9	; 249
 322:	7f 4f       	sbci	r23, 0xFF	; 255
 324:	ce 01       	movw	r24, r28
	PORTC |= (rtnLink->e.stage) <<2 ;
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	4e df       	rcall	.-356    	; 0x1c6 <dequeue>
 32a:	98 b1       	in	r25, 0x08	; 8
 32c:	ef 81       	ldd	r30, Y+7	; 0x07
 32e:	f8 85       	ldd	r31, Y+8	; 0x08
 330:	81 81       	ldd	r24, Z+1	; 0x01
 332:	88 0f       	add	r24, r24
	free(rtnLink);
 334:	88 0f       	add	r24, r24
 336:	89 2b       	or	r24, r25
 338:	88 b9       	out	0x08, r24	; 8
 33a:	8f 81       	ldd	r24, Y+7	; 0x07
	mTimer(1000);
 33c:	98 85       	ldd	r25, Y+8	; 0x08
 33e:	b6 d0       	rcall	.+364    	; 0x4ac <free>
 340:	88 ee       	ldi	r24, 0xE8	; 232
			
	dequeue(&head, &rtnLink); /* remove the item at the head of the list */
 342:	93 e0       	ldi	r25, 0x03	; 3
 344:	ef de       	rcall	.-546    	; 0x124 <mTimer>
 346:	be 01       	movw	r22, r28
 348:	69 5f       	subi	r22, 0xF9	; 249
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
	PORTC |= (rtnLink->e.stage) << 4;
 34c:	ce 01       	movw	r24, r28
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	3a df       	rcall	.-396    	; 0x1c6 <dequeue>
 352:	28 b1       	in	r18, 0x08	; 8
 354:	ef 81       	ldd	r30, Y+7	; 0x07
 356:	f8 85       	ldd	r31, Y+8	; 0x08
 358:	91 81       	ldd	r25, Z+1	; 0x01
 35a:	30 e1       	ldi	r19, 0x10	; 16
 35c:	93 9f       	mul	r25, r19
 35e:	c0 01       	movw	r24, r0
	free(rtnLink);
 360:	11 24       	eor	r1, r1
 362:	82 2b       	or	r24, r18
 364:	88 b9       	out	0x08, r24	; 8
 366:	8f 81       	ldd	r24, Y+7	; 0x07
	mTimer(1000);
 368:	98 85       	ldd	r25, Y+8	; 0x08
 36a:	a0 d0       	rcall	.+320    	; 0x4ac <free>
 36c:	88 ee       	ldi	r24, 0xE8	; 232
 36e:	93 e0       	ldi	r25, 0x03	; 3
	
	mTimer(5000);
 370:	d9 de       	rcall	.-590    	; 0x124 <mTimer>
 372:	88 e8       	ldi	r24, 0x88	; 136
 374:	93 e1       	ldi	r25, 0x13	; 19
 376:	d6 de       	rcall	.-596    	; 0x124 <mTimer>
	PORTC = 0x00;	
 378:	18 b8       	out	0x08, r1	; 8

}
 37a:	4e cf       	rjmp	.-356    	; 0x218 <main+0x30>

0000037c <malloc>:
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	91 05       	cpc	r25, r1
 388:	10 f4       	brcc	.+4      	; 0x38e <malloc+0x12>
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__flp>
 392:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__flp+0x1>
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	a0 e0       	ldi	r26, 0x00	; 0
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	30 97       	sbiw	r30, 0x00	; 0
 3a0:	19 f1       	breq	.+70     	; 0x3e8 <malloc+0x6c>
 3a2:	40 81       	ld	r20, Z
 3a4:	51 81       	ldd	r21, Z+1	; 0x01
 3a6:	02 81       	ldd	r16, Z+2	; 0x02
 3a8:	13 81       	ldd	r17, Z+3	; 0x03
 3aa:	48 17       	cp	r20, r24
 3ac:	59 07       	cpc	r21, r25
 3ae:	c8 f0       	brcs	.+50     	; 0x3e2 <malloc+0x66>
 3b0:	84 17       	cp	r24, r20
 3b2:	95 07       	cpc	r25, r21
 3b4:	69 f4       	brne	.+26     	; 0x3d0 <malloc+0x54>
 3b6:	10 97       	sbiw	r26, 0x00	; 0
 3b8:	31 f0       	breq	.+12     	; 0x3c6 <malloc+0x4a>
 3ba:	12 96       	adiw	r26, 0x02	; 2
 3bc:	0c 93       	st	X, r16
 3be:	12 97       	sbiw	r26, 0x02	; 2
 3c0:	13 96       	adiw	r26, 0x03	; 3
 3c2:	1c 93       	st	X, r17
 3c4:	27 c0       	rjmp	.+78     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3c6:	00 93 08 02 	sts	0x0208, r16	; 0x800208 <__flp>
 3ca:	10 93 09 02 	sts	0x0209, r17	; 0x800209 <__flp+0x1>
 3ce:	22 c0       	rjmp	.+68     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3d0:	21 15       	cp	r18, r1
 3d2:	31 05       	cpc	r19, r1
 3d4:	19 f0       	breq	.+6      	; 0x3dc <malloc+0x60>
 3d6:	42 17       	cp	r20, r18
 3d8:	53 07       	cpc	r21, r19
 3da:	18 f4       	brcc	.+6      	; 0x3e2 <malloc+0x66>
 3dc:	9a 01       	movw	r18, r20
 3de:	bd 01       	movw	r22, r26
 3e0:	ef 01       	movw	r28, r30
 3e2:	df 01       	movw	r26, r30
 3e4:	f8 01       	movw	r30, r16
 3e6:	db cf       	rjmp	.-74     	; 0x39e <malloc+0x22>
 3e8:	21 15       	cp	r18, r1
 3ea:	31 05       	cpc	r19, r1
 3ec:	f9 f0       	breq	.+62     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3ee:	28 1b       	sub	r18, r24
 3f0:	39 0b       	sbc	r19, r25
 3f2:	24 30       	cpi	r18, 0x04	; 4
 3f4:	31 05       	cpc	r19, r1
 3f6:	80 f4       	brcc	.+32     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3f8:	8a 81       	ldd	r24, Y+2	; 0x02
 3fa:	9b 81       	ldd	r25, Y+3	; 0x03
 3fc:	61 15       	cp	r22, r1
 3fe:	71 05       	cpc	r23, r1
 400:	21 f0       	breq	.+8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 402:	fb 01       	movw	r30, r22
 404:	93 83       	std	Z+3, r25	; 0x03
 406:	82 83       	std	Z+2, r24	; 0x02
 408:	04 c0       	rjmp	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40a:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__flp+0x1>
 40e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__flp>
 412:	fe 01       	movw	r30, r28
 414:	32 96       	adiw	r30, 0x02	; 2
 416:	44 c0       	rjmp	.+136    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 418:	fe 01       	movw	r30, r28
 41a:	e2 0f       	add	r30, r18
 41c:	f3 1f       	adc	r31, r19
 41e:	81 93       	st	Z+, r24
 420:	91 93       	st	Z+, r25
 422:	22 50       	subi	r18, 0x02	; 2
 424:	31 09       	sbc	r19, r1
 426:	39 83       	std	Y+1, r19	; 0x01
 428:	28 83       	st	Y, r18
 42a:	3a c0       	rjmp	.+116    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 42c:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 430:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 434:	23 2b       	or	r18, r19
 436:	41 f4       	brne	.+16     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 438:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 43c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 440:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <__data_end+0x1>
 444:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <__data_end>
 448:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 44c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 450:	21 15       	cp	r18, r1
 452:	31 05       	cpc	r19, r1
 454:	41 f4       	brne	.+16     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 456:	2d b7       	in	r18, 0x3d	; 61
 458:	3e b7       	in	r19, 0x3e	; 62
 45a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 45e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 462:	24 1b       	sub	r18, r20
 464:	35 0b       	sbc	r19, r21
 466:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
 46a:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
 46e:	e2 17       	cp	r30, r18
 470:	f3 07       	cpc	r31, r19
 472:	a0 f4       	brcc	.+40     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 474:	2e 1b       	sub	r18, r30
 476:	3f 0b       	sbc	r19, r31
 478:	28 17       	cp	r18, r24
 47a:	39 07       	cpc	r19, r25
 47c:	78 f0       	brcs	.+30     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 47e:	ac 01       	movw	r20, r24
 480:	4e 5f       	subi	r20, 0xFE	; 254
 482:	5f 4f       	sbci	r21, 0xFF	; 255
 484:	24 17       	cp	r18, r20
 486:	35 07       	cpc	r19, r21
 488:	48 f0       	brcs	.+18     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 48a:	4e 0f       	add	r20, r30
 48c:	5f 1f       	adc	r21, r31
 48e:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <__data_end+0x1>
 492:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <__data_end>
 496:	81 93       	st	Z+, r24
 498:	91 93       	st	Z+, r25
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 49c:	e0 e0       	ldi	r30, 0x00	; 0
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	cf 01       	movw	r24, r30
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	08 95       	ret

000004ac <free>:
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	00 97       	sbiw	r24, 0x00	; 0
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <free+0xa>
 4b4:	81 c0       	rjmp	.+258    	; 0x5b8 <free+0x10c>
 4b6:	fc 01       	movw	r30, r24
 4b8:	32 97       	sbiw	r30, 0x02	; 2
 4ba:	13 82       	std	Z+3, r1	; 0x03
 4bc:	12 82       	std	Z+2, r1	; 0x02
 4be:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__flp>
 4c2:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__flp+0x1>
 4c6:	10 97       	sbiw	r26, 0x00	; 0
 4c8:	81 f4       	brne	.+32     	; 0x4ea <free+0x3e>
 4ca:	20 81       	ld	r18, Z
 4cc:	31 81       	ldd	r19, Z+1	; 0x01
 4ce:	82 0f       	add	r24, r18
 4d0:	93 1f       	adc	r25, r19
 4d2:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 4d6:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 4da:	28 17       	cp	r18, r24
 4dc:	39 07       	cpc	r19, r25
 4de:	51 f5       	brne	.+84     	; 0x534 <free+0x88>
 4e0:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__data_end+0x1>
 4e4:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__data_end>
 4e8:	67 c0       	rjmp	.+206    	; 0x5b8 <free+0x10c>
 4ea:	ed 01       	movw	r28, r26
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	ce 17       	cp	r28, r30
 4f2:	df 07       	cpc	r29, r31
 4f4:	40 f4       	brcc	.+16     	; 0x506 <free+0x5a>
 4f6:	4a 81       	ldd	r20, Y+2	; 0x02
 4f8:	5b 81       	ldd	r21, Y+3	; 0x03
 4fa:	9e 01       	movw	r18, r28
 4fc:	41 15       	cp	r20, r1
 4fe:	51 05       	cpc	r21, r1
 500:	f1 f0       	breq	.+60     	; 0x53e <free+0x92>
 502:	ea 01       	movw	r28, r20
 504:	f5 cf       	rjmp	.-22     	; 0x4f0 <free+0x44>
 506:	d3 83       	std	Z+3, r29	; 0x03
 508:	c2 83       	std	Z+2, r28	; 0x02
 50a:	40 81       	ld	r20, Z
 50c:	51 81       	ldd	r21, Z+1	; 0x01
 50e:	84 0f       	add	r24, r20
 510:	95 1f       	adc	r25, r21
 512:	c8 17       	cp	r28, r24
 514:	d9 07       	cpc	r29, r25
 516:	59 f4       	brne	.+22     	; 0x52e <free+0x82>
 518:	88 81       	ld	r24, Y
 51a:	99 81       	ldd	r25, Y+1	; 0x01
 51c:	84 0f       	add	r24, r20
 51e:	95 1f       	adc	r25, r21
 520:	02 96       	adiw	r24, 0x02	; 2
 522:	91 83       	std	Z+1, r25	; 0x01
 524:	80 83       	st	Z, r24
 526:	8a 81       	ldd	r24, Y+2	; 0x02
 528:	9b 81       	ldd	r25, Y+3	; 0x03
 52a:	93 83       	std	Z+3, r25	; 0x03
 52c:	82 83       	std	Z+2, r24	; 0x02
 52e:	21 15       	cp	r18, r1
 530:	31 05       	cpc	r19, r1
 532:	29 f4       	brne	.+10     	; 0x53e <free+0x92>
 534:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__flp+0x1>
 538:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__flp>
 53c:	3d c0       	rjmp	.+122    	; 0x5b8 <free+0x10c>
 53e:	e9 01       	movw	r28, r18
 540:	fb 83       	std	Y+3, r31	; 0x03
 542:	ea 83       	std	Y+2, r30	; 0x02
 544:	49 91       	ld	r20, Y+
 546:	59 91       	ld	r21, Y+
 548:	c4 0f       	add	r28, r20
 54a:	d5 1f       	adc	r29, r21
 54c:	ec 17       	cp	r30, r28
 54e:	fd 07       	cpc	r31, r29
 550:	61 f4       	brne	.+24     	; 0x56a <free+0xbe>
 552:	80 81       	ld	r24, Z
 554:	91 81       	ldd	r25, Z+1	; 0x01
 556:	84 0f       	add	r24, r20
 558:	95 1f       	adc	r25, r21
 55a:	02 96       	adiw	r24, 0x02	; 2
 55c:	e9 01       	movw	r28, r18
 55e:	99 83       	std	Y+1, r25	; 0x01
 560:	88 83       	st	Y, r24
 562:	82 81       	ldd	r24, Z+2	; 0x02
 564:	93 81       	ldd	r25, Z+3	; 0x03
 566:	9b 83       	std	Y+3, r25	; 0x03
 568:	8a 83       	std	Y+2, r24	; 0x02
 56a:	e0 e0       	ldi	r30, 0x00	; 0
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	12 96       	adiw	r26, 0x02	; 2
 570:	8d 91       	ld	r24, X+
 572:	9c 91       	ld	r25, X
 574:	13 97       	sbiw	r26, 0x03	; 3
 576:	00 97       	sbiw	r24, 0x00	; 0
 578:	19 f0       	breq	.+6      	; 0x580 <free+0xd4>
 57a:	fd 01       	movw	r30, r26
 57c:	dc 01       	movw	r26, r24
 57e:	f7 cf       	rjmp	.-18     	; 0x56e <free+0xc2>
 580:	8d 91       	ld	r24, X+
 582:	9c 91       	ld	r25, X
 584:	11 97       	sbiw	r26, 0x01	; 1
 586:	9d 01       	movw	r18, r26
 588:	2e 5f       	subi	r18, 0xFE	; 254
 58a:	3f 4f       	sbci	r19, 0xFF	; 255
 58c:	82 0f       	add	r24, r18
 58e:	93 1f       	adc	r25, r19
 590:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 594:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 598:	28 17       	cp	r18, r24
 59a:	39 07       	cpc	r19, r25
 59c:	69 f4       	brne	.+26     	; 0x5b8 <free+0x10c>
 59e:	30 97       	sbiw	r30, 0x00	; 0
 5a0:	29 f4       	brne	.+10     	; 0x5ac <free+0x100>
 5a2:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__flp+0x1>
 5a6:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__flp>
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <free+0x104>
 5ac:	13 82       	std	Z+3, r1	; 0x03
 5ae:	12 82       	std	Z+2, r1	; 0x02
 5b0:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <__data_end+0x1>
 5b4:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <__data_end>
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	08 95       	ret

000005be <_exit>:
 5be:	f8 94       	cli

000005c0 <__stop_program>:
 5c0:	ff cf       	rjmp	.-2      	; 0x5c0 <__stop_program>
