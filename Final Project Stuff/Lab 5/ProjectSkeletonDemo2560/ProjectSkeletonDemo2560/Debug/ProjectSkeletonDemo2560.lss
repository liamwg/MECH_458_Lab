
ProjectSkeletonDemo2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  0000057e  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080020a  0080020a  0000061c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015a6  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4f  00000000  00000000  00001cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082f  00000000  00000000  00002b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00003338  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006bf  00000000  00000000  000034e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a50  00000000  00000000  00003ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000045f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	f5 c1       	rjmp	.+1002   	; 0x3f8 <__vector_3>
   e:	00 00       	nop
  10:	40 c2       	rjmp	.+1152   	; 0x492 <__vector_4>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e7       	ldi	r30, 0x7E	; 126
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e0       	ldi	r26, 0x0A	; 10
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 30       	cpi	r26, 0x0D	; 13
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ff d0       	rcall	.+510    	; 0x31e <main>
 120:	2c c2       	rjmp	.+1112   	; 0x57a <_exit>

00000122 <__bad_interrupt>:
 122:	40 c1       	rjmp	.+640    	; 0x3a4 <__vector_default>

00000124 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 12a:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
 12c:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <LCDBusyLoop+0xc>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCDBusyLoop+0x12>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 136:	47 9a       	sbi	0x08, 7	; 8
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	9a 95       	dec	r25
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x16>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1c>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 140:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 142:	82 95       	swap	r24
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	92 e0       	ldi	r25, 0x02	; 2
 148:	9a 95       	dec	r25
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x24>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCDBusyLoop+0x2a>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 14e:	47 98       	cbi	0x08, 7	; 8
 150:	95 e0       	ldi	r25, 0x05	; 5
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <LCDBusyLoop+0x2e>
 156:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 158:	47 9a       	sbi	0x08, 7	; 8
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDBusyLoop+0x38>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCDBusyLoop+0x3e>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 162:	96 b1       	in	r25, 0x06	; 6
 164:	92 e0       	ldi	r25, 0x02	; 2
 166:	9a 95       	dec	r25
 168:	f1 f7       	brne	.-4      	; 0x166 <LCDBusyLoop+0x42>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCDBusyLoop+0x48>

		busy=status & 0b10000000;

		_delay_us(0.5);
		
		CLEAR_E();
 16c:	47 98       	cbi	0x08, 7	; 8
 16e:	95 e0       	ldi	r25, 0x05	; 5
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDBusyLoop+0x4c>
 174:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 176:	88 23       	and	r24, r24
 178:	f4 f2       	brlt	.-68     	; 0x136 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 17a:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 17c:	87 b1       	in	r24, 0x07	; 7
 17e:	8f 60       	ori	r24, 0x0F	; 15
 180:	87 b9       	out	0x07, r24	; 7
 182:	08 95       	ret

00000184 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 184:	28 2f       	mov	r18, r24
 186:	22 95       	swap	r18
 188:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 18a:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 18c:	61 11       	cpse	r22, r1
 18e:	02 c0       	rjmp	.+4      	; 0x194 <LCDByte+0x10>
	CLEAR_RS();
 190:	46 98       	cbi	0x08, 6	; 8
 192:	01 c0       	rjmp	.+2      	; 0x196 <LCDByte+0x12>
else
	SET_RS();
 194:	46 9a       	sbi	0x08, 6	; 8
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	9a 95       	dec	r25
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCDByte+0x14>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCDByte+0x1a>

_delay_us(0.500);		//tAS


SET_E();
 19e:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 1a0:	98 b1       	in	r25, 0x08	; 8
 1a2:	90 7f       	andi	r25, 0xF0	; 240
 1a4:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 1a6:	98 b9       	out	0x08, r25	; 8
 1a8:	95 e0       	ldi	r25, 0x05	; 5
 1aa:	9a 95       	dec	r25
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCDByte+0x26>
 1ae:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 1b0:	47 98       	cbi	0x08, 7	; 8
 1b2:	95 e0       	ldi	r25, 0x05	; 5
 1b4:	9a 95       	dec	r25
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCDByte+0x30>
 1b8:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 1ba:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1bc:	98 b1       	in	r25, 0x08	; 8
 1be:	90 7f       	andi	r25, 0xF0	; 240
 1c0:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 1c2:	88 b9       	out	0x08, r24	; 8
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCDByte+0x42>
 1ca:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 1cc:	47 98       	cbi	0x08, 7	; 8
 1ce:	95 e0       	ldi	r25, 0x05	; 5
 1d0:	9a 95       	dec	r25
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCDByte+0x4c>
 1d4:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 1d6:	a6 cf       	rjmp	.-180    	; 0x124 <LCDBusyLoop>
 1d8:	08 95       	ret

000001da <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 1da:	cf 93       	push	r28
 1dc:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	86 e7       	ldi	r24, 0x76	; 118
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <InitLCD+0xa>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <InitLCD+0x14>
 1ee:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1f0:	87 b1       	in	r24, 0x07	; 7
 1f2:	8f 60       	ori	r24, 0x0F	; 15
 1f4:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 1f6:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1f8:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1fa:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 1fc:	88 b1       	in	r24, 0x08	; 8
 1fe:	80 7f       	andi	r24, 0xF0	; 240
 200:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 202:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 204:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 206:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	00 c0       	rjmp	.+0      	; 0x20a <InitLCD+0x30>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <InitLCD+0x32>
 20c:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 20e:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 210:	41 9a       	sbi	0x08, 1	; 8
 212:	25 e0       	ldi	r18, 0x05	; 5
 214:	2a 95       	dec	r18
 216:	f1 f7       	brne	.-4      	; 0x214 <InitLCD+0x3a>
 218:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 21a:	47 98       	cbi	0x08, 7	; 8
 21c:	85 e0       	ldi	r24, 0x05	; 5
 21e:	8a 95       	dec	r24
 220:	f1 f7       	brne	.-4      	; 0x21e <InitLCD+0x44>
 222:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 224:	7f df       	rcall	.-258    	; 0x124 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	8c 2f       	mov	r24, r28
 22a:	8c 60       	ori	r24, 0x0C	; 12
 22c:	ab df       	rcall	.-170    	; 0x184 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	88 e2       	ldi	r24, 0x28	; 40
 232:	a8 df       	rcall	.-176    	; 0x184 <LCDByte>
}
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 23e:	88 81       	ld	r24, Y
 240:	88 23       	and	r24, r24
 242:	31 f0       	breq	.+12     	; 0x250 <LCDWriteString+0x18>
 244:	21 96       	adiw	r28, 0x01	; 1
 {
	LCDData(*msg);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	9d df       	rcall	.-198    	; 0x184 <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 24a:	89 91       	ld	r24, Y+
 24c:	81 11       	cpse	r24, r1
 24e:	fb cf       	rjmp	.-10     	; 0x246 <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	00 d0       	rcall	.+0      	; 0x264 <LCDWriteInt+0xe>
 264:	1f 92       	push	r1
 266:	1f 92       	push	r1
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 26e:	fe 01       	movw	r30, r28
 270:	31 96       	adiw	r30, 0x01	; 1
 272:	25 e0       	ldi	r18, 0x05	; 5
 274:	df 01       	movw	r26, r30
 276:	1d 92       	st	X+, r1
 278:	2a 95       	dec	r18
 27a:	e9 f7       	brne	.-6      	; 0x276 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
 27c:	00 97       	sbiw	r24, 0x00	; 0
 27e:	51 f0       	breq	.+20     	; 0x294 <LCDWriteInt+0x3e>
 280:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
 282:	2a e0       	ldi	r18, 0x0A	; 10
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	b9 01       	movw	r22, r18
 288:	51 d1       	rcall	.+674    	; 0x52c <__divmodhi4>
 28a:	82 93       	st	-Z, r24
	val=val/10;
 28c:	86 2f       	mov	r24, r22
 28e:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 290:	00 97       	sbiw	r24, 0x00	; 0
 292:	c9 f7       	brne	.-14     	; 0x286 <LCDWriteInt+0x30>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 294:	bf ef       	ldi	r27, 0xFF	; 255
 296:	eb 16       	cp	r14, r27
 298:	fb 06       	cpc	r15, r27
 29a:	69 f4       	brne	.+26     	; 0x2b6 <LCDWriteInt+0x60>
		while(str[j]==0) j++;
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	81 11       	cpse	r24, r1
 2a0:	1d c0       	rjmp	.+58     	; 0x2dc <LCDWriteInt+0x86>
 2a2:	fe 01       	movw	r30, r28
 2a4:	32 96       	adiw	r30, 0x02	; 2
 2a6:	00 e0       	ldi	r16, 0x00	; 0
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	0f 5f       	subi	r16, 0xFF	; 255
 2ac:	1f 4f       	sbci	r17, 0xFF	; 255
 2ae:	81 91       	ld	r24, Z+
 2b0:	88 23       	and	r24, r24
 2b2:	d9 f3       	breq	.-10     	; 0x2aa <LCDWriteInt+0x54>
 2b4:	0f c0       	rjmp	.+30     	; 0x2d4 <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 2b6:	05 e0       	ldi	r16, 0x05	; 5
 2b8:	10 e0       	ldi	r17, 0x00	; 0
 2ba:	0e 19       	sub	r16, r14
 2bc:	1f 09       	sbc	r17, r15
 2be:	0a c0       	rjmp	.+20     	; 0x2d4 <LCDWriteInt+0x7e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2c0:	f8 01       	movw	r30, r16
 2c2:	81 91       	ld	r24, Z+
 2c4:	8f 01       	movw	r16, r30
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	80 5d       	subi	r24, 0xD0	; 208
 2ca:	5c df       	rcall	.-328    	; 0x184 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2cc:	0e 15       	cp	r16, r14
 2ce:	1f 05       	cpc	r17, r15
 2d0:	b9 f7       	brne	.-18     	; 0x2c0 <LCDWriteInt+0x6a>
 2d2:	11 c0       	rjmp	.+34     	; 0x2f6 <LCDWriteInt+0xa0>
 2d4:	05 30       	cpi	r16, 0x05	; 5
 2d6:	11 05       	cpc	r17, r1
 2d8:	1c f0       	brlt	.+6      	; 0x2e0 <LCDWriteInt+0x8a>
 2da:	0d c0       	rjmp	.+26     	; 0x2f6 <LCDWriteInt+0xa0>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 2dc:	00 e0       	ldi	r16, 0x00	; 0
 2de:	10 e0       	ldi	r17, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	8c 0f       	add	r24, r28
 2e6:	9d 1f       	adc	r25, r29
 2e8:	08 0f       	add	r16, r24
 2ea:	19 1f       	adc	r17, r25
 2ec:	7e 01       	movw	r14, r28
 2ee:	96 e0       	ldi	r25, 0x06	; 6
 2f0:	e9 0e       	add	r14, r25
 2f2:	f1 1c       	adc	r15, r1
 2f4:	e5 cf       	rjmp	.-54     	; 0x2c0 <LCDWriteInt+0x6a>
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	08 95       	ret

0000030e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 30e:	88 32       	cpi	r24, 0x28	; 40
 310:	28 f4       	brcc	.+10     	; 0x31c <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 312:	61 11       	cpse	r22, r1
 314:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	34 cf       	rjmp	.-408    	; 0x184 <LCDByte>
 31c:	08 95       	ret

0000031e <main>:


int main(int argc, char *argv[]){

	//Timer Code
	CLKPR = 0x80;
 31e:	e1 e6       	ldi	r30, 0x61	; 97
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 e8       	ldi	r24, 0x80	; 128
 324:	80 83       	st	Z, r24
	CLKPR = 0x01;		//  sets system clock to 8MHz
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	80 83       	st	Z, r24
	TCCR1B |= _BV(CS11);
 32a:	e1 e8       	ldi	r30, 0x81	; 129
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	82 60       	ori	r24, 0x02	; 2
 332:	80 83       	st	Z, r24
	
	//Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
 334:	83 e0       	ldi	r24, 0x03	; 3
 336:	51 df       	rcall	.-350    	; 0x1da <InitLCD>

	STATE = 0;
 338:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <STATE>

	cli();		// Disables all interrupts
 33c:	f8 94       	cli
	
	//Setting inputs and outputs
	DDRD = 0b11110000;	// Going to set up INT2 & INT3 on PORTD
 33e:	80 ef       	ldi	r24, 0xF0	; 240
 340:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xFF;		// just use as a display
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	87 b9       	out	0x07, r24	; 7

	// Set up the Interrupt 0,3 options
	//External Interrupt Control Register A - EICRA (pg 110 and under the EXT_INT tab to the right
	// Set Interrupt sense control to catch a rising edge
	
	EIMSK |= _BV(INT2); //enable INT2
 346:	ea 9a       	sbi	0x1d, 2	; 29
	EICRA |= _BV(ISC21) | _BV(ISC20); //rising edge interrupt
 348:	e9 e6       	ldi	r30, 0x69	; 105
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	80 63       	ori	r24, 0x30	; 48
 350:	80 83       	st	Z, r24
	
	EIMSK |= _BV(INT3); //enable INT3
 352:	eb 9a       	sbi	0x1d, 3	; 29
	EICRA |= _BV(ISC31); //falling edge interrupt
 354:	80 81       	ld	r24, Z
 356:	80 68       	ori	r24, 0x80	; 128
 358:	80 83       	st	Z, r24

	// See page 112 - EIFR External Interrupt Flags...notice how they reset on their own in 'C'...not in assembly
	//EIMSK |= 0x0C;

	// Enable all interrupts
	sei();	// Note this sets the Global Enable for all interrupts
 35a:	78 94       	sei
	STATE = 0;
	goto POLLING_STAGE;
	
	BUCKET_STAGE:
	// Do whatever is necessary HERE
	PORTC = 0x08;
 35c:	38 e0       	ldi	r19, 0x08	; 8
	}//switch STATE
	

	MAGNETIC_STAGE:
	// Do whatever is necessary HERE
	PORTC = 0x01; // Just output pretty lights know you made it here
 35e:	21 e0       	ldi	r18, 0x01	; 1
	STATE = 0;
	goto POLLING_STAGE;

	REFLECTIVE_STAGE:
	// Do whatever is necessary HERE
	PORTC = 0x04; // Just output pretty lights know you made it here
 360:	94 e0       	ldi	r25, 0x04	; 4
	
	goto POLLING_STAGE;

	// POLLING STATE
	POLLING_STAGE:
	PORTC |= 0xF0;	// Indicates this state is active
 362:	88 b1       	in	r24, 0x08	; 8
 364:	80 6f       	ori	r24, 0xF0	; 240
 366:	88 b9       	out	0x08, r24	; 8
	
	switch(STATE){
 368:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <STATE>
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	69 f0       	breq	.+26     	; 0x38a <main+0x6c>
 370:	18 f4       	brcc	.+6      	; 0x378 <main+0x5a>
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	31 f0       	breq	.+12     	; 0x382 <main+0x64>
 376:	f5 cf       	rjmp	.-22     	; 0x362 <main+0x44>
 378:	83 30       	cpi	r24, 0x03	; 3
 37a:	59 f0       	breq	.+22     	; 0x392 <main+0x74>
 37c:	85 30       	cpi	r24, 0x05	; 5
 37e:	69 f0       	breq	.+26     	; 0x39a <main+0x7c>
 380:	f0 cf       	rjmp	.-32     	; 0x362 <main+0x44>
	}//switch STATE
	

	MAGNETIC_STAGE:
	// Do whatever is necessary HERE
	PORTC = 0x01; // Just output pretty lights know you made it here
 382:	28 b9       	out	0x08, r18	; 8
	//Reset the state variable
	STATE = 0;
 384:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <STATE>
	goto POLLING_STAGE;
 388:	ec cf       	rjmp	.-40     	; 0x362 <main+0x44>

	REFLECTIVE_STAGE:
	// Do whatever is necessary HERE
	PORTC = 0x04; // Just output pretty lights know you made it here
 38a:	98 b9       	out	0x08, r25	; 8
	//Reset the state variable
	STATE = 0;
 38c:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <STATE>
	goto POLLING_STAGE;
 390:	e8 cf       	rjmp	.-48     	; 0x362 <main+0x44>
	
	BUCKET_STAGE:
	// Do whatever is necessary HERE
	PORTC = 0x08;
 392:	38 b9       	out	0x08, r19	; 8
	//Reset the state variable
	STATE = 0;
 394:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <STATE>
	goto POLLING_STAGE;
 398:	e4 cf       	rjmp	.-56     	; 0x362 <main+0x44>
	
	END:
	// The closing STATE ... how would you get here?
	PORTC = 0xF0;	// Indicates this state is active
 39a:	80 ef       	ldi	r24, 0xF0	; 240
 39c:	88 b9       	out	0x08, r24	; 8
	// Stop everything here...'MAKE SAFE'
	return(0);

}
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	08 95       	ret

000003a4 <__vector_default>:
// which usually indicates a bug), then the default action is to reset the device by jumping
// to the reset vector. You can override this by supplying a function named BADISR_vect which
// should be defined with ISR() as such. (The name BADISR_vect is actually an alias for __vector_default.
// The latter must be used inside assembly code in case <avr/interrupt.h> is not included.
ISR(BADISR_vect)
{
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
	// user code here
}
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <mTimer>:

void mTimer(int count){
 3b8:	ac 01       	movw	r20, r24
	
	i = 0; //initializes loop counter
	
	//Set the Waveform Generation Mode bit description to Clear Timer on Compare Math mode (CTC) only
	
	TCCR1B |=_BV(WGM12);		//Set WGM bits to 0100, page 145
 3ba:	e1 e8       	ldi	r30, 0x81	; 129
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	90 81       	ld	r25, Z
 3c0:	98 60       	ori	r25, 0x08	; 8
 3c2:	90 83       	st	Z, r25
							//note WGM is spread over two register
							
	OCR1A = 0x03E8; //Sets output compare register for 1000 cycles = 1ms
 3c4:	88 ee       	ldi	r24, 0xE8	; 232
 3c6:	93 e0       	ldi	r25, 0x03	; 3
 3c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	
	TCNT1 = 0x0000; //Sets initial value of timer counter to 0x0000
 3d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 3d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	
	//TIMSK1 = TIMSK1 | 0b00000010; //Enable the output compare interrupt (removed because we are using global interrupts)
	
	TIFR1 |= _BV(OCF1A); //clear timer interrupt flag and begin new timing
 3d8:	b1 9a       	sbi	0x16, 1	; 22
	The system clock has been pre-scaled by 2. 
	*/
	
	int i; //keeps track of loop number
	
	i = 0; //initializes loop counter
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	30 e0       	ldi	r19, 0x00	; 0
	
	TIFR1 |= _BV(OCF1A); //clear timer interrupt flag and begin new timing
	
	//Poll the timer to determine when the timer has reached 0x03E8
	
	while(i<count){
 3de:	05 c0       	rjmp	.+10     	; 0x3ea <mTimer+0x32>
		
		if((TIFR1 & 0x02) == 0x02){
 3e0:	b1 9b       	sbis	0x16, 1	; 22
 3e2:	fe cf       	rjmp	.-4      	; 0x3e0 <mTimer+0x28>
			
			TIFR1 |= _BV(OCF1A); // clear interrupt flag by writing a ONE to the bit
 3e4:	b1 9a       	sbi	0x16, 1	; 22
			
			i++; //increment loop number
 3e6:	2f 5f       	subi	r18, 0xFF	; 255
 3e8:	3f 4f       	sbci	r19, 0xFF	; 255
	
	TIFR1 |= _BV(OCF1A); //clear timer interrupt flag and begin new timing
	
	//Poll the timer to determine when the timer has reached 0x03E8
	
	while(i<count){
 3ea:	24 17       	cp	r18, r20
 3ec:	35 07       	cpc	r19, r21
 3ee:	1c f4       	brge	.+6      	; 0x3f6 <mTimer+0x3e>
		
		if((TIFR1 & 0x02) == 0x02){
 3f0:	b1 9b       	sbis	0x16, 1	; 22
 3f2:	f6 cf       	rjmp	.-20     	; 0x3e0 <mTimer+0x28>
 3f4:	f7 cf       	rjmp	.-18     	; 0x3e4 <mTimer+0x2c>
 3f6:	08 95       	ret

000003f8 <__vector_3>:
	return(0);

}

/* Set up the External Interrupt 2 Vector */
ISR(INT2_vect){
 3f8:	1f 92       	push	r1
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	0b b6       	in	r0, 0x3b	; 59
 404:	0f 92       	push	r0
 406:	2f 93       	push	r18
 408:	3f 93       	push	r19
 40a:	4f 93       	push	r20
 40c:	5f 93       	push	r21
 40e:	6f 93       	push	r22
 410:	7f 93       	push	r23
 412:	8f 93       	push	r24
 414:	9f 93       	push	r25
 416:	af 93       	push	r26
 418:	bf 93       	push	r27
 41a:	ef 93       	push	r30
 41c:	ff 93       	push	r31
	mTimer(20);//debounce
 41e:	84 e1       	ldi	r24, 0x14	; 20
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	ca df       	rcall	.-108    	; 0x3b8 <mTimer>
	/* Toggle PORTC bit 2 */
	if((PIND & 0x04) == 0x04){
 424:	4a 9b       	sbis	0x09, 2	; 9
 426:	22 c0       	rjmp	.+68     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		STATE = 2;
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <STATE>
		i++;
 42e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
 432:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__data_end+0x1>
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <__data_end+0x1>
 43c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
		LCDClear();
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	9f de       	rcall	.-706    	; 0x184 <LCDByte>
		LCDWriteStringXY(0,0,"Counter=");
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	61 df       	rcall	.-318    	; 0x30e <LCDGotoXY>
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	92 e0       	ldi	r25, 0x02	; 2
 450:	f3 de       	rcall	.-538    	; 0x238 <LCDWriteString>
		LCDWriteIntXY(9,0,i,5);
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	89 e0       	ldi	r24, 0x09	; 9
 456:	5b df       	rcall	.-330    	; 0x30e <LCDGotoXY>
 458:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
 45c:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__data_end+0x1>
 460:	65 e0       	ldi	r22, 0x05	; 5
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	f8 de       	rcall	.-528    	; 0x256 <LCDWriteInt>
		mTimer(50);
 466:	82 e3       	ldi	r24, 0x32	; 50
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	a6 df       	rcall	.-180    	; 0x3b8 <mTimer>
 46c:	ff 91       	pop	r31
	}
	
}
 46e:	ef 91       	pop	r30
 470:	bf 91       	pop	r27
 472:	af 91       	pop	r26
 474:	9f 91       	pop	r25
 476:	8f 91       	pop	r24
 478:	7f 91       	pop	r23
 47a:	6f 91       	pop	r22
 47c:	5f 91       	pop	r21
 47e:	4f 91       	pop	r20
 480:	3f 91       	pop	r19
 482:	2f 91       	pop	r18
 484:	0f 90       	pop	r0
 486:	0b be       	out	0x3b, r0	; 59
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__vector_4>:
 492:	1f 92       	push	r1

ISR(INT3_vect){
 494:	0f 92       	push	r0
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	0f 92       	push	r0
 49a:	11 24       	eor	r1, r1
 49c:	0b b6       	in	r0, 0x3b	; 59
 49e:	0f 92       	push	r0
 4a0:	2f 93       	push	r18
 4a2:	3f 93       	push	r19
 4a4:	4f 93       	push	r20
 4a6:	5f 93       	push	r21
 4a8:	6f 93       	push	r22
 4aa:	7f 93       	push	r23
 4ac:	8f 93       	push	r24
 4ae:	9f 93       	push	r25
 4b0:	af 93       	push	r26
 4b2:	bf 93       	push	r27
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
	mTimer(20); //debounce
 4b8:	84 e1       	ldi	r24, 0x14	; 20
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	7d df       	rcall	.-262    	; 0x3b8 <mTimer>
	/* Toggle PORTC bit 3 */
	if((PIND & 0x08) == 0x00){ //active low, checks if switch was pressed
 4be:	4b 99       	sbic	0x09, 3	; 9
 4c0:	22 c0       	rjmp	.+68     	; 0x506 <__vector_4+0x74>
		STATE = 3;
 4c2:	83 e0       	ldi	r24, 0x03	; 3
 4c4:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <STATE>
		i--;
 4c8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
 4cc:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__data_end+0x1>
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <__data_end+0x1>
 4d6:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
		LCDClear();
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	52 de       	rcall	.-860    	; 0x184 <LCDByte>
		LCDWriteStringXY(0,0,"Counter=");
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	14 df       	rcall	.-472    	; 0x30e <LCDGotoXY>
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	92 e0       	ldi	r25, 0x02	; 2
 4ea:	a6 de       	rcall	.-692    	; 0x238 <LCDWriteString>
		LCDWriteIntXY(9,0,i,5);
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	89 e0       	ldi	r24, 0x09	; 9
 4f0:	0e df       	rcall	.-484    	; 0x30e <LCDGotoXY>
 4f2:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
 4f6:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__data_end+0x1>
 4fa:	65 e0       	ldi	r22, 0x05	; 5
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	ab de       	rcall	.-682    	; 0x256 <LCDWriteInt>
		mTimer(50);
 500:	82 e3       	ldi	r24, 0x32	; 50
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	59 df       	rcall	.-334    	; 0x3b8 <mTimer>
 506:	ff 91       	pop	r31
	}
}
 508:	ef 91       	pop	r30
 50a:	bf 91       	pop	r27
 50c:	af 91       	pop	r26
 50e:	9f 91       	pop	r25
 510:	8f 91       	pop	r24
 512:	7f 91       	pop	r23
 514:	6f 91       	pop	r22
 516:	5f 91       	pop	r21
 518:	4f 91       	pop	r20
 51a:	3f 91       	pop	r19
 51c:	2f 91       	pop	r18
 51e:	0f 90       	pop	r0
 520:	0b be       	out	0x3b, r0	; 59
 522:	0f 90       	pop	r0
 524:	0f be       	out	0x3f, r0	; 63
 526:	0f 90       	pop	r0
 528:	1f 90       	pop	r1
 52a:	18 95       	reti

0000052c <__divmodhi4>:
 52c:	97 fb       	bst	r25, 7
 52e:	07 2e       	mov	r0, r23
 530:	16 f4       	brtc	.+4      	; 0x536 <__divmodhi4+0xa>
 532:	00 94       	com	r0
 534:	06 d0       	rcall	.+12     	; 0x542 <__divmodhi4_neg1>
 536:	77 fd       	sbrc	r23, 7
 538:	08 d0       	rcall	.+16     	; 0x54a <__divmodhi4_neg2>
 53a:	0b d0       	rcall	.+22     	; 0x552 <__udivmodhi4>
 53c:	07 fc       	sbrc	r0, 7
 53e:	05 d0       	rcall	.+10     	; 0x54a <__divmodhi4_neg2>
 540:	3e f4       	brtc	.+14     	; 0x550 <__divmodhi4_exit>

00000542 <__divmodhi4_neg1>:
 542:	90 95       	com	r25
 544:	81 95       	neg	r24
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	08 95       	ret

0000054a <__divmodhi4_neg2>:
 54a:	70 95       	com	r23
 54c:	61 95       	neg	r22
 54e:	7f 4f       	sbci	r23, 0xFF	; 255

00000550 <__divmodhi4_exit>:
 550:	08 95       	ret

00000552 <__udivmodhi4>:
 552:	aa 1b       	sub	r26, r26
 554:	bb 1b       	sub	r27, r27
 556:	51 e1       	ldi	r21, 0x11	; 17
 558:	07 c0       	rjmp	.+14     	; 0x568 <__udivmodhi4_ep>

0000055a <__udivmodhi4_loop>:
 55a:	aa 1f       	adc	r26, r26
 55c:	bb 1f       	adc	r27, r27
 55e:	a6 17       	cp	r26, r22
 560:	b7 07       	cpc	r27, r23
 562:	10 f0       	brcs	.+4      	; 0x568 <__udivmodhi4_ep>
 564:	a6 1b       	sub	r26, r22
 566:	b7 0b       	sbc	r27, r23

00000568 <__udivmodhi4_ep>:
 568:	88 1f       	adc	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	5a 95       	dec	r21
 56e:	a9 f7       	brne	.-22     	; 0x55a <__udivmodhi4_loop>
 570:	80 95       	com	r24
 572:	90 95       	com	r25
 574:	bc 01       	movw	r22, r24
 576:	cd 01       	movw	r24, r26
 578:	08 95       	ret

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
