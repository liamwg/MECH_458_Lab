
ProjectSkeletonDemo2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800200  00000fc8  0000105c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800266  00800266  000010c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000227f  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000103a  00000000  00000000  000034cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dfd  00000000  00000000  00004505  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003fc  00000000  00000000  00005304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c6  00000000  00000000  00005700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000103b  00000000  00000000  00005fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00007001  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	3d c2       	rjmp	.+1146   	; 0x480 <__vector_1>
   6:	00 00       	nop
   8:	8a c1       	rjmp	.+788    	; 0x31e <__vector_2>
   a:	00 00       	nop
   c:	e4 c1       	rjmp	.+968    	; 0x3d6 <__vector_3>
   e:	00 00       	nop
  10:	05 c5       	rjmp	.+2570   	; 0xa1c <__vector_4>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	9f c2       	rjmp	.+1342   	; 0x5b4 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ec       	ldi	r30, 0xC8	; 200
  fc:	ff e0       	ldi	r31, 0x0F	; 15
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 36       	cpi	r26, 0x66	; 102
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e6       	ldi	r26, 0x66	; 102
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 38       	cpi	r26, 0x8B	; 139
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	d9 d5       	rcall	.+2994   	; 0xcd2 <main>
 120:	51 c7       	rjmp	.+3746   	; 0xfc4 <_exit>

00000122 <__bad_interrupt>:
 122:	30 c1       	rjmp	.+608    	; 0x384 <__vector_default>

00000124 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 12a:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
 12c:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <LCDBusyLoop+0xc>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCDBusyLoop+0x12>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 136:	47 9a       	sbi	0x08, 7	; 8
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	9a 95       	dec	r25
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x16>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1c>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 140:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 142:	82 95       	swap	r24
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	92 e0       	ldi	r25, 0x02	; 2
 148:	9a 95       	dec	r25
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x24>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCDBusyLoop+0x2a>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 14e:	47 98       	cbi	0x08, 7	; 8
 150:	95 e0       	ldi	r25, 0x05	; 5
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <LCDBusyLoop+0x2e>
 156:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 158:	47 9a       	sbi	0x08, 7	; 8
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDBusyLoop+0x38>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCDBusyLoop+0x3e>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 162:	96 b1       	in	r25, 0x06	; 6
 164:	92 e0       	ldi	r25, 0x02	; 2
 166:	9a 95       	dec	r25
 168:	f1 f7       	brne	.-4      	; 0x166 <LCDBusyLoop+0x42>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCDBusyLoop+0x48>

		busy=status & 0b10000000;

		_delay_us(0.5);
		
		CLEAR_E();
 16c:	47 98       	cbi	0x08, 7	; 8
 16e:	95 e0       	ldi	r25, 0x05	; 5
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDBusyLoop+0x4c>
 174:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 176:	88 23       	and	r24, r24
 178:	f4 f2       	brlt	.-68     	; 0x136 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 17a:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 17c:	87 b1       	in	r24, 0x07	; 7
 17e:	8f 60       	ori	r24, 0x0F	; 15
 180:	87 b9       	out	0x07, r24	; 7
 182:	08 95       	ret

00000184 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 184:	28 2f       	mov	r18, r24
 186:	22 95       	swap	r18
 188:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 18a:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 18c:	61 11       	cpse	r22, r1
 18e:	02 c0       	rjmp	.+4      	; 0x194 <LCDByte+0x10>
	CLEAR_RS();
 190:	46 98       	cbi	0x08, 6	; 8
 192:	01 c0       	rjmp	.+2      	; 0x196 <LCDByte+0x12>
else
	SET_RS();
 194:	46 9a       	sbi	0x08, 6	; 8
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	9a 95       	dec	r25
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCDByte+0x14>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCDByte+0x1a>

_delay_us(0.500);		//tAS


SET_E();
 19e:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 1a0:	98 b1       	in	r25, 0x08	; 8
 1a2:	90 7f       	andi	r25, 0xF0	; 240
 1a4:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 1a6:	98 b9       	out	0x08, r25	; 8
 1a8:	95 e0       	ldi	r25, 0x05	; 5
 1aa:	9a 95       	dec	r25
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCDByte+0x26>
 1ae:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 1b0:	47 98       	cbi	0x08, 7	; 8
 1b2:	95 e0       	ldi	r25, 0x05	; 5
 1b4:	9a 95       	dec	r25
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCDByte+0x30>
 1b8:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 1ba:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1bc:	98 b1       	in	r25, 0x08	; 8
 1be:	90 7f       	andi	r25, 0xF0	; 240
 1c0:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 1c2:	88 b9       	out	0x08, r24	; 8
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCDByte+0x42>
 1ca:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 1cc:	47 98       	cbi	0x08, 7	; 8
 1ce:	95 e0       	ldi	r25, 0x05	; 5
 1d0:	9a 95       	dec	r25
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCDByte+0x4c>
 1d4:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 1d6:	a6 cf       	rjmp	.-180    	; 0x124 <LCDBusyLoop>
 1d8:	08 95       	ret

000001da <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 1da:	cf 93       	push	r28
 1dc:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	86 e7       	ldi	r24, 0x76	; 118
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <InitLCD+0xa>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <InitLCD+0x14>
 1ee:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1f0:	87 b1       	in	r24, 0x07	; 7
 1f2:	8f 60       	ori	r24, 0x0F	; 15
 1f4:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 1f6:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1f8:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1fa:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 1fc:	88 b1       	in	r24, 0x08	; 8
 1fe:	80 7f       	andi	r24, 0xF0	; 240
 200:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 202:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 204:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 206:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	00 c0       	rjmp	.+0      	; 0x20a <InitLCD+0x30>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <InitLCD+0x32>
 20c:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 20e:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 210:	41 9a       	sbi	0x08, 1	; 8
 212:	25 e0       	ldi	r18, 0x05	; 5
 214:	2a 95       	dec	r18
 216:	f1 f7       	brne	.-4      	; 0x214 <InitLCD+0x3a>
 218:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 21a:	47 98       	cbi	0x08, 7	; 8
 21c:	85 e0       	ldi	r24, 0x05	; 5
 21e:	8a 95       	dec	r24
 220:	f1 f7       	brne	.-4      	; 0x21e <InitLCD+0x44>
 222:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 224:	7f df       	rcall	.-258    	; 0x124 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	8c 2f       	mov	r24, r28
 22a:	8c 60       	ori	r24, 0x0C	; 12
 22c:	ab df       	rcall	.-170    	; 0x184 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	88 e2       	ldi	r24, 0x28	; 40
 232:	a8 df       	rcall	.-176    	; 0x184 <LCDByte>
}
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 23e:	88 81       	ld	r24, Y
 240:	88 23       	and	r24, r24
 242:	31 f0       	breq	.+12     	; 0x250 <LCDWriteString+0x18>
 244:	21 96       	adiw	r28, 0x01	; 1
 {
	LCDData(*msg);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	9d df       	rcall	.-198    	; 0x184 <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 24a:	89 91       	ld	r24, Y+
 24c:	81 11       	cpse	r24, r1
 24e:	fb cf       	rjmp	.-10     	; 0x246 <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	00 d0       	rcall	.+0      	; 0x264 <LCDWriteInt+0xe>
 264:	1f 92       	push	r1
 266:	1f 92       	push	r1
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 26e:	fe 01       	movw	r30, r28
 270:	31 96       	adiw	r30, 0x01	; 1
 272:	25 e0       	ldi	r18, 0x05	; 5
 274:	df 01       	movw	r26, r30
 276:	1d 92       	st	X+, r1
 278:	2a 95       	dec	r18
 27a:	e9 f7       	brne	.-6      	; 0x276 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
 27c:	00 97       	sbiw	r24, 0x00	; 0
 27e:	51 f0       	breq	.+20     	; 0x294 <LCDWriteInt+0x3e>
 280:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
 282:	2a e0       	ldi	r18, 0x0A	; 10
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	b9 01       	movw	r22, r18
 288:	55 d5       	rcall	.+2730   	; 0xd34 <__divmodhi4>
 28a:	82 93       	st	-Z, r24
	val=val/10;
 28c:	86 2f       	mov	r24, r22
 28e:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 290:	00 97       	sbiw	r24, 0x00	; 0
 292:	c9 f7       	brne	.-14     	; 0x286 <LCDWriteInt+0x30>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 294:	bf ef       	ldi	r27, 0xFF	; 255
 296:	eb 16       	cp	r14, r27
 298:	fb 06       	cpc	r15, r27
 29a:	69 f4       	brne	.+26     	; 0x2b6 <LCDWriteInt+0x60>
		while(str[j]==0) j++;
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	81 11       	cpse	r24, r1
 2a0:	1d c0       	rjmp	.+58     	; 0x2dc <LCDWriteInt+0x86>
 2a2:	fe 01       	movw	r30, r28
 2a4:	32 96       	adiw	r30, 0x02	; 2
 2a6:	00 e0       	ldi	r16, 0x00	; 0
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	0f 5f       	subi	r16, 0xFF	; 255
 2ac:	1f 4f       	sbci	r17, 0xFF	; 255
 2ae:	81 91       	ld	r24, Z+
 2b0:	88 23       	and	r24, r24
 2b2:	d9 f3       	breq	.-10     	; 0x2aa <LCDWriteInt+0x54>
 2b4:	0f c0       	rjmp	.+30     	; 0x2d4 <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 2b6:	05 e0       	ldi	r16, 0x05	; 5
 2b8:	10 e0       	ldi	r17, 0x00	; 0
 2ba:	0e 19       	sub	r16, r14
 2bc:	1f 09       	sbc	r17, r15
 2be:	0a c0       	rjmp	.+20     	; 0x2d4 <LCDWriteInt+0x7e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2c0:	f8 01       	movw	r30, r16
 2c2:	81 91       	ld	r24, Z+
 2c4:	8f 01       	movw	r16, r30
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	80 5d       	subi	r24, 0xD0	; 208
 2ca:	5c df       	rcall	.-328    	; 0x184 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2cc:	0e 15       	cp	r16, r14
 2ce:	1f 05       	cpc	r17, r15
 2d0:	b9 f7       	brne	.-18     	; 0x2c0 <LCDWriteInt+0x6a>
 2d2:	11 c0       	rjmp	.+34     	; 0x2f6 <LCDWriteInt+0xa0>
 2d4:	05 30       	cpi	r16, 0x05	; 5
 2d6:	11 05       	cpc	r17, r1
 2d8:	1c f0       	brlt	.+6      	; 0x2e0 <LCDWriteInt+0x8a>
 2da:	0d c0       	rjmp	.+26     	; 0x2f6 <LCDWriteInt+0xa0>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 2dc:	00 e0       	ldi	r16, 0x00	; 0
 2de:	10 e0       	ldi	r17, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	8c 0f       	add	r24, r28
 2e6:	9d 1f       	adc	r25, r29
 2e8:	08 0f       	add	r16, r24
 2ea:	19 1f       	adc	r17, r25
 2ec:	7e 01       	movw	r14, r28
 2ee:	96 e0       	ldi	r25, 0x06	; 6
 2f0:	e9 0e       	add	r14, r25
 2f2:	f1 1c       	adc	r15, r1
 2f4:	e5 cf       	rjmp	.-54     	; 0x2c0 <LCDWriteInt+0x6a>
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	08 95       	ret

0000030e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 30e:	88 32       	cpi	r24, 0x28	; 40
 310:	28 f4       	brcc	.+10     	; 0x31c <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 312:	61 11       	cpse	r22, r1
 314:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	34 cf       	rjmp	.-408    	; 0x184 <LCDByte>
 31c:	08 95       	ret

0000031e <__vector_2>:
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
}/*isEmpty*/
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	0b b6       	in	r0, 0x3b	; 59
 32a:	0f 92       	push	r0
 32c:	2f 93       	push	r18
 32e:	3f 93       	push	r19
 330:	4f 93       	push	r20
 332:	5f 93       	push	r21
 334:	6f 93       	push	r22
 336:	7f 93       	push	r23
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
 33c:	af 93       	push	r26
 33e:	bf 93       	push	r27
 340:	ef 93       	push	r30
 342:	ff 93       	push	r31
 344:	49 99       	sbic	0x09, 1	; 9
 346:	0b c0       	rjmp	.+22     	; 0x35e <__vector_2+0x40>
 348:	15 b8       	out	0x05, r1	; 5
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	1a df       	rcall	.-460    	; 0x184 <LCDByte>
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	dc df       	rcall	.-72     	; 0x30e <LCDGotoXY>
 356:	8c e1       	ldi	r24, 0x1C	; 28
 358:	92 e0       	ldi	r25, 0x02	; 2
 35a:	6e df       	rcall	.-292    	; 0x238 <LCDWriteString>
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__vector_2+0x3e>
 35e:	ff 91       	pop	r31
 360:	ef 91       	pop	r30
 362:	bf 91       	pop	r27
 364:	af 91       	pop	r26
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	7f 91       	pop	r23
 36c:	6f 91       	pop	r22
 36e:	5f 91       	pop	r21
 370:	4f 91       	pop	r20
 372:	3f 91       	pop	r19
 374:	2f 91       	pop	r18
 376:	0f 90       	pop	r0
 378:	0b be       	out	0x3b, r0	; 59
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <__vector_default>:
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	8f ef       	ldi	r24, 0xFF	; 255
 390:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 394:	ff cf       	rjmp	.-2      	; 0x394 <__vector_default+0x10>

00000396 <mTimer>:
 396:	ac 01       	movw	r20, r24
 398:	e1 e8       	ldi	r30, 0x81	; 129
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	90 81       	ld	r25, Z
 39e:	98 60       	ori	r25, 0x08	; 8
 3a0:	90 83       	st	Z, r25
 3a2:	88 ee       	ldi	r24, 0xE8	; 232
 3a4:	93 e0       	ldi	r25, 0x03	; 3
 3a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 3ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 3b2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 3b6:	b1 9a       	sbi	0x16, 1	; 22
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <mTimer+0x32>
 3be:	b1 9b       	sbis	0x16, 1	; 22
 3c0:	fe cf       	rjmp	.-4      	; 0x3be <mTimer+0x28>
 3c2:	b1 9a       	sbi	0x16, 1	; 22
 3c4:	2f 5f       	subi	r18, 0xFF	; 255
 3c6:	3f 4f       	sbci	r19, 0xFF	; 255
 3c8:	24 17       	cp	r18, r20
 3ca:	35 07       	cpc	r19, r21
 3cc:	1c f4       	brge	.+6      	; 0x3d4 <mTimer+0x3e>
 3ce:	b1 9b       	sbis	0x16, 1	; 22
 3d0:	f6 cf       	rjmp	.-20     	; 0x3be <mTimer+0x28>
 3d2:	f7 cf       	rjmp	.-18     	; 0x3c2 <mTimer+0x2c>
 3d4:	08 95       	ret

000003d6 <__vector_3>:
 3d6:	1f 92       	push	r1
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	0b b6       	in	r0, 0x3b	; 59
 3e2:	0f 92       	push	r0
 3e4:	2f 93       	push	r18
 3e6:	3f 93       	push	r19
 3e8:	4f 93       	push	r20
 3ea:	5f 93       	push	r21
 3ec:	6f 93       	push	r22
 3ee:	7f 93       	push	r23
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	af 93       	push	r26
 3f6:	bf 93       	push	r27
 3f8:	ef 93       	push	r30
 3fa:	ff 93       	push	r31
 3fc:	84 e1       	ldi	r24, 0x14	; 20
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	ca df       	rcall	.-108    	; 0x396 <mTimer>
 402:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <i>
 406:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <i+0x1>
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <i+0x1>
 410:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <i>
 414:	8f ef       	ldi	r24, 0xFF	; 255
 416:	9f ef       	ldi	r25, 0xFF	; 255
 418:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <lowest_ref+0x1>
 41c:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <lowest_ref>
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	74 df       	rcall	.-280    	; 0x30e <LCDGotoXY>
 426:	82 e3       	ldi	r24, 0x32	; 50
 428:	92 e0       	ldi	r25, 0x02	; 2
 42a:	06 df       	rcall	.-500    	; 0x238 <LCDWriteString>
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	89 e0       	ldi	r24, 0x09	; 9
 430:	6e df       	rcall	.-292    	; 0x30e <LCDGotoXY>
 432:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <i>
 436:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <i+0x1>
 43a:	65 e0       	ldi	r22, 0x05	; 5
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	0b df       	rcall	.-490    	; 0x256 <LCDWriteInt>
 440:	4a 9b       	sbis	0x09, 2	; 9
 442:	08 c0       	rjmp	.+16     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 444:	83 b1       	in	r24, 0x03	; 3
 446:	80 37       	cpi	r24, 0x70	; 112
 448:	29 f4       	brne	.+10     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 44a:	ea e7       	ldi	r30, 0x7A	; 122
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	80 64       	ori	r24, 0x40	; 64
 452:	80 83       	st	Z, r24
 454:	82 e0       	ldi	r24, 0x02	; 2
 456:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <STATE>
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	bf 91       	pop	r27
 460:	af 91       	pop	r26
 462:	9f 91       	pop	r25
 464:	8f 91       	pop	r24
 466:	7f 91       	pop	r23
 468:	6f 91       	pop	r22
 46a:	5f 91       	pop	r21
 46c:	4f 91       	pop	r20
 46e:	3f 91       	pop	r19
 470:	2f 91       	pop	r18
 472:	0f 90       	pop	r0
 474:	0b be       	out	0x3b, r0	; 59
 476:	0f 90       	pop	r0
 478:	0f be       	out	0x3f, r0	; 63
 47a:	0f 90       	pop	r0
 47c:	1f 90       	pop	r1
 47e:	18 95       	reti

00000480 <__vector_1>:
 480:	1f 92       	push	r1
 482:	0f 92       	push	r0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	0f 92       	push	r0
 488:	11 24       	eor	r1, r1
 48a:	0b b6       	in	r0, 0x3b	; 59
 48c:	0f 92       	push	r0
 48e:	2f 93       	push	r18
 490:	3f 93       	push	r19
 492:	4f 93       	push	r20
 494:	5f 93       	push	r21
 496:	6f 93       	push	r22
 498:	7f 93       	push	r23
 49a:	8f 93       	push	r24
 49c:	9f 93       	push	r25
 49e:	af 93       	push	r26
 4a0:	bf 93       	push	r27
 4a2:	ef 93       	push	r30
 4a4:	ff 93       	push	r31
 4a6:	84 e1       	ldi	r24, 0x14	; 20
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	75 df       	rcall	.-278    	; 0x396 <mTimer>
 4ac:	48 9b       	sbis	0x09, 0	; 9
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__vector_1+0x34>
 4b0:	80 e7       	ldi	r24, 0x70	; 112
 4b2:	85 b9       	out	0x05, r24	; 5
 4b4:	ff 91       	pop	r31
 4b6:	ef 91       	pop	r30
 4b8:	bf 91       	pop	r27
 4ba:	af 91       	pop	r26
 4bc:	9f 91       	pop	r25
 4be:	8f 91       	pop	r24
 4c0:	7f 91       	pop	r23
 4c2:	6f 91       	pop	r22
 4c4:	5f 91       	pop	r21
 4c6:	4f 91       	pop	r20
 4c8:	3f 91       	pop	r19
 4ca:	2f 91       	pop	r18
 4cc:	0f 90       	pop	r0
 4ce:	0b be       	out	0x3b, r0	; 59
 4d0:	0f 90       	pop	r0
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	0f 90       	pop	r0
 4d6:	1f 90       	pop	r1
 4d8:	18 95       	reti

000004da <aTimer>:
 4da:	0f 93       	push	r16
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	ec 01       	movw	r28, r24
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	12 df       	rcall	.-476    	; 0x30e <LCDGotoXY>
 4ea:	8b e3       	ldi	r24, 0x3B	; 59
 4ec:	92 e0       	ldi	r25, 0x02	; 2
 4ee:	a4 de       	rcall	.-696    	; 0x238 <LCDWriteString>
 4f0:	e1 eb       	ldi	r30, 0xB1	; 177
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	80 81       	ld	r24, Z
 4f6:	88 60       	ori	r24, 0x08	; 8
 4f8:	80 83       	st	Z, r24
 4fa:	8a e0       	ldi	r24, 0x0A	; 10
 4fc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
 500:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
 504:	80 81       	ld	r24, Z
 506:	82 60       	ori	r24, 0x02	; 2
 508:	80 83       	st	Z, r24
 50a:	b9 9a       	sbi	0x17, 1	; 23
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	39 de       	rcall	.-910    	; 0x184 <LCDByte>
 512:	00 e0       	ldi	r16, 0x00	; 0
 514:	10 e0       	ldi	r17, 0x00	; 0
 516:	13 c0       	rjmp	.+38     	; 0x53e <aTimer+0x64>
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	f8 de       	rcall	.-528    	; 0x30e <LCDGotoXY>
 51e:	64 e0       	ldi	r22, 0x04	; 4
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	ce 01       	movw	r24, r28
 524:	98 de       	rcall	.-720    	; 0x256 <LCDWriteInt>
 526:	b9 9b       	sbis	0x17, 1	; 23
 528:	f7 cf       	rjmp	.-18     	; 0x518 <aTimer+0x3e>
 52a:	b9 9a       	sbi	0x17, 1	; 23
 52c:	0f 5f       	subi	r16, 0xFF	; 255
 52e:	1f 4f       	sbci	r17, 0xFF	; 255
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	ec de       	rcall	.-552    	; 0x30e <LCDGotoXY>
 536:	64 e0       	ldi	r22, 0x04	; 4
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	c8 01       	movw	r24, r16
 53c:	8c de       	rcall	.-744    	; 0x256 <LCDWriteInt>
 53e:	0c 17       	cp	r16, r28
 540:	1d 07       	cpc	r17, r29
 542:	54 f3       	brlt	.-44     	; 0x518 <aTimer+0x3e>
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	1f 91       	pop	r17
 54a:	0f 91       	pop	r16
 54c:	08 95       	ret

0000054e <PWM>:
 54e:	83 e8       	ldi	r24, 0x83	; 131
 550:	84 bd       	out	0x24, r24	; 36
 552:	83 e0       	ldi	r24, 0x03	; 3
 554:	85 bd       	out	0x25, r24	; 37
 556:	80 e4       	ldi	r24, 0x40	; 64
 558:	87 bd       	out	0x27, r24	; 39
 55a:	08 95       	ret

0000055c <initLink>:
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	ec 01       	movw	r28, r24
 562:	84 e0       	ldi	r24, 0x04	; 4
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0d d4       	rcall	.+2074   	; 0xd82 <malloc>
 568:	99 83       	std	Y+1, r25	; 0x01
 56a:	88 83       	st	Y, r24
 56c:	fc 01       	movw	r30, r24
 56e:	13 82       	std	Z+3, r1	; 0x03
 570:	12 82       	std	Z+2, r1	; 0x02
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	08 95       	ret

00000578 <enqueue>:
 578:	db 01       	movw	r26, r22
 57a:	ed 91       	ld	r30, X+
 57c:	fc 91       	ld	r31, X
 57e:	30 97       	sbiw	r30, 0x00	; 0
 580:	61 f0       	breq	.+24     	; 0x59a <enqueue+0x22>
 582:	da 01       	movw	r26, r20
 584:	8d 91       	ld	r24, X+
 586:	9c 91       	ld	r25, X
 588:	11 97       	sbiw	r26, 0x01	; 1
 58a:	93 83       	std	Z+3, r25	; 0x03
 58c:	82 83       	std	Z+2, r24	; 0x02
 58e:	8d 91       	ld	r24, X+
 590:	9c 91       	ld	r25, X
 592:	fb 01       	movw	r30, r22
 594:	91 83       	std	Z+1, r25	; 0x01
 596:	80 83       	st	Z, r24
 598:	08 95       	ret
 59a:	da 01       	movw	r26, r20
 59c:	2d 91       	ld	r18, X+
 59e:	3c 91       	ld	r19, X
 5a0:	11 97       	sbiw	r26, 0x01	; 1
 5a2:	fc 01       	movw	r30, r24
 5a4:	31 83       	std	Z+1, r19	; 0x01
 5a6:	20 83       	st	Z, r18
 5a8:	8d 91       	ld	r24, X+
 5aa:	9c 91       	ld	r25, X
 5ac:	db 01       	movw	r26, r22
 5ae:	8d 93       	st	X+, r24
 5b0:	9c 93       	st	X, r25
 5b2:	08 95       	ret

000005b4 <__vector_29>:
 5b4:	1f 92       	push	r1
 5b6:	0f 92       	push	r0
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	0f 92       	push	r0
 5bc:	11 24       	eor	r1, r1
 5be:	0b b6       	in	r0, 0x3b	; 59
 5c0:	0f 92       	push	r0
 5c2:	2f 93       	push	r18
 5c4:	3f 93       	push	r19
 5c6:	4f 93       	push	r20
 5c8:	5f 93       	push	r21
 5ca:	6f 93       	push	r22
 5cc:	7f 93       	push	r23
 5ce:	8f 93       	push	r24
 5d0:	9f 93       	push	r25
 5d2:	af 93       	push	r26
 5d4:	bf 93       	push	r27
 5d6:	ef 93       	push	r30
 5d8:	ff 93       	push	r31
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	1f 92       	push	r1
 5e0:	1f 92       	push	r1
 5e2:	cd b7       	in	r28, 0x3d	; 61
 5e4:	de b7       	in	r29, 0x3e	; 62
 5e6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <ADC_low+0x1>
 5f0:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <ADC_low>
 5f4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	98 2f       	mov	r25, r24
 5fc:	88 27       	eor	r24, r24
 5fe:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <ADC_high+0x1>
 602:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <ADC_high>
 606:	20 91 85 02 	lds	r18, 0x0285	; 0x800285 <ADC_low>
 60a:	30 91 86 02 	lds	r19, 0x0286	; 0x800286 <ADC_low+0x1>
 60e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <ADC_high>
 612:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <ADC_high+0x1>
 616:	82 0f       	add	r24, r18
 618:	93 1f       	adc	r25, r19
 61a:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <ADC_result+0x1>
 61e:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <ADC_result>
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	73 de       	rcall	.-794    	; 0x30e <LCDGotoXY>
 628:	82 e3       	ldi	r24, 0x32	; 50
 62a:	92 e0       	ldi	r25, 0x02	; 2
 62c:	05 de       	rcall	.-1014   	; 0x238 <LCDWriteString>
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	89 e0       	ldi	r24, 0x09	; 9
 632:	6d de       	rcall	.-806    	; 0x30e <LCDGotoXY>
 634:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <i>
 638:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <i+0x1>
 63c:	65 e0       	ldi	r22, 0x05	; 5
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	0a de       	rcall	.-1004   	; 0x256 <LCDWriteInt>
 642:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <ADC_result>
 646:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <ADC_result+0x1>
 64a:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <lowest_ref>
 64e:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <lowest_ref+0x1>
 652:	28 17       	cp	r18, r24
 654:	39 07       	cpc	r19, r25
 656:	40 f4       	brcc	.+16     	; 0x668 <__vector_29+0xb4>
 658:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <ADC_result>
 65c:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <ADC_result+0x1>
 660:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <lowest_ref+0x1>
 664:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <lowest_ref>
 668:	4a 9b       	sbis	0x09, 2	; 9
 66a:	06 c0       	rjmp	.+12     	; 0x678 <__vector_29+0xc4>
 66c:	ea e7       	ldi	r30, 0x7A	; 122
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	80 81       	ld	r24, Z
 672:	80 64       	ori	r24, 0x40	; 64
 674:	80 83       	st	Z, r24
 676:	e2 c0       	rjmp	.+452    	; 0x83c <__vector_29+0x288>
 678:	ce 01       	movw	r24, r28
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	6f df       	rcall	.-290    	; 0x55c <initLink>
 67e:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <lowest_ref>
 682:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <lowest_ref+0x1>
 686:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <alum_low>
 68a:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <alum_low+0x1>
 68e:	28 17       	cp	r18, r24
 690:	39 07       	cpc	r19, r25
 692:	6c f1       	brlt	.+90     	; 0x6ee <__vector_29+0x13a>
 694:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <lowest_ref>
 698:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <lowest_ref+0x1>
 69c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <alum_high>
 6a0:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <alum_high+0x1>
 6a4:	82 17       	cp	r24, r18
 6a6:	93 07       	cpc	r25, r19
 6a8:	14 f1       	brlt	.+68     	; 0x6ee <__vector_29+0x13a>
 6aa:	e9 81       	ldd	r30, Y+1	; 0x01
 6ac:	fa 81       	ldd	r31, Y+2	; 0x02
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	91 83       	std	Z+1, r25	; 0x01
 6b4:	80 83       	st	Z, r24
 6b6:	ae 01       	movw	r20, r28
 6b8:	4f 5f       	subi	r20, 0xFF	; 255
 6ba:	5f 4f       	sbci	r21, 0xFF	; 255
 6bc:	6c e7       	ldi	r22, 0x7C	; 124
 6be:	72 e0       	ldi	r23, 0x02	; 2
 6c0:	8e e7       	ldi	r24, 0x7E	; 126
 6c2:	92 e0       	ldi	r25, 0x02	; 2
 6c4:	59 df       	rcall	.-334    	; 0x578 <enqueue>
 6c6:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <alum_count>
 6ca:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <alum_count+0x1>
 6ce:	01 96       	adiw	r24, 0x01	; 1
 6d0:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <alum_count+0x1>
 6d4:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <alum_count>
 6d8:	61 e0       	ldi	r22, 0x01	; 1
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	18 de       	rcall	.-976    	; 0x30e <LCDGotoXY>
 6de:	e9 81       	ldd	r30, Y+1	; 0x01
 6e0:	fa 81       	ldd	r31, Y+2	; 0x02
 6e2:	61 e0       	ldi	r22, 0x01	; 1
 6e4:	70 e0       	ldi	r23, 0x00	; 0
 6e6:	80 81       	ld	r24, Z
 6e8:	91 81       	ldd	r25, Z+1	; 0x01
 6ea:	b5 dd       	rcall	.-1174   	; 0x256 <LCDWriteInt>
 6ec:	a7 c0       	rjmp	.+334    	; 0x83c <__vector_29+0x288>
 6ee:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <lowest_ref>
 6f2:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <lowest_ref+0x1>
 6f6:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <steel_low>
 6fa:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <steel_low+0x1>
 6fe:	28 17       	cp	r18, r24
 700:	39 07       	cpc	r19, r25
 702:	6c f1       	brlt	.+90     	; 0x75e <__vector_29+0x1aa>
 704:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <lowest_ref>
 708:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <lowest_ref+0x1>
 70c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <steel_high>
 710:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <steel_high+0x1>
 714:	82 17       	cp	r24, r18
 716:	93 07       	cpc	r25, r19
 718:	14 f1       	brlt	.+68     	; 0x75e <__vector_29+0x1aa>
 71a:	e9 81       	ldd	r30, Y+1	; 0x01
 71c:	fa 81       	ldd	r31, Y+2	; 0x02
 71e:	82 e0       	ldi	r24, 0x02	; 2
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	91 83       	std	Z+1, r25	; 0x01
 724:	80 83       	st	Z, r24
 726:	ae 01       	movw	r20, r28
 728:	4f 5f       	subi	r20, 0xFF	; 255
 72a:	5f 4f       	sbci	r21, 0xFF	; 255
 72c:	6c e7       	ldi	r22, 0x7C	; 124
 72e:	72 e0       	ldi	r23, 0x02	; 2
 730:	8e e7       	ldi	r24, 0x7E	; 126
 732:	92 e0       	ldi	r25, 0x02	; 2
 734:	21 df       	rcall	.-446    	; 0x578 <enqueue>
 736:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <steel_count>
 73a:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <steel_count+0x1>
 73e:	01 96       	adiw	r24, 0x01	; 1
 740:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <steel_count+0x1>
 744:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <steel_count>
 748:	61 e0       	ldi	r22, 0x01	; 1
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	e0 dd       	rcall	.-1088   	; 0x30e <LCDGotoXY>
 74e:	e9 81       	ldd	r30, Y+1	; 0x01
 750:	fa 81       	ldd	r31, Y+2	; 0x02
 752:	61 e0       	ldi	r22, 0x01	; 1
 754:	70 e0       	ldi	r23, 0x00	; 0
 756:	80 81       	ld	r24, Z
 758:	91 81       	ldd	r25, Z+1	; 0x01
 75a:	7d dd       	rcall	.-1286   	; 0x256 <LCDWriteInt>
 75c:	6f c0       	rjmp	.+222    	; 0x83c <__vector_29+0x288>
 75e:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <lowest_ref>
 762:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <lowest_ref+0x1>
 766:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <white_low>
 76a:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <white_low+0x1>
 76e:	28 17       	cp	r18, r24
 770:	39 07       	cpc	r19, r25
 772:	6c f1       	brlt	.+90     	; 0x7ce <__vector_29+0x21a>
 774:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <lowest_ref>
 778:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <lowest_ref+0x1>
 77c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <white_high>
 780:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <white_high+0x1>
 784:	82 17       	cp	r24, r18
 786:	93 07       	cpc	r25, r19
 788:	14 f1       	brlt	.+68     	; 0x7ce <__vector_29+0x21a>
 78a:	e9 81       	ldd	r30, Y+1	; 0x01
 78c:	fa 81       	ldd	r31, Y+2	; 0x02
 78e:	83 e0       	ldi	r24, 0x03	; 3
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	91 83       	std	Z+1, r25	; 0x01
 794:	80 83       	st	Z, r24
 796:	ae 01       	movw	r20, r28
 798:	4f 5f       	subi	r20, 0xFF	; 255
 79a:	5f 4f       	sbci	r21, 0xFF	; 255
 79c:	6c e7       	ldi	r22, 0x7C	; 124
 79e:	72 e0       	ldi	r23, 0x02	; 2
 7a0:	8e e7       	ldi	r24, 0x7E	; 126
 7a2:	92 e0       	ldi	r25, 0x02	; 2
 7a4:	e9 de       	rcall	.-558    	; 0x578 <enqueue>
 7a6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <white_count>
 7aa:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <white_count+0x1>
 7ae:	01 96       	adiw	r24, 0x01	; 1
 7b0:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <white_count+0x1>
 7b4:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <white_count>
 7b8:	61 e0       	ldi	r22, 0x01	; 1
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	a8 dd       	rcall	.-1200   	; 0x30e <LCDGotoXY>
 7be:	e9 81       	ldd	r30, Y+1	; 0x01
 7c0:	fa 81       	ldd	r31, Y+2	; 0x02
 7c2:	61 e0       	ldi	r22, 0x01	; 1
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	80 81       	ld	r24, Z
 7c8:	91 81       	ldd	r25, Z+1	; 0x01
 7ca:	45 dd       	rcall	.-1398   	; 0x256 <LCDWriteInt>
 7cc:	37 c0       	rjmp	.+110    	; 0x83c <__vector_29+0x288>
 7ce:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <lowest_ref>
 7d2:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <lowest_ref+0x1>
 7d6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <black_low>
 7da:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <black_low+0x1>
 7de:	28 17       	cp	r18, r24
 7e0:	39 07       	cpc	r19, r25
 7e2:	64 f1       	brlt	.+88     	; 0x83c <__vector_29+0x288>
 7e4:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <lowest_ref>
 7e8:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <lowest_ref+0x1>
 7ec:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <black_high>
 7f0:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <black_high+0x1>
 7f4:	82 17       	cp	r24, r18
 7f6:	93 07       	cpc	r25, r19
 7f8:	0c f1       	brlt	.+66     	; 0x83c <__vector_29+0x288>
 7fa:	e9 81       	ldd	r30, Y+1	; 0x01
 7fc:	fa 81       	ldd	r31, Y+2	; 0x02
 7fe:	84 e0       	ldi	r24, 0x04	; 4
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	91 83       	std	Z+1, r25	; 0x01
 804:	80 83       	st	Z, r24
 806:	ae 01       	movw	r20, r28
 808:	4f 5f       	subi	r20, 0xFF	; 255
 80a:	5f 4f       	sbci	r21, 0xFF	; 255
 80c:	6c e7       	ldi	r22, 0x7C	; 124
 80e:	72 e0       	ldi	r23, 0x02	; 2
 810:	8e e7       	ldi	r24, 0x7E	; 126
 812:	92 e0       	ldi	r25, 0x02	; 2
 814:	b1 de       	rcall	.-670    	; 0x578 <enqueue>
 816:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <black_count>
 81a:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <black_count+0x1>
 81e:	01 96       	adiw	r24, 0x01	; 1
 820:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <black_count+0x1>
 824:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <black_count>
 828:	61 e0       	ldi	r22, 0x01	; 1
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	70 dd       	rcall	.-1312   	; 0x30e <LCDGotoXY>
 82e:	e9 81       	ldd	r30, Y+1	; 0x01
 830:	fa 81       	ldd	r31, Y+2	; 0x02
 832:	61 e0       	ldi	r22, 0x01	; 1
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	80 81       	ld	r24, Z
 838:	91 81       	ldd	r25, Z+1	; 0x01
 83a:	0d dd       	rcall	.-1510   	; 0x256 <LCDWriteInt>
 83c:	0f 90       	pop	r0
 83e:	0f 90       	pop	r0
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	ff 91       	pop	r31
 846:	ef 91       	pop	r30
 848:	bf 91       	pop	r27
 84a:	af 91       	pop	r26
 84c:	9f 91       	pop	r25
 84e:	8f 91       	pop	r24
 850:	7f 91       	pop	r23
 852:	6f 91       	pop	r22
 854:	5f 91       	pop	r21
 856:	4f 91       	pop	r20
 858:	3f 91       	pop	r19
 85a:	2f 91       	pop	r18
 85c:	0f 90       	pop	r0
 85e:	0b be       	out	0x3b, r0	; 59
 860:	0f 90       	pop	r0
 862:	0f be       	out	0x3f, r0	; 63
 864:	0f 90       	pop	r0
 866:	1f 90       	pop	r1
 868:	18 95       	reti

0000086a <dequeue>:
 86a:	fc 01       	movw	r30, r24
 86c:	80 81       	ld	r24, Z
 86e:	91 81       	ldd	r25, Z+1	; 0x01
 870:	da 01       	movw	r26, r20
 872:	8d 93       	st	X+, r24
 874:	9c 93       	st	X, r25
 876:	a0 81       	ld	r26, Z
 878:	b1 81       	ldd	r27, Z+1	; 0x01
 87a:	10 97       	sbiw	r26, 0x00	; 0
 87c:	41 f0       	breq	.+16     	; 0x88e <dequeue+0x24>
 87e:	12 96       	adiw	r26, 0x02	; 2
 880:	8d 91       	ld	r24, X+
 882:	9c 91       	ld	r25, X
 884:	13 97       	sbiw	r26, 0x03	; 3
 886:	91 83       	std	Z+1, r25	; 0x01
 888:	80 83       	st	Z, r24
 88a:	89 2b       	or	r24, r25
 88c:	19 f4       	brne	.+6      	; 0x894 <dequeue+0x2a>
 88e:	fb 01       	movw	r30, r22
 890:	11 82       	std	Z+1, r1	; 0x01
 892:	10 82       	st	Z, r1
 894:	08 95       	ret

00000896 <stepper>:


void stepper(){
	if (current_step == 4){
 896:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <current_step>
 89a:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <current_step+0x1>
 89e:	04 97       	sbiw	r24, 0x04	; 4
 8a0:	21 f4       	brne	.+8      	; 0x8aa <stepper+0x14>
		current_step = 0;
 8a2:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <current_step+0x1>
 8a6:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <current_step>
	}
	if (current_step == -1){
 8aa:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <current_step>
 8ae:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <current_step+0x1>
 8b2:	01 96       	adiw	r24, 0x01	; 1
 8b4:	31 f4       	brne	.+12     	; 0x8c2 <stepper+0x2c>
		current_step = 3;
 8b6:	83 e0       	ldi	r24, 0x03	; 3
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <current_step+0x1>
 8be:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <current_step>
	}
	PORTA = steps[current_step];
 8c2:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <current_step>
 8c6:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <current_step+0x1>
 8ca:	ee 0f       	add	r30, r30
 8cc:	ff 1f       	adc	r31, r31
 8ce:	e3 5a       	subi	r30, 0xA3	; 163
 8d0:	fd 4f       	sbci	r31, 0xFD	; 253
 8d2:	80 81       	ld	r24, Z
 8d4:	82 b9       	out	0x02, r24	; 2
	
	current_step += direction;
 8d6:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <direction>
 8da:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <direction+0x1>
 8de:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <current_step>
 8e2:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <current_step+0x1>
 8e6:	82 0f       	add	r24, r18
 8e8:	93 1f       	adc	r25, r19
 8ea:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <current_step+0x1>
 8ee:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <current_step>
	position += direction;
 8f2:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <direction>
 8f6:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <direction+0x1>
 8fa:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <position>
 8fe:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <position+0x1>
 902:	82 0f       	add	r24, r18
 904:	93 1f       	adc	r25, r19
 906:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <position+0x1>
 90a:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <position>
	if (position == 201){
 90e:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <position>
 912:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <position+0x1>
 916:	89 3c       	cpi	r24, 0xC9	; 201
 918:	91 05       	cpc	r25, r1
 91a:	31 f4       	brne	.+12     	; 0x928 <stepper+0x92>
		position = 1;
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <position+0x1>
 924:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <position>
	}
	if (position == 0){
 928:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <position>
 92c:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <position+0x1>
 930:	89 2b       	or	r24, r25
 932:	31 f4       	brne	.+12     	; 0x940 <stepper+0xaa>
		position = 200;
 934:	88 ec       	ldi	r24, 0xC8	; 200
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <position+0x1>
 93c:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <position>
	}
	
	
	if(a_flag == 1){
 940:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <__data_end>
 944:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <__data_end+0x1>
 948:	01 97       	sbiw	r24, 0x01	; 1
 94a:	31 f4       	brne	.+12     	; 0x958 <stepper+0xc2>
		aTimer(a_delay);
 94c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <a_delay>
 950:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <a_delay+0x1>
 954:	c2 cd       	rjmp	.-1148   	; 0x4da <aTimer>
 956:	08 95       	ret
		} else{
		mTimer(20);
 958:	84 e1       	ldi	r24, 0x14	; 20
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	1c cd       	rjmp	.-1480   	; 0x396 <mTimer>
 95e:	08 95       	ret

00000960 <stepper_direction>:
	}
	
	
}

void stepper_direction(int required_pos){
 960:	0f 93       	push	r16
 962:	1f 93       	push	r17
 964:	cf 93       	push	r28
 966:	df 93       	push	r29
	
	a_flag = 1;
 968:	21 e0       	ldi	r18, 0x01	; 1
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	30 93 67 02 	sts	0x0267, r19	; 0x800267 <__data_end+0x1>
 970:	20 93 66 02 	sts	0x0266, r18	; 0x800266 <__data_end>
	
	int distance = required_pos - position;
 974:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <position>
 978:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <position+0x1>
 97c:	ec 01       	movw	r28, r24
 97e:	c2 1b       	sub	r28, r18
 980:	d3 0b       	sbc	r29, r19
	
	if (distance >= 100)
 982:	c4 36       	cpi	r28, 0x64	; 100
 984:	d1 05       	cpc	r29, r1
 986:	14 f0       	brlt	.+4      	; 0x98c <stepper_direction+0x2c>
	distance -= 200;
 988:	c8 5c       	subi	r28, 0xC8	; 200
 98a:	d1 09       	sbc	r29, r1
	
	if (distance < -100)
 98c:	cc 39       	cpi	r28, 0x9C	; 156
 98e:	8f ef       	ldi	r24, 0xFF	; 255
 990:	d8 07       	cpc	r29, r24
 992:	14 f4       	brge	.+4      	; 0x998 <stepper_direction+0x38>
	distance += 200;
 994:	c8 53       	subi	r28, 0x38	; 56
 996:	df 4f       	sbci	r29, 0xFF	; 255
	
	direction = (distance)/ abs(distance);
 998:	8e 01       	movw	r16, r28
 99a:	dd 23       	and	r29, r29
 99c:	24 f4       	brge	.+8      	; 0x9a6 <stepper_direction+0x46>
 99e:	00 27       	eor	r16, r16
 9a0:	11 27       	eor	r17, r17
 9a2:	0c 1b       	sub	r16, r28
 9a4:	1d 0b       	sbc	r17, r29
 9a6:	ce 01       	movw	r24, r28
 9a8:	b8 01       	movw	r22, r16
 9aa:	c4 d1       	rcall	.+904    	; 0xd34 <__divmodhi4>
 9ac:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <direction+0x1>
 9b0:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <direction>
	LCDWriteIntXY(10,1,direction,2);
 9b4:	61 e0       	ldi	r22, 0x01	; 1
 9b6:	8a e0       	ldi	r24, 0x0A	; 10
 9b8:	aa dc       	rcall	.-1708   	; 0x30e <LCDGotoXY>
 9ba:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <direction>
 9be:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <direction+0x1>
 9c2:	62 e0       	ldi	r22, 0x02	; 2
 9c4:	70 e0       	ldi	r23, 0x00	; 0
 9c6:	47 dc       	rcall	.-1906   	; 0x256 <LCDWriteInt>
	
	if (abs(distance) > 4 && (a_delay > 10) ) //accelerating
 9c8:	05 30       	cpi	r16, 0x05	; 5
 9ca:	11 05       	cpc	r17, r1
 9cc:	7c f0       	brlt	.+30     	; 0x9ec <stepper_direction+0x8c>
 9ce:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <a_delay>
 9d2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <a_delay+0x1>
 9d6:	0b 97       	sbiw	r24, 0x0b	; 11
 9d8:	4c f0       	brlt	.+18     	; 0x9ec <stepper_direction+0x8c>
	a_delay -= 3; 
 9da:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <a_delay>
 9de:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <a_delay+0x1>
 9e2:	03 97       	sbiw	r24, 0x03	; 3
 9e4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <a_delay+0x1>
 9e8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <a_delay>
	if (abs(distance) < 8 && (a_delay < 80) ) //braking
 9ec:	27 96       	adiw	r28, 0x07	; 7
 9ee:	2f 97       	sbiw	r28, 0x0f	; 15
 9f0:	80 f4       	brcc	.+32     	; 0xa12 <stepper_direction+0xb2>
 9f2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <a_delay>
 9f6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <a_delay+0x1>
 9fa:	80 35       	cpi	r24, 0x50	; 80
 9fc:	91 05       	cpc	r25, r1
 9fe:	4c f4       	brge	.+18     	; 0xa12 <stepper_direction+0xb2>
	a_delay += 5;
 a00:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <a_delay>
 a04:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <a_delay+0x1>
 a08:	05 96       	adiw	r24, 0x05	; 5
 a0a:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <a_delay+0x1>
 a0e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <a_delay>
	
}
 a12:	df 91       	pop	r29
 a14:	cf 91       	pop	r28
 a16:	1f 91       	pop	r17
 a18:	0f 91       	pop	r16
 a1a:	08 95       	ret

00000a1c <__vector_4>:
	
	//mTimer(20);//debounce
	STATE = 2;
}

ISR(INT3_vect){ //when something is in front of EX
 a1c:	1f 92       	push	r1
 a1e:	0f 92       	push	r0
 a20:	0f b6       	in	r0, 0x3f	; 63
 a22:	0f 92       	push	r0
 a24:	11 24       	eor	r1, r1
 a26:	0b b6       	in	r0, 0x3b	; 59
 a28:	0f 92       	push	r0
 a2a:	2f 93       	push	r18
 a2c:	3f 93       	push	r19
 a2e:	4f 93       	push	r20
 a30:	5f 93       	push	r21
 a32:	6f 93       	push	r22
 a34:	7f 93       	push	r23
 a36:	8f 93       	push	r24
 a38:	9f 93       	push	r25
 a3a:	af 93       	push	r26
 a3c:	bf 93       	push	r27
 a3e:	ef 93       	push	r30
 a40:	ff 93       	push	r31
	mTimer(20); //debounce
 a42:	84 e1       	ldi	r24, 0x14	; 20
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	a7 dc       	rcall	.-1714   	; 0x396 <mTimer>
	//brake for the first element if brake flag not high
	
	//check is current element and next element are same type
		//
	
	if((PIND & 0x08) == 0x00){ //active low, checks if EX triggered
 a48:	4b 99       	sbic	0x09, 3	; 9
 a4a:	de c0       	rjmp	.+444    	; 0xc08 <__vector_4+0x1ec>
		
		
		i--; 
 a4c:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <i>
 a50:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <i+0x1>
 a54:	01 97       	sbiw	r24, 0x01	; 1
 a56:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <i+0x1>
 a5a:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <i>
		
		LCDClear();
 a5e:	60 e0       	ldi	r22, 0x00	; 0
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	90 db       	rcall	.-2272   	; 0x184 <LCDByte>
		LCDWriteStringXY(0,0,"Counter=");
 a64:	60 e0       	ldi	r22, 0x00	; 0
 a66:	80 e0       	ldi	r24, 0x00	; 0
 a68:	52 dc       	rcall	.-1884   	; 0x30e <LCDGotoXY>
 a6a:	82 e3       	ldi	r24, 0x32	; 50
 a6c:	92 e0       	ldi	r25, 0x02	; 2
 a6e:	e4 db       	rcall	.-2104   	; 0x238 <LCDWriteString>
		LCDWriteIntXY(9,0,i,5);
 a70:	60 e0       	ldi	r22, 0x00	; 0
 a72:	89 e0       	ldi	r24, 0x09	; 9
 a74:	4c dc       	rcall	.-1896   	; 0x30e <LCDGotoXY>
 a76:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <i>
 a7a:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <i+0x1>
 a7e:	65 e0       	ldi	r22, 0x05	; 5
 a80:	70 e0       	ldi	r23, 0x00	; 0
 a82:	e9 db       	rcall	.-2094   	; 0x256 <LCDWriteInt>
 a84:	4a e7       	ldi	r20, 0x7A	; 122
		
		//int mat = firstValue(&head);	
		dequeue(&head, &tail, &rtnLink); /* remove the item at the head of the list */
 a86:	52 e0       	ldi	r21, 0x02	; 2
 a88:	6c e7       	ldi	r22, 0x7C	; 124
 a8a:	72 e0       	ldi	r23, 0x02	; 2
 a8c:	8e e7       	ldi	r24, 0x7E	; 126
 a8e:	92 e0       	ldi	r25, 0x02	; 2
 a90:	ec de       	rcall	.-552    	; 0x86a <dequeue>
 a92:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <rtnLink>
		
		if(rtnLink->e.material == 1){
 a96:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <rtnLink+0x1>
 a9a:	80 81       	ld	r24, Z
 a9c:	91 81       	ldd	r25, Z+1	; 0x01
 a9e:	01 97       	sbiw	r24, 0x01	; 1
 aa0:	f9 f4       	brne	.+62     	; 0xae0 <__vector_4+0xc4>
 aa2:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <position>
			if(position != alum_pos){
 aa6:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <position+0x1>
 aaa:	c2 97       	sbiw	r24, 0x32	; 50
 aac:	09 f4       	brne	.+2      	; 0xab0 <__vector_4+0x94>
 aae:	6c c0       	rjmp	.+216    	; 0xb88 <__vector_4+0x16c>
void brake(){
	PORTB = 0b00110000;
}

void CW(){
	PORTB = 0b00111000;
 ab0:	88 e3       	ldi	r24, 0x38	; 56
 ab2:	85 b9       	out	0x05, r24	; 5
		dequeue(&head, &tail, &rtnLink); /* remove the item at the head of the list */
		
		if(rtnLink->e.material == 1){
			if(position != alum_pos){
				CW(); //brake
				mTimer(20);
 ab4:	84 e1       	ldi	r24, 0x14	; 20
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	6e dc       	rcall	.-1828   	; 0x396 <mTimer>
 aba:	15 b8       	out	0x05, r1	; 5
				PORTB = 0x00; // turn belt off
 abc:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <position>
			while (position != alum_pos){
 ac0:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <position+0x1>
 ac4:	c2 97       	sbiw	r24, 0x32	; 50
				stepper_direction(alum_pos); //moving the stepper motor to the indicated position
 ac6:	51 f0       	breq	.+20     	; 0xadc <__vector_4+0xc0>
 ac8:	82 e3       	ldi	r24, 0x32	; 50
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	49 df       	rcall	.-366    	; 0x960 <stepper_direction>
				stepper();
 ace:	e3 de       	rcall	.-570    	; 0x896 <stepper>
 ad0:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <position>
		if(rtnLink->e.material == 1){
			if(position != alum_pos){
				CW(); //brake
				mTimer(20);
				PORTB = 0x00; // turn belt off
			while (position != alum_pos){
 ad4:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <position+0x1>
 ad8:	c2 97       	sbiw	r24, 0x32	; 50
 ada:	b1 f7       	brne	.-20     	; 0xac8 <__vector_4+0xac>
 adc:	80 e7       	ldi	r24, 0x70	; 112
	// use 0x50 for 50%
	//use 0xA0 for 100% of 50%
}

void CCW(){
	PORTB = 0b01110000;
 ade:	85 b9       	out	0x05, r24	; 5
 ae0:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <rtnLink>
				stepper();
			}	
			CCW();
			}
		}
		if(rtnLink->e.material == 2){
 ae4:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <rtnLink+0x1>
 ae8:	80 81       	ld	r24, Z
 aea:	91 81       	ldd	r25, Z+1	; 0x01
 aec:	02 97       	sbiw	r24, 0x02	; 2
 aee:	11 f5       	brne	.+68     	; 0xb34 <__vector_4+0x118>
 af0:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <position>
			if(position != steel_pos){
 af4:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <position+0x1>
 af8:	86 39       	cpi	r24, 0x96	; 150
 afa:	91 05       	cpc	r25, r1
 afc:	09 f4       	brne	.+2      	; 0xb00 <__vector_4+0xe4>
 afe:	6d c0       	rjmp	.+218    	; 0xbda <__vector_4+0x1be>
void brake(){
	PORTB = 0b00110000;
}

void CW(){
	PORTB = 0b00111000;
 b00:	88 e3       	ldi	r24, 0x38	; 56
 b02:	85 b9       	out	0x05, r24	; 5
			}
		}
		if(rtnLink->e.material == 2){
			if(position != steel_pos){
				CW(); //brake
				mTimer(20);
 b04:	84 e1       	ldi	r24, 0x14	; 20
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	46 dc       	rcall	.-1908   	; 0x396 <mTimer>
				PORTB = 0x00; // turn belt off
			while (position != steel_pos){ //moving the stepper motor to the indicated position
 b0a:	15 b8       	out	0x05, r1	; 5
 b0c:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <position>
 b10:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <position+0x1>
 b14:	86 39       	cpi	r24, 0x96	; 150
 b16:	91 05       	cpc	r25, r1
				stepper_direction(steel_pos);
 b18:	59 f0       	breq	.+22     	; 0xb30 <__vector_4+0x114>
 b1a:	86 e9       	ldi	r24, 0x96	; 150
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	20 df       	rcall	.-448    	; 0x960 <stepper_direction>
				stepper();
 b20:	ba de       	rcall	.-652    	; 0x896 <stepper>
 b22:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <position>
		if(rtnLink->e.material == 2){
			if(position != steel_pos){
				CW(); //brake
				mTimer(20);
				PORTB = 0x00; // turn belt off
			while (position != steel_pos){ //moving the stepper motor to the indicated position
 b26:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <position+0x1>
 b2a:	86 39       	cpi	r24, 0x96	; 150
 b2c:	91 05       	cpc	r25, r1
 b2e:	a9 f7       	brne	.-22     	; 0xb1a <__vector_4+0xfe>
 b30:	80 e7       	ldi	r24, 0x70	; 112
	// use 0x50 for 50%
	//use 0xA0 for 100% of 50%
}

void CCW(){
	PORTB = 0b01110000;
 b32:	85 b9       	out	0x05, r24	; 5
 b34:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <rtnLink>
				stepper();
			}
			CCW();
			}
		}
		if(rtnLink->e.material == 3){
 b38:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <rtnLink+0x1>
 b3c:	80 81       	ld	r24, Z
 b3e:	91 81       	ldd	r25, Z+1	; 0x01
 b40:	03 97       	sbiw	r24, 0x03	; 3
 b42:	11 f5       	brne	.+68     	; 0xb88 <__vector_4+0x16c>
			if(position != white_pos){
 b44:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <position>
 b48:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <position+0x1>
 b4c:	84 36       	cpi	r24, 0x64	; 100
 b4e:	91 05       	cpc	r25, r1
 b50:	09 f4       	brne	.+2      	; 0xb54 <__vector_4+0x138>
 b52:	43 c0       	rjmp	.+134    	; 0xbda <__vector_4+0x1be>
void brake(){
	PORTB = 0b00110000;
}

void CW(){
	PORTB = 0b00111000;
 b54:	88 e3       	ldi	r24, 0x38	; 56
 b56:	85 b9       	out	0x05, r24	; 5
			}
		}
		if(rtnLink->e.material == 3){
			if(position != white_pos){
				CW(); //brake
				mTimer(20);
 b58:	84 e1       	ldi	r24, 0x14	; 20
 b5a:	90 e0       	ldi	r25, 0x00	; 0
				PORTB = 0x00; // turn belt off
 b5c:	1c dc       	rcall	.-1992   	; 0x396 <mTimer>
			while (position != white_pos){ //moving the stepper motor to the indicated position
 b5e:	15 b8       	out	0x05, r1	; 5
 b60:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <position>
 b64:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <position+0x1>
 b68:	84 36       	cpi	r24, 0x64	; 100
 b6a:	91 05       	cpc	r25, r1
				stepper_direction(white_pos);
 b6c:	59 f0       	breq	.+22     	; 0xb84 <__vector_4+0x168>
 b6e:	84 e6       	ldi	r24, 0x64	; 100
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	f6 de       	rcall	.-532    	; 0x960 <stepper_direction>
				stepper();
 b74:	90 de       	rcall	.-736    	; 0x896 <stepper>
 b76:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <position>
		if(rtnLink->e.material == 3){
			if(position != white_pos){
				CW(); //brake
				mTimer(20);
				PORTB = 0x00; // turn belt off
			while (position != white_pos){ //moving the stepper motor to the indicated position
 b7a:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <position+0x1>
 b7e:	84 36       	cpi	r24, 0x64	; 100
 b80:	91 05       	cpc	r25, r1
 b82:	a9 f7       	brne	.-22     	; 0xb6e <__vector_4+0x152>
 b84:	80 e7       	ldi	r24, 0x70	; 112
	// use 0x50 for 50%
	//use 0xA0 for 100% of 50%
}

void CCW(){
	PORTB = 0b01110000;
 b86:	85 b9       	out	0x05, r24	; 5
 b88:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <rtnLink>
				stepper();
			}
			CCW();
			}
		}
		if(rtnLink->e.material == 4){
 b8c:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <rtnLink+0x1>
 b90:	80 81       	ld	r24, Z
 b92:	91 81       	ldd	r25, Z+1	; 0x01
 b94:	04 97       	sbiw	r24, 0x04	; 4
 b96:	09 f5       	brne	.+66     	; 0xbda <__vector_4+0x1be>
			if(position != black_pos){
 b98:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <position>
 b9c:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <position+0x1>
 ba0:	88 3c       	cpi	r24, 0xC8	; 200
 ba2:	91 05       	cpc	r25, r1
void brake(){
	PORTB = 0b00110000;
}

void CW(){
	PORTB = 0b00111000;
 ba4:	d1 f0       	breq	.+52     	; 0xbda <__vector_4+0x1be>
			}
		}
		if(rtnLink->e.material == 4){
			if(position != black_pos){
				CW(); //brake
				mTimer(20);
 ba6:	88 e3       	ldi	r24, 0x38	; 56
 ba8:	85 b9       	out	0x05, r24	; 5
 baa:	84 e1       	ldi	r24, 0x14	; 20
 bac:	90 e0       	ldi	r25, 0x00	; 0
				PORTB = 0x00; // turn belt off
 bae:	f3 db       	rcall	.-2074   	; 0x396 <mTimer>
			while (position != black_pos){ //moving the stepper motor to the indicated position
 bb0:	15 b8       	out	0x05, r1	; 5
 bb2:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <position>
 bb6:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <position+0x1>
 bba:	88 3c       	cpi	r24, 0xC8	; 200
				stepper_direction(black_pos);
 bbc:	91 05       	cpc	r25, r1
 bbe:	59 f0       	breq	.+22     	; 0xbd6 <__vector_4+0x1ba>
 bc0:	88 ec       	ldi	r24, 0xC8	; 200
 bc2:	90 e0       	ldi	r25, 0x00	; 0
				stepper();
 bc4:	cd de       	rcall	.-614    	; 0x960 <stepper_direction>
 bc6:	67 de       	rcall	.-818    	; 0x896 <stepper>
		if(rtnLink->e.material == 4){
			if(position != black_pos){
				CW(); //brake
				mTimer(20);
				PORTB = 0x00; // turn belt off
			while (position != black_pos){ //moving the stepper motor to the indicated position
 bc8:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <position>
 bcc:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <position+0x1>
 bd0:	88 3c       	cpi	r24, 0xC8	; 200
 bd2:	91 05       	cpc	r25, r1
	// use 0x50 for 50%
	//use 0xA0 for 100% of 50%
}

void CCW(){
	PORTB = 0b01110000;
 bd4:	a9 f7       	brne	.-22     	; 0xbc0 <__vector_4+0x1a4>
 bd6:	80 e7       	ldi	r24, 0x70	; 112
			}
			CCW();
			}
		}
		
		LCDWriteIntXY(5,1,rtnLink->e.material,1);
 bd8:	85 b9       	out	0x05, r24	; 5
 bda:	61 e0       	ldi	r22, 0x01	; 1
 bdc:	85 e0       	ldi	r24, 0x05	; 5
 bde:	97 db       	rcall	.-2258   	; 0x30e <LCDGotoXY>
 be0:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <rtnLink>
 be4:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <rtnLink+0x1>
 be8:	61 e0       	ldi	r22, 0x01	; 1
 bea:	70 e0       	ldi	r23, 0x00	; 0
 bec:	80 81       	ld	r24, Z
 bee:	91 81       	ldd	r25, Z+1	; 0x01
 bf0:	32 db       	rcall	.-2460   	; 0x256 <LCDWriteInt>
		free(rtnLink);	
 bf2:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <rtnLink>
 bf6:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <rtnLink+0x1>
 bfa:	5b d1       	rcall	.+694    	; 0xeb2 <free>
 bfc:	82 e3       	ldi	r24, 0x32	; 50
		mTimer(50);
 bfe:	90 e0       	ldi	r25, 0x00	; 0
 c00:	ca db       	rcall	.-2156   	; 0x396 <mTimer>
 c02:	83 e0       	ldi	r24, 0x03	; 3
 c04:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <STATE>
		STATE = 3;	
 c08:	ff 91       	pop	r31
 c0a:	ef 91       	pop	r30
	}
	//while((PIND & 0x08) == 0x00){ //wait until switch is released		
	//}
	//mTimer(20);//debounce
	
}
 c0c:	bf 91       	pop	r27
 c0e:	af 91       	pop	r26
 c10:	9f 91       	pop	r25
 c12:	8f 91       	pop	r24
 c14:	7f 91       	pop	r23
 c16:	6f 91       	pop	r22
 c18:	5f 91       	pop	r21
 c1a:	4f 91       	pop	r20
 c1c:	3f 91       	pop	r19
 c1e:	2f 91       	pop	r18
 c20:	0f 90       	pop	r0
 c22:	0b be       	out	0x3b, r0	; 59
 c24:	0f 90       	pop	r0
 c26:	0f be       	out	0x3f, r0	; 63
 c28:	0f 90       	pop	r0
 c2a:	1f 90       	pop	r1
 c2c:	18 95       	reti

00000c2e <initialize>:
 c2e:	e1 e6       	ldi	r30, 0x61	; 97
 c30:	f0 e0       	ldi	r31, 0x00	; 0
/* returns the size of the queue*/


void initialize(){
	//Timer Code
	CLKPR = 0x80;
 c32:	80 e8       	ldi	r24, 0x80	; 128
 c34:	80 83       	st	Z, r24
	CLKPR = 0x01;		//  sets system clock to 8MHz
 c36:	81 e0       	ldi	r24, 0x01	; 1
 c38:	80 83       	st	Z, r24
	TCCR1B |= _BV(CS11);
 c3a:	e1 e8       	ldi	r30, 0x81	; 129
 c3c:	f0 e0       	ldi	r31, 0x00	; 0
 c3e:	80 81       	ld	r24, Z
 c40:	82 60       	ori	r24, 0x02	; 2
 c42:	80 83       	st	Z, r24
	
	//Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
 c44:	83 e0       	ldi	r24, 0x03	; 3
 c46:	c9 da       	rcall	.-2670   	; 0x1da <InitLCD>
	
	LCDClear();
 c48:	60 e0       	ldi	r22, 0x00	; 0
 c4a:	81 e0       	ldi	r24, 0x01	; 1
 c4c:	9b da       	rcall	.-2762   	; 0x184 <LCDByte>
	LCDWriteStringXY(0,0,"Counter=00000");
 c4e:	60 e0       	ldi	r22, 0x00	; 0
 c50:	80 e0       	ldi	r24, 0x00	; 0
 c52:	5d db       	rcall	.-2374   	; 0x30e <LCDGotoXY>
 c54:	85 e4       	ldi	r24, 0x45	; 69
 c56:	92 e0       	ldi	r25, 0x02	; 2
 c58:	ef da       	rcall	.-2594   	; 0x238 <LCDWriteString>

	STATE = 0;
 c5a:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <STATE>
		
	rtnLink = NULL;
 c5e:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <rtnLink+0x1>
 c62:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <rtnLink>
	newLink = NULL;
 c66:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <newLink+0x1>
 c6a:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <newLink>
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 c6e:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <head+0x1>
 c72:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <head>
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 c76:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <tail+0x1>
 c7a:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <tail>
	newLink = NULL;
	
	setup(&head, &tail); //set up linked list
	
	//Setting inputs and outputs
	DDRD = 0x00;		// use PORTD for interrupts (pins 18-21)
 c7e:	1a b8       	out	0x0a, r1	; 10
	DDRC = 0xFF;		// output for LCD
 c80:	8f ef       	ldi	r24, 0xFF	; 255
 c82:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF;		// output for DC motor
 c84:	84 b9       	out	0x04, r24	; 4
	DDRL = 0xFF;		// output for LED display
 c86:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	DDRA = 0b00111111;	// output for stepper motor
 c8a:	8f e3       	ldi	r24, 0x3F	; 63
 c8c:	81 b9       	out	0x01, r24	; 1

	cli();		// Disables all interrupts
 c8e:	f8 94       	cli
	
	//set up interrupts
	
	EIMSK |= _BV(INT0); //enable INT0
 c90:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= _BV(ISC01) | _BV(ISC00); //rising edge interrupt
 c92:	e9 e6       	ldi	r30, 0x69	; 105
 c94:	f0 e0       	ldi	r31, 0x00	; 0
 c96:	80 81       	ld	r24, Z
 c98:	83 60       	ori	r24, 0x03	; 3
 c9a:	80 83       	st	Z, r24
	
	EIMSK |= _BV(INT1); //enable INT1
 c9c:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= _BV(ISC11);  //falling edge interrupt
 c9e:	80 81       	ld	r24, Z
 ca0:	88 60       	ori	r24, 0x08	; 8
 ca2:	80 83       	st	Z, r24
	
	EIMSK |= _BV(INT2); //enable INT2
 ca4:	ea 9a       	sbi	0x1d, 2	; 29
	EICRA |= _BV(ISC21) | _BV(ISC20); //rising edge interrupt
 ca6:	80 81       	ld	r24, Z
 ca8:	80 63       	ori	r24, 0x30	; 48
 caa:	80 83       	st	Z, r24
	
	EIMSK |= _BV(INT3); //enable INT3
 cac:	eb 9a       	sbi	0x1d, 3	; 29
	EICRA |= _BV(ISC31); //falling edge interrupt
 cae:	80 81       	ld	r24, Z
 cb0:	80 68       	ori	r24, 0x80	; 128
 cb2:	80 83       	st	Z, r24
	
	ADCSRA |= _BV(ADEN) | _BV(ADIE);   // enable ADC and interrupt of ADC
 cb4:	ea e7       	ldi	r30, 0x7A	; 122
 cb6:	f0 e0       	ldi	r31, 0x00	; 0
 cb8:	80 81       	ld	r24, Z
 cba:	88 68       	ori	r24, 0x88	; 136
 cbc:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADPS2) | _BV(ADPS0);//  //prescale by 1/32
 cbe:	80 81       	ld	r24, Z
 cc0:	85 60       	ori	r24, 0x05	; 5
 cc2:	80 83       	st	Z, r24
	ADMUX |=_BV(REFS0);  // sets voltage reference selection 
 cc4:	ec e7       	ldi	r30, 0x7C	; 124
 cc6:	f0 e0       	ldi	r31, 0x00	; 0
 cc8:	80 81       	ld	r24, Z
 cca:	80 64       	ori	r24, 0x40	; 64
 ccc:	80 83       	st	Z, r24

	// See page 112 - EIFR External Interrupt Flags...notice how they reset on their own in 'C'...not in assembly
	//EIMSK |= 0x0C;

	// Enable all interrupts
	sei();	// Note this sets the Global Enable for all interrupts
 cce:	78 94       	sei
 cd0:	08 95       	ret

00000cd2 <main>:
element eTest;		/* A variable to hold the aggregate data type known as element */


int main(int argc, char *argv[]){
	
	initialize(); //initializes LCD, interrupts
 cd2:	ad df       	rcall	.-166    	; 0xc2e <initialize>

	PWM(); //initialize PWM 
 cd4:	3c dc       	rcall	.-1928   	; 0x54e <PWM>
 cd6:	07 9b       	sbis	0x00, 7	; 0
	
	while ((PINA & 0b10000000) != 0x00){ //homing the stepper motor to the black position
 cd8:	03 c0       	rjmp	.+6      	; 0xce0 <main+0xe>
		stepper();
 cda:	dd dd       	rcall	.-1094   	; 0x896 <stepper>
 cdc:	07 99       	sbic	0x00, 7	; 0
	
	initialize(); //initializes LCD, interrupts

	PWM(); //initialize PWM 
	
	while ((PINA & 0b10000000) != 0x00){ //homing the stepper motor to the black position
 cde:	fd cf       	rjmp	.-6      	; 0xcda <main+0x8>
 ce0:	88 ec       	ldi	r24, 0xC8	; 200
		stepper();
	}
	position = 200; //setting the home position of the stepper after homing
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <position+0x1>
 ce8:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <position>
	
	LCDClear();
 cec:	60 e0       	ldi	r22, 0x00	; 0
 cee:	81 e0       	ldi	r24, 0x01	; 1
 cf0:	49 da       	rcall	.-2926   	; 0x184 <LCDByte>
	LCDWriteStringXY(0,0,"i hOmE :)");
 cf2:	60 e0       	ldi	r22, 0x00	; 0
 cf4:	80 e0       	ldi	r24, 0x00	; 0
 cf6:	0b db       	rcall	.-2538   	; 0x30e <LCDGotoXY>
 cf8:	83 e5       	ldi	r24, 0x53	; 83
 cfa:	92 e0       	ldi	r25, 0x02	; 2
 cfc:	9d da       	rcall	.-2758   	; 0x238 <LCDWriteString>
 cfe:	80 e7       	ldi	r24, 0x70	; 112
	// use 0x50 for 50%
	//use 0xA0 for 100% of 50%
}

void CCW(){
	PORTB = 0b01110000;
 d00:	85 b9       	out	0x05, r24	; 5
 d02:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <STATE>

	// POLLING STATE
	POLLING_STAGE:
	//PORTC |= 0xF0;	// Indicates this state is active
	
	switch(STATE){
 d06:	82 30       	cpi	r24, 0x02	; 2
 d08:	61 f0       	breq	.+24     	; 0xd22 <main+0x50>
 d0a:	18 f4       	brcc	.+6      	; 0xd12 <main+0x40>
 d0c:	81 30       	cpi	r24, 0x01	; 1
 d0e:	31 f0       	breq	.+12     	; 0xd1c <main+0x4a>
 d10:	f8 cf       	rjmp	.-16     	; 0xd02 <main+0x30>
 d12:	83 30       	cpi	r24, 0x03	; 3
 d14:	49 f0       	breq	.+18     	; 0xd28 <main+0x56>
 d16:	85 30       	cpi	r24, 0x05	; 5
 d18:	51 f0       	breq	.+20     	; 0xd2e <main+0x5c>
 d1a:	f3 cf       	rjmp	.-26     	; 0xd02 <main+0x30>
 d1c:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <STATE>

	MAGNETIC_STAGE:
	// Do whatever is necessary HERE
	//PORTC = 0x01; // Just output pretty lights know you made it here
	//Reset the state variable
	STATE = 0;
 d20:	f0 cf       	rjmp	.-32     	; 0xd02 <main+0x30>
	goto POLLING_STAGE;
 d22:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <STATE>

	REFLECTIVE_STAGE:
	
	//PORTC = 0x04; // Just output pretty lights know you made it here
	//Reset the state variable
	STATE = 0;
 d26:	ed cf       	rjmp	.-38     	; 0xd02 <main+0x30>
	goto POLLING_STAGE;
 d28:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <STATE>
	
	BUCKET_STAGE:
	// Do whatever is necessary HERE
	//PORTC = 0x08;
	//Reset the state variable
	STATE = 0;
 d2c:	ea cf       	rjmp	.-44     	; 0xd02 <main+0x30>
	goto POLLING_STAGE;
 d2e:	80 e0       	ldi	r24, 0x00	; 0
	// The closing STATE ... how would you get here?
	//PORTC = 0xF0;	// Indicates this state is active
	// Stop everything here...'MAKE SAFE'
	return(0);

}
 d30:	90 e0       	ldi	r25, 0x00	; 0
 d32:	08 95       	ret

00000d34 <__divmodhi4>:
 d34:	97 fb       	bst	r25, 7
 d36:	07 2e       	mov	r0, r23
 d38:	16 f4       	brtc	.+4      	; 0xd3e <__divmodhi4+0xa>
 d3a:	00 94       	com	r0
 d3c:	06 d0       	rcall	.+12     	; 0xd4a <__divmodhi4_neg1>
 d3e:	77 fd       	sbrc	r23, 7
 d40:	08 d0       	rcall	.+16     	; 0xd52 <__divmodhi4_neg2>
 d42:	0b d0       	rcall	.+22     	; 0xd5a <__udivmodhi4>
 d44:	07 fc       	sbrc	r0, 7
 d46:	05 d0       	rcall	.+10     	; 0xd52 <__divmodhi4_neg2>
 d48:	3e f4       	brtc	.+14     	; 0xd58 <__divmodhi4_exit>

00000d4a <__divmodhi4_neg1>:
 d4a:	90 95       	com	r25
 d4c:	81 95       	neg	r24
 d4e:	9f 4f       	sbci	r25, 0xFF	; 255
 d50:	08 95       	ret

00000d52 <__divmodhi4_neg2>:
 d52:	70 95       	com	r23
 d54:	61 95       	neg	r22
 d56:	7f 4f       	sbci	r23, 0xFF	; 255

00000d58 <__divmodhi4_exit>:
 d58:	08 95       	ret

00000d5a <__udivmodhi4>:
 d5a:	aa 1b       	sub	r26, r26
 d5c:	bb 1b       	sub	r27, r27
 d5e:	51 e1       	ldi	r21, 0x11	; 17
 d60:	07 c0       	rjmp	.+14     	; 0xd70 <__udivmodhi4_ep>

00000d62 <__udivmodhi4_loop>:
 d62:	aa 1f       	adc	r26, r26
 d64:	bb 1f       	adc	r27, r27
 d66:	a6 17       	cp	r26, r22
 d68:	b7 07       	cpc	r27, r23
 d6a:	10 f0       	brcs	.+4      	; 0xd70 <__udivmodhi4_ep>
 d6c:	a6 1b       	sub	r26, r22
 d6e:	b7 0b       	sbc	r27, r23

00000d70 <__udivmodhi4_ep>:
 d70:	88 1f       	adc	r24, r24
 d72:	99 1f       	adc	r25, r25
 d74:	5a 95       	dec	r21
 d76:	a9 f7       	brne	.-22     	; 0xd62 <__udivmodhi4_loop>
 d78:	80 95       	com	r24
 d7a:	90 95       	com	r25
 d7c:	bc 01       	movw	r22, r24
 d7e:	cd 01       	movw	r24, r26
 d80:	08 95       	ret

00000d82 <malloc>:
 d82:	0f 93       	push	r16
 d84:	1f 93       	push	r17
 d86:	cf 93       	push	r28
 d88:	df 93       	push	r29
 d8a:	82 30       	cpi	r24, 0x02	; 2
 d8c:	91 05       	cpc	r25, r1
 d8e:	10 f4       	brcc	.+4      	; 0xd94 <malloc+0x12>
 d90:	82 e0       	ldi	r24, 0x02	; 2
 d92:	90 e0       	ldi	r25, 0x00	; 0
 d94:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <__flp>
 d98:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <__flp+0x1>
 d9c:	20 e0       	ldi	r18, 0x00	; 0
 d9e:	30 e0       	ldi	r19, 0x00	; 0
 da0:	a0 e0       	ldi	r26, 0x00	; 0
 da2:	b0 e0       	ldi	r27, 0x00	; 0
 da4:	30 97       	sbiw	r30, 0x00	; 0
 da6:	19 f1       	breq	.+70     	; 0xdee <malloc+0x6c>
 da8:	40 81       	ld	r20, Z
 daa:	51 81       	ldd	r21, Z+1	; 0x01
 dac:	02 81       	ldd	r16, Z+2	; 0x02
 dae:	13 81       	ldd	r17, Z+3	; 0x03
 db0:	48 17       	cp	r20, r24
 db2:	59 07       	cpc	r21, r25
 db4:	c8 f0       	brcs	.+50     	; 0xde8 <malloc+0x66>
 db6:	84 17       	cp	r24, r20
 db8:	95 07       	cpc	r25, r21
 dba:	69 f4       	brne	.+26     	; 0xdd6 <malloc+0x54>
 dbc:	10 97       	sbiw	r26, 0x00	; 0
 dbe:	31 f0       	breq	.+12     	; 0xdcc <malloc+0x4a>
 dc0:	12 96       	adiw	r26, 0x02	; 2
 dc2:	0c 93       	st	X, r16
 dc4:	12 97       	sbiw	r26, 0x02	; 2
 dc6:	13 96       	adiw	r26, 0x03	; 3
 dc8:	1c 93       	st	X, r17
 dca:	27 c0       	rjmp	.+78     	; 0xe1a <malloc+0x98>
 dcc:	00 93 89 02 	sts	0x0289, r16	; 0x800289 <__flp>
 dd0:	10 93 8a 02 	sts	0x028A, r17	; 0x80028a <__flp+0x1>
 dd4:	22 c0       	rjmp	.+68     	; 0xe1a <malloc+0x98>
 dd6:	21 15       	cp	r18, r1
 dd8:	31 05       	cpc	r19, r1
 dda:	19 f0       	breq	.+6      	; 0xde2 <malloc+0x60>
 ddc:	42 17       	cp	r20, r18
 dde:	53 07       	cpc	r21, r19
 de0:	18 f4       	brcc	.+6      	; 0xde8 <malloc+0x66>
 de2:	9a 01       	movw	r18, r20
 de4:	bd 01       	movw	r22, r26
 de6:	ef 01       	movw	r28, r30
 de8:	df 01       	movw	r26, r30
 dea:	f8 01       	movw	r30, r16
 dec:	db cf       	rjmp	.-74     	; 0xda4 <malloc+0x22>
 dee:	21 15       	cp	r18, r1
 df0:	31 05       	cpc	r19, r1
 df2:	f9 f0       	breq	.+62     	; 0xe32 <malloc+0xb0>
 df4:	28 1b       	sub	r18, r24
 df6:	39 0b       	sbc	r19, r25
 df8:	24 30       	cpi	r18, 0x04	; 4
 dfa:	31 05       	cpc	r19, r1
 dfc:	80 f4       	brcc	.+32     	; 0xe1e <malloc+0x9c>
 dfe:	8a 81       	ldd	r24, Y+2	; 0x02
 e00:	9b 81       	ldd	r25, Y+3	; 0x03
 e02:	61 15       	cp	r22, r1
 e04:	71 05       	cpc	r23, r1
 e06:	21 f0       	breq	.+8      	; 0xe10 <malloc+0x8e>
 e08:	fb 01       	movw	r30, r22
 e0a:	93 83       	std	Z+3, r25	; 0x03
 e0c:	82 83       	std	Z+2, r24	; 0x02
 e0e:	04 c0       	rjmp	.+8      	; 0xe18 <malloc+0x96>
 e10:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <__flp+0x1>
 e14:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <__flp>
 e18:	fe 01       	movw	r30, r28
 e1a:	32 96       	adiw	r30, 0x02	; 2
 e1c:	44 c0       	rjmp	.+136    	; 0xea6 <malloc+0x124>
 e1e:	fe 01       	movw	r30, r28
 e20:	e2 0f       	add	r30, r18
 e22:	f3 1f       	adc	r31, r19
 e24:	81 93       	st	Z+, r24
 e26:	91 93       	st	Z+, r25
 e28:	22 50       	subi	r18, 0x02	; 2
 e2a:	31 09       	sbc	r19, r1
 e2c:	39 83       	std	Y+1, r19	; 0x01
 e2e:	28 83       	st	Y, r18
 e30:	3a c0       	rjmp	.+116    	; 0xea6 <malloc+0x124>
 e32:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <__brkval>
 e36:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <__brkval+0x1>
 e3a:	23 2b       	or	r18, r19
 e3c:	41 f4       	brne	.+16     	; 0xe4e <malloc+0xcc>
 e3e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 e42:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 e46:	30 93 88 02 	sts	0x0288, r19	; 0x800288 <__brkval+0x1>
 e4a:	20 93 87 02 	sts	0x0287, r18	; 0x800287 <__brkval>
 e4e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 e52:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 e56:	21 15       	cp	r18, r1
 e58:	31 05       	cpc	r19, r1
 e5a:	41 f4       	brne	.+16     	; 0xe6c <malloc+0xea>
 e5c:	2d b7       	in	r18, 0x3d	; 61
 e5e:	3e b7       	in	r19, 0x3e	; 62
 e60:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 e64:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 e68:	24 1b       	sub	r18, r20
 e6a:	35 0b       	sbc	r19, r21
 e6c:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <__brkval>
 e70:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <__brkval+0x1>
 e74:	e2 17       	cp	r30, r18
 e76:	f3 07       	cpc	r31, r19
 e78:	a0 f4       	brcc	.+40     	; 0xea2 <malloc+0x120>
 e7a:	2e 1b       	sub	r18, r30
 e7c:	3f 0b       	sbc	r19, r31
 e7e:	28 17       	cp	r18, r24
 e80:	39 07       	cpc	r19, r25
 e82:	78 f0       	brcs	.+30     	; 0xea2 <malloc+0x120>
 e84:	ac 01       	movw	r20, r24
 e86:	4e 5f       	subi	r20, 0xFE	; 254
 e88:	5f 4f       	sbci	r21, 0xFF	; 255
 e8a:	24 17       	cp	r18, r20
 e8c:	35 07       	cpc	r19, r21
 e8e:	48 f0       	brcs	.+18     	; 0xea2 <malloc+0x120>
 e90:	4e 0f       	add	r20, r30
 e92:	5f 1f       	adc	r21, r31
 e94:	50 93 88 02 	sts	0x0288, r21	; 0x800288 <__brkval+0x1>
 e98:	40 93 87 02 	sts	0x0287, r20	; 0x800287 <__brkval>
 e9c:	81 93       	st	Z+, r24
 e9e:	91 93       	st	Z+, r25
 ea0:	02 c0       	rjmp	.+4      	; 0xea6 <malloc+0x124>
 ea2:	e0 e0       	ldi	r30, 0x00	; 0
 ea4:	f0 e0       	ldi	r31, 0x00	; 0
 ea6:	cf 01       	movw	r24, r30
 ea8:	df 91       	pop	r29
 eaa:	cf 91       	pop	r28
 eac:	1f 91       	pop	r17
 eae:	0f 91       	pop	r16
 eb0:	08 95       	ret

00000eb2 <free>:
 eb2:	cf 93       	push	r28
 eb4:	df 93       	push	r29
 eb6:	00 97       	sbiw	r24, 0x00	; 0
 eb8:	09 f4       	brne	.+2      	; 0xebc <free+0xa>
 eba:	81 c0       	rjmp	.+258    	; 0xfbe <free+0x10c>
 ebc:	fc 01       	movw	r30, r24
 ebe:	32 97       	sbiw	r30, 0x02	; 2
 ec0:	13 82       	std	Z+3, r1	; 0x03
 ec2:	12 82       	std	Z+2, r1	; 0x02
 ec4:	a0 91 89 02 	lds	r26, 0x0289	; 0x800289 <__flp>
 ec8:	b0 91 8a 02 	lds	r27, 0x028A	; 0x80028a <__flp+0x1>
 ecc:	10 97       	sbiw	r26, 0x00	; 0
 ece:	81 f4       	brne	.+32     	; 0xef0 <free+0x3e>
 ed0:	20 81       	ld	r18, Z
 ed2:	31 81       	ldd	r19, Z+1	; 0x01
 ed4:	82 0f       	add	r24, r18
 ed6:	93 1f       	adc	r25, r19
 ed8:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <__brkval>
 edc:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <__brkval+0x1>
 ee0:	28 17       	cp	r18, r24
 ee2:	39 07       	cpc	r19, r25
 ee4:	51 f5       	brne	.+84     	; 0xf3a <free+0x88>
 ee6:	f0 93 88 02 	sts	0x0288, r31	; 0x800288 <__brkval+0x1>
 eea:	e0 93 87 02 	sts	0x0287, r30	; 0x800287 <__brkval>
 eee:	67 c0       	rjmp	.+206    	; 0xfbe <free+0x10c>
 ef0:	ed 01       	movw	r28, r26
 ef2:	20 e0       	ldi	r18, 0x00	; 0
 ef4:	30 e0       	ldi	r19, 0x00	; 0
 ef6:	ce 17       	cp	r28, r30
 ef8:	df 07       	cpc	r29, r31
 efa:	40 f4       	brcc	.+16     	; 0xf0c <free+0x5a>
 efc:	4a 81       	ldd	r20, Y+2	; 0x02
 efe:	5b 81       	ldd	r21, Y+3	; 0x03
 f00:	9e 01       	movw	r18, r28
 f02:	41 15       	cp	r20, r1
 f04:	51 05       	cpc	r21, r1
 f06:	f1 f0       	breq	.+60     	; 0xf44 <free+0x92>
 f08:	ea 01       	movw	r28, r20
 f0a:	f5 cf       	rjmp	.-22     	; 0xef6 <free+0x44>
 f0c:	d3 83       	std	Z+3, r29	; 0x03
 f0e:	c2 83       	std	Z+2, r28	; 0x02
 f10:	40 81       	ld	r20, Z
 f12:	51 81       	ldd	r21, Z+1	; 0x01
 f14:	84 0f       	add	r24, r20
 f16:	95 1f       	adc	r25, r21
 f18:	c8 17       	cp	r28, r24
 f1a:	d9 07       	cpc	r29, r25
 f1c:	59 f4       	brne	.+22     	; 0xf34 <free+0x82>
 f1e:	88 81       	ld	r24, Y
 f20:	99 81       	ldd	r25, Y+1	; 0x01
 f22:	84 0f       	add	r24, r20
 f24:	95 1f       	adc	r25, r21
 f26:	02 96       	adiw	r24, 0x02	; 2
 f28:	91 83       	std	Z+1, r25	; 0x01
 f2a:	80 83       	st	Z, r24
 f2c:	8a 81       	ldd	r24, Y+2	; 0x02
 f2e:	9b 81       	ldd	r25, Y+3	; 0x03
 f30:	93 83       	std	Z+3, r25	; 0x03
 f32:	82 83       	std	Z+2, r24	; 0x02
 f34:	21 15       	cp	r18, r1
 f36:	31 05       	cpc	r19, r1
 f38:	29 f4       	brne	.+10     	; 0xf44 <free+0x92>
 f3a:	f0 93 8a 02 	sts	0x028A, r31	; 0x80028a <__flp+0x1>
 f3e:	e0 93 89 02 	sts	0x0289, r30	; 0x800289 <__flp>
 f42:	3d c0       	rjmp	.+122    	; 0xfbe <free+0x10c>
 f44:	e9 01       	movw	r28, r18
 f46:	fb 83       	std	Y+3, r31	; 0x03
 f48:	ea 83       	std	Y+2, r30	; 0x02
 f4a:	49 91       	ld	r20, Y+
 f4c:	59 91       	ld	r21, Y+
 f4e:	c4 0f       	add	r28, r20
 f50:	d5 1f       	adc	r29, r21
 f52:	ec 17       	cp	r30, r28
 f54:	fd 07       	cpc	r31, r29
 f56:	61 f4       	brne	.+24     	; 0xf70 <free+0xbe>
 f58:	80 81       	ld	r24, Z
 f5a:	91 81       	ldd	r25, Z+1	; 0x01
 f5c:	84 0f       	add	r24, r20
 f5e:	95 1f       	adc	r25, r21
 f60:	02 96       	adiw	r24, 0x02	; 2
 f62:	e9 01       	movw	r28, r18
 f64:	99 83       	std	Y+1, r25	; 0x01
 f66:	88 83       	st	Y, r24
 f68:	82 81       	ldd	r24, Z+2	; 0x02
 f6a:	93 81       	ldd	r25, Z+3	; 0x03
 f6c:	9b 83       	std	Y+3, r25	; 0x03
 f6e:	8a 83       	std	Y+2, r24	; 0x02
 f70:	e0 e0       	ldi	r30, 0x00	; 0
 f72:	f0 e0       	ldi	r31, 0x00	; 0
 f74:	12 96       	adiw	r26, 0x02	; 2
 f76:	8d 91       	ld	r24, X+
 f78:	9c 91       	ld	r25, X
 f7a:	13 97       	sbiw	r26, 0x03	; 3
 f7c:	00 97       	sbiw	r24, 0x00	; 0
 f7e:	19 f0       	breq	.+6      	; 0xf86 <free+0xd4>
 f80:	fd 01       	movw	r30, r26
 f82:	dc 01       	movw	r26, r24
 f84:	f7 cf       	rjmp	.-18     	; 0xf74 <free+0xc2>
 f86:	8d 91       	ld	r24, X+
 f88:	9c 91       	ld	r25, X
 f8a:	11 97       	sbiw	r26, 0x01	; 1
 f8c:	9d 01       	movw	r18, r26
 f8e:	2e 5f       	subi	r18, 0xFE	; 254
 f90:	3f 4f       	sbci	r19, 0xFF	; 255
 f92:	82 0f       	add	r24, r18
 f94:	93 1f       	adc	r25, r19
 f96:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <__brkval>
 f9a:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <__brkval+0x1>
 f9e:	28 17       	cp	r18, r24
 fa0:	39 07       	cpc	r19, r25
 fa2:	69 f4       	brne	.+26     	; 0xfbe <free+0x10c>
 fa4:	30 97       	sbiw	r30, 0x00	; 0
 fa6:	29 f4       	brne	.+10     	; 0xfb2 <free+0x100>
 fa8:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <__flp+0x1>
 fac:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <__flp>
 fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <free+0x104>
 fb2:	13 82       	std	Z+3, r1	; 0x03
 fb4:	12 82       	std	Z+2, r1	; 0x02
 fb6:	b0 93 88 02 	sts	0x0288, r27	; 0x800288 <__brkval+0x1>
 fba:	a0 93 87 02 	sts	0x0287, r26	; 0x800287 <__brkval>
 fbe:	df 91       	pop	r29
 fc0:	cf 91       	pop	r28
 fc2:	08 95       	ret

00000fc4 <_exit>:
 fc4:	f8 94       	cli

00000fc6 <__stop_program>:
 fc6:	ff cf       	rjmp	.-2      	; 0xfc6 <__stop_program>
