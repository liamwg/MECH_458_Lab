
ProjectSkeletonDemo2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800200  0000111a  000011ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000111a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  0080025c  0080025c  0000120a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000120a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022ea  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001002  00000000  00000000  00003686  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ee7  00000000  00000000  00004688  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  00005570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000934  00000000  00000000  0000599c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001089  00000000  00000000  000062d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00007359  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	b5 c1       	rjmp	.+874    	; 0x370 <__vector_1>
       6:	00 00       	nop
       8:	ce c2       	rjmp	.+1436   	; 0x5a6 <__vector_2>
       a:	00 00       	nop
       c:	e5 c1       	rjmp	.+970    	; 0x3d8 <__vector_3>
       e:	00 00       	nop
      10:	2b c2       	rjmp	.+1110   	; 0x468 <__vector_4>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	6a c2       	rjmp	.+1236   	; 0x50a <__vector_13>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	5d c3       	rjmp	.+1722   	; 0x730 <__vector_29>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e1       	ldi	r30, 0x1A	; 26
      fc:	f1 e1       	ldi	r31, 0x11	; 17
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 35       	cpi	r26, 0x5C	; 92
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	ac e5       	ldi	r26, 0x5C	; 92
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a9 38       	cpi	r26, 0x89	; 137
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	26 d5       	rcall	.+2636   	; 0xb6c <main>
     120:	fa c7       	rjmp	.+4084   	; 0x1116 <_exit>

00000122 <__bad_interrupt>:
     122:	fd c0       	rjmp	.+506    	; 0x31e <__vector_default>

00000124 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
     124:	87 b1       	in	r24, 0x07	; 7
     126:	80 7f       	andi	r24, 0xF0	; 240
     128:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
     12a:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
     12c:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	8a 95       	dec	r24
     132:	f1 f7       	brne	.-4      	; 0x130 <LCDBusyLoop+0xc>
     134:	00 c0       	rjmp	.+0      	; 0x136 <LCDBusyLoop+0x12>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
     136:	47 9a       	sbi	0x08, 7	; 8
     138:	92 e0       	ldi	r25, 0x02	; 2
     13a:	9a 95       	dec	r25
     13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x16>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1c>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
     140:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
     142:	82 95       	swap	r24
     144:	80 7f       	andi	r24, 0xF0	; 240
     146:	92 e0       	ldi	r25, 0x02	; 2
     148:	9a 95       	dec	r25
     14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x24>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <LCDBusyLoop+0x2a>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
     14e:	47 98       	cbi	0x08, 7	; 8
     150:	95 e0       	ldi	r25, 0x05	; 5
     152:	9a 95       	dec	r25
     154:	f1 f7       	brne	.-4      	; 0x152 <LCDBusyLoop+0x2e>
     156:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
     158:	47 9a       	sbi	0x08, 7	; 8
     15a:	92 e0       	ldi	r25, 0x02	; 2
     15c:	9a 95       	dec	r25
     15e:	f1 f7       	brne	.-4      	; 0x15c <LCDBusyLoop+0x38>
     160:	00 c0       	rjmp	.+0      	; 0x162 <LCDBusyLoop+0x3e>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
     162:	96 b1       	in	r25, 0x06	; 6
     164:	92 e0       	ldi	r25, 0x02	; 2
     166:	9a 95       	dec	r25
     168:	f1 f7       	brne	.-4      	; 0x166 <LCDBusyLoop+0x42>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <LCDBusyLoop+0x48>

		busy=status & 0b10000000;

		_delay_us(0.5);
		
		CLEAR_E();
     16c:	47 98       	cbi	0x08, 7	; 8
     16e:	95 e0       	ldi	r25, 0x05	; 5
     170:	9a 95       	dec	r25
     172:	f1 f7       	brne	.-4      	; 0x170 <LCDBusyLoop+0x4c>
     174:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
     176:	88 23       	and	r24, r24
     178:	f4 f2       	brlt	.-68     	; 0x136 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
     17a:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     17c:	87 b1       	in	r24, 0x07	; 7
     17e:	8f 60       	ori	r24, 0x0F	; 15
     180:	87 b9       	out	0x07, r24	; 7
     182:	08 95       	ret

00000184 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     184:	28 2f       	mov	r18, r24
     186:	22 95       	swap	r18
     188:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     18a:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     18c:	61 11       	cpse	r22, r1
     18e:	02 c0       	rjmp	.+4      	; 0x194 <LCDByte+0x10>
	CLEAR_RS();
     190:	46 98       	cbi	0x08, 6	; 8
     192:	01 c0       	rjmp	.+2      	; 0x196 <LCDByte+0x12>
else
	SET_RS();
     194:	46 9a       	sbi	0x08, 6	; 8
     196:	92 e0       	ldi	r25, 0x02	; 2
     198:	9a 95       	dec	r25
     19a:	f1 f7       	brne	.-4      	; 0x198 <LCDByte+0x14>
     19c:	00 c0       	rjmp	.+0      	; 0x19e <LCDByte+0x1a>

_delay_us(0.500);		//tAS


SET_E();
     19e:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
     1a0:	98 b1       	in	r25, 0x08	; 8
     1a2:	90 7f       	andi	r25, 0xF0	; 240
     1a4:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     1a6:	98 b9       	out	0x08, r25	; 8
     1a8:	95 e0       	ldi	r25, 0x05	; 5
     1aa:	9a 95       	dec	r25
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCDByte+0x26>
     1ae:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
     1b0:	47 98       	cbi	0x08, 7	; 8
     1b2:	95 e0       	ldi	r25, 0x05	; 5
     1b4:	9a 95       	dec	r25
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCDByte+0x30>
     1b8:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     1ba:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
     1bc:	98 b1       	in	r25, 0x08	; 8
     1be:	90 7f       	andi	r25, 0xF0	; 240
     1c0:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     1c2:	88 b9       	out	0x08, r24	; 8
     1c4:	85 e0       	ldi	r24, 0x05	; 5
     1c6:	8a 95       	dec	r24
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCDByte+0x42>
     1ca:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
     1cc:	47 98       	cbi	0x08, 7	; 8
     1ce:	95 e0       	ldi	r25, 0x05	; 5
     1d0:	9a 95       	dec	r25
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCDByte+0x4c>
     1d4:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     1d6:	a6 cf       	rjmp	.-180    	; 0x124 <LCDBusyLoop>
     1d8:	08 95       	ret

000001da <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
     1da:	cf 93       	push	r28
     1dc:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1de:	2f ef       	ldi	r18, 0xFF	; 255
     1e0:	86 e7       	ldi	r24, 0x76	; 118
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	21 50       	subi	r18, 0x01	; 1
     1e6:	80 40       	sbci	r24, 0x00	; 0
     1e8:	90 40       	sbci	r25, 0x00	; 0
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <InitLCD+0xa>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <InitLCD+0x14>
     1ee:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     1f0:	87 b1       	in	r24, 0x07	; 7
     1f2:	8f 60       	ori	r24, 0x0F	; 15
     1f4:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
     1f6:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     1f8:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     1fa:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
     1fc:	88 b1       	in	r24, 0x08	; 8
     1fe:	80 7f       	andi	r24, 0xF0	; 240
     200:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
     202:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
     204:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
     206:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     208:	00 c0       	rjmp	.+0      	; 0x20a <InitLCD+0x30>
     20a:	00 c0       	rjmp	.+0      	; 0x20c <InitLCD+0x32>
     20c:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
     20e:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     210:	41 9a       	sbi	0x08, 1	; 8
     212:	25 e0       	ldi	r18, 0x05	; 5
     214:	2a 95       	dec	r18
     216:	f1 f7       	brne	.-4      	; 0x214 <InitLCD+0x3a>
     218:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
     21a:	47 98       	cbi	0x08, 7	; 8
     21c:	85 e0       	ldi	r24, 0x05	; 5
     21e:	8a 95       	dec	r24
     220:	f1 f7       	brne	.-4      	; 0x21e <InitLCD+0x44>
     222:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     224:	7f df       	rcall	.-258    	; 0x124 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	8c 2f       	mov	r24, r28
     22a:	8c 60       	ori	r24, 0x0C	; 12
     22c:	ab df       	rcall	.-170    	; 0x184 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     22e:	60 e0       	ldi	r22, 0x00	; 0
     230:	88 e2       	ldi	r24, 0x28	; 40
     232:	a8 df       	rcall	.-176    	; 0x184 <LCDByte>
}
     234:	cf 91       	pop	r28
     236:	08 95       	ret

00000238 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     23e:	88 81       	ld	r24, Y
     240:	88 23       	and	r24, r24
     242:	31 f0       	breq	.+12     	; 0x250 <LCDWriteString+0x18>
     244:	21 96       	adiw	r28, 0x01	; 1
 {
	LCDData(*msg);
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	9d df       	rcall	.-198    	; 0x184 <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     24a:	89 91       	ld	r24, Y+
     24c:	81 11       	cpse	r24, r1
     24e:	fb cf       	rjmp	.-10     	; 0x246 <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     256:	ef 92       	push	r14
     258:	ff 92       	push	r15
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	00 d0       	rcall	.+0      	; 0x264 <LCDWriteInt+0xe>
     264:	1f 92       	push	r1
     266:	1f 92       	push	r1
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     26e:	fe 01       	movw	r30, r28
     270:	31 96       	adiw	r30, 0x01	; 1
     272:	25 e0       	ldi	r18, 0x05	; 5
     274:	df 01       	movw	r26, r30
     276:	1d 92       	st	X+, r1
     278:	2a 95       	dec	r18
     27a:	e9 f7       	brne	.-6      	; 0x276 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     27c:	00 97       	sbiw	r24, 0x00	; 0
     27e:	51 f0       	breq	.+20     	; 0x294 <LCDWriteInt+0x3e>
     280:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
     282:	2a e0       	ldi	r18, 0x0A	; 10
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	b9 01       	movw	r22, r18
     288:	fe d5       	rcall	.+3068   	; 0xe86 <__divmodhi4>
     28a:	82 93       	st	-Z, r24
	val=val/10;
     28c:	86 2f       	mov	r24, r22
     28e:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     290:	00 97       	sbiw	r24, 0x00	; 0
     292:	c9 f7       	brne	.-14     	; 0x286 <LCDWriteInt+0x30>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     294:	bf ef       	ldi	r27, 0xFF	; 255
     296:	eb 16       	cp	r14, r27
     298:	fb 06       	cpc	r15, r27
     29a:	69 f4       	brne	.+26     	; 0x2b6 <LCDWriteInt+0x60>
		while(str[j]==0) j++;
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	81 11       	cpse	r24, r1
     2a0:	1d c0       	rjmp	.+58     	; 0x2dc <LCDWriteInt+0x86>
     2a2:	fe 01       	movw	r30, r28
     2a4:	32 96       	adiw	r30, 0x02	; 2
     2a6:	00 e0       	ldi	r16, 0x00	; 0
     2a8:	10 e0       	ldi	r17, 0x00	; 0
     2aa:	0f 5f       	subi	r16, 0xFF	; 255
     2ac:	1f 4f       	sbci	r17, 0xFF	; 255
     2ae:	81 91       	ld	r24, Z+
     2b0:	88 23       	and	r24, r24
     2b2:	d9 f3       	breq	.-10     	; 0x2aa <LCDWriteInt+0x54>
     2b4:	0f c0       	rjmp	.+30     	; 0x2d4 <LCDWriteInt+0x7e>
	else
		j=5-field_length;
     2b6:	05 e0       	ldi	r16, 0x05	; 5
     2b8:	10 e0       	ldi	r17, 0x00	; 0
     2ba:	0e 19       	sub	r16, r14
     2bc:	1f 09       	sbc	r17, r15
     2be:	0a c0       	rjmp	.+20     	; 0x2d4 <LCDWriteInt+0x7e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     2c0:	f8 01       	movw	r30, r16
     2c2:	81 91       	ld	r24, Z+
     2c4:	8f 01       	movw	r16, r30
     2c6:	61 e0       	ldi	r22, 0x01	; 1
     2c8:	80 5d       	subi	r24, 0xD0	; 208
     2ca:	5c df       	rcall	.-328    	; 0x184 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     2cc:	0e 15       	cp	r16, r14
     2ce:	1f 05       	cpc	r17, r15
     2d0:	b9 f7       	brne	.-18     	; 0x2c0 <LCDWriteInt+0x6a>
     2d2:	11 c0       	rjmp	.+34     	; 0x2f6 <LCDWriteInt+0xa0>
     2d4:	05 30       	cpi	r16, 0x05	; 5
     2d6:	11 05       	cpc	r17, r1
     2d8:	1c f0       	brlt	.+6      	; 0x2e0 <LCDWriteInt+0x8a>
     2da:	0d c0       	rjmp	.+26     	; 0x2f6 <LCDWriteInt+0xa0>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	8c 0f       	add	r24, r28
     2e6:	9d 1f       	adc	r25, r29
     2e8:	08 0f       	add	r16, r24
     2ea:	19 1f       	adc	r17, r25
     2ec:	7e 01       	movw	r14, r28
     2ee:	96 e0       	ldi	r25, 0x06	; 6
     2f0:	e9 0e       	add	r14, r25
     2f2:	f1 1c       	adc	r15, r1
     2f4:	e5 cf       	rjmp	.-54     	; 0x2c0 <LCDWriteInt+0x6a>
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	08 95       	ret

0000030e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     30e:	88 32       	cpi	r24, 0x28	; 40
     310:	28 f4       	brcc	.+10     	; 0x31c <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
     312:	61 11       	cpse	r22, r1
     314:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	80 68       	ori	r24, 0x80	; 128
     31a:	34 cf       	rjmp	.-408    	; 0x184 <LCDByte>
     31c:	08 95       	ret

0000031e <__vector_default>:
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
}/*isEmpty*/
     31e:	1f 92       	push	r1
     320:	0f 92       	push	r0
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	0f 92       	push	r0
     326:	11 24       	eor	r1, r1
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
     32e:	ff cf       	rjmp	.-2      	; 0x32e <__vector_default+0x10>

00000330 <mTimer>:
     330:	ac 01       	movw	r20, r24
     332:	e1 e8       	ldi	r30, 0x81	; 129
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	90 81       	ld	r25, Z
     338:	98 60       	ori	r25, 0x08	; 8
     33a:	90 83       	st	Z, r25
     33c:	88 ee       	ldi	r24, 0xE8	; 232
     33e:	93 e0       	ldi	r25, 0x03	; 3
     340:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     344:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     348:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     34c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     350:	b1 9a       	sbi	0x16, 1	; 22
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	05 c0       	rjmp	.+10     	; 0x362 <mTimer+0x32>
     358:	b1 9b       	sbis	0x16, 1	; 22
     35a:	fe cf       	rjmp	.-4      	; 0x358 <mTimer+0x28>
     35c:	b1 9a       	sbi	0x16, 1	; 22
     35e:	2f 5f       	subi	r18, 0xFF	; 255
     360:	3f 4f       	sbci	r19, 0xFF	; 255
     362:	24 17       	cp	r18, r20
     364:	35 07       	cpc	r19, r21
     366:	1c f4       	brge	.+6      	; 0x36e <mTimer+0x3e>
     368:	b1 9b       	sbis	0x16, 1	; 22
     36a:	f6 cf       	rjmp	.-20     	; 0x358 <mTimer+0x28>
     36c:	f7 cf       	rjmp	.-18     	; 0x35c <mTimer+0x2c>
     36e:	08 95       	ret

00000370 <__vector_1>:
     370:	1f 92       	push	r1
     372:	0f 92       	push	r0
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	0f 92       	push	r0
     378:	11 24       	eor	r1, r1
     37a:	0b b6       	in	r0, 0x3b	; 59
     37c:	0f 92       	push	r0
     37e:	2f 93       	push	r18
     380:	3f 93       	push	r19
     382:	4f 93       	push	r20
     384:	5f 93       	push	r21
     386:	6f 93       	push	r22
     388:	7f 93       	push	r23
     38a:	8f 93       	push	r24
     38c:	9f 93       	push	r25
     38e:	af 93       	push	r26
     390:	bf 93       	push	r27
     392:	ef 93       	push	r30
     394:	ff 93       	push	r31
     396:	84 e1       	ldi	r24, 0x14	; 20
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	ca df       	rcall	.-108    	; 0x330 <mTimer>
     39c:	48 9b       	sbis	0x09, 0	; 9
     39e:	09 c0       	rjmp	.+18     	; 0x3b2 <__vector_1+0x42>
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <end_flag+0x1>
     3a8:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <end_flag>
     3ac:	83 e0       	ldi	r24, 0x03	; 3
     3ae:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <STATE>
     3b2:	ff 91       	pop	r31
     3b4:	ef 91       	pop	r30
     3b6:	bf 91       	pop	r27
     3b8:	af 91       	pop	r26
     3ba:	9f 91       	pop	r25
     3bc:	8f 91       	pop	r24
     3be:	7f 91       	pop	r23
     3c0:	6f 91       	pop	r22
     3c2:	5f 91       	pop	r21
     3c4:	4f 91       	pop	r20
     3c6:	3f 91       	pop	r19
     3c8:	2f 91       	pop	r18
     3ca:	0f 90       	pop	r0
     3cc:	0b be       	out	0x3b, r0	; 59
     3ce:	0f 90       	pop	r0
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	0f 90       	pop	r0
     3d4:	1f 90       	pop	r1
     3d6:	18 95       	reti

000003d8 <__vector_3>:
     3d8:	1f 92       	push	r1
     3da:	0f 92       	push	r0
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	0f 92       	push	r0
     3e0:	11 24       	eor	r1, r1
     3e2:	0b b6       	in	r0, 0x3b	; 59
     3e4:	0f 92       	push	r0
     3e6:	2f 93       	push	r18
     3e8:	3f 93       	push	r19
     3ea:	4f 93       	push	r20
     3ec:	5f 93       	push	r21
     3ee:	6f 93       	push	r22
     3f0:	7f 93       	push	r23
     3f2:	8f 93       	push	r24
     3f4:	9f 93       	push	r25
     3f6:	af 93       	push	r26
     3f8:	bf 93       	push	r27
     3fa:	ef 93       	push	r30
     3fc:	ff 93       	push	r31
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	96 df       	rcall	.-212    	; 0x330 <mTimer>
     404:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <i>
     408:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <i+0x1>
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <i+0x1>
     412:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <i>
     416:	8f ef       	ldi	r24, 0xFF	; 255
     418:	9f ef       	ldi	r25, 0xFF	; 255
     41a:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <lowest_ref+0x1>
     41e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <lowest_ref>
     422:	4a 9b       	sbis	0x09, 2	; 9
     424:	0b c0       	rjmp	.+22     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     426:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <belt_flag>
     42a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <belt_flag+0x1>
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	29 f4       	brne	.+10     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     432:	ea e7       	ldi	r30, 0x7A	; 122
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	80 64       	ori	r24, 0x40	; 64
     43a:	80 83       	st	Z, r24
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <STATE>
     442:	ff 91       	pop	r31
     444:	ef 91       	pop	r30
     446:	bf 91       	pop	r27
     448:	af 91       	pop	r26
     44a:	9f 91       	pop	r25
     44c:	8f 91       	pop	r24
     44e:	7f 91       	pop	r23
     450:	6f 91       	pop	r22
     452:	5f 91       	pop	r21
     454:	4f 91       	pop	r20
     456:	3f 91       	pop	r19
     458:	2f 91       	pop	r18
     45a:	0f 90       	pop	r0
     45c:	0b be       	out	0x3b, r0	; 59
     45e:	0f 90       	pop	r0
     460:	0f be       	out	0x3f, r0	; 63
     462:	0f 90       	pop	r0
     464:	1f 90       	pop	r1
     466:	18 95       	reti

00000468 <__vector_4>:
     468:	1f 92       	push	r1
     46a:	0f 92       	push	r0
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	0f 92       	push	r0
     470:	11 24       	eor	r1, r1
     472:	0b b6       	in	r0, 0x3b	; 59
     474:	0f 92       	push	r0
     476:	2f 93       	push	r18
     478:	3f 93       	push	r19
     47a:	4f 93       	push	r20
     47c:	5f 93       	push	r21
     47e:	6f 93       	push	r22
     480:	7f 93       	push	r23
     482:	8f 93       	push	r24
     484:	9f 93       	push	r25
     486:	af 93       	push	r26
     488:	bf 93       	push	r27
     48a:	ef 93       	push	r30
     48c:	ff 93       	push	r31
     48e:	84 e1       	ldi	r24, 0x14	; 20
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	4e df       	rcall	.-356    	; 0x330 <mTimer>
     494:	4b 99       	sbic	0x09, 3	; 9
     496:	12 c0       	rjmp	.+36     	; 0x4bc <__vector_4+0x54>
     498:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <ex_count>
     49c:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <ex_count+0x1>
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <ex_count+0x1>
     4a6:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <ex_count>
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <sort_flag+0x1>
     4b2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <sort_flag>
     4b6:	83 e0       	ldi	r24, 0x03	; 3
     4b8:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <STATE>
     4bc:	ff 91       	pop	r31
     4be:	ef 91       	pop	r30
     4c0:	bf 91       	pop	r27
     4c2:	af 91       	pop	r26
     4c4:	9f 91       	pop	r25
     4c6:	8f 91       	pop	r24
     4c8:	7f 91       	pop	r23
     4ca:	6f 91       	pop	r22
     4cc:	5f 91       	pop	r21
     4ce:	4f 91       	pop	r20
     4d0:	3f 91       	pop	r19
     4d2:	2f 91       	pop	r18
     4d4:	0f 90       	pop	r0
     4d6:	0b be       	out	0x3b, r0	; 59
     4d8:	0f 90       	pop	r0
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	0f 90       	pop	r0
     4de:	1f 90       	pop	r1
     4e0:	18 95       	reti

000004e2 <rampTimer>:
     4e2:	e1 eb       	ldi	r30, 0xB1	; 177
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	88 60       	ori	r24, 0x08	; 8
     4ea:	80 83       	st	Z, r24
     4ec:	88 ee       	ldi	r24, 0xE8	; 232
     4ee:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
     4f2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
     4f6:	a0 e7       	ldi	r26, 0x70	; 112
     4f8:	b0 e0       	ldi	r27, 0x00	; 0
     4fa:	8c 91       	ld	r24, X
     4fc:	82 60       	ori	r24, 0x02	; 2
     4fe:	8c 93       	st	X, r24
     500:	80 81       	ld	r24, Z
     502:	82 60       	ori	r24, 0x02	; 2
     504:	80 83       	st	Z, r24
     506:	b9 9a       	sbi	0x17, 1	; 23
     508:	08 95       	ret

0000050a <__vector_13>:
     50a:	1f 92       	push	r1
     50c:	0f 92       	push	r0
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	0f 92       	push	r0
     512:	11 24       	eor	r1, r1
     514:	0b b6       	in	r0, 0x3b	; 59
     516:	0f 92       	push	r0
     518:	2f 93       	push	r18
     51a:	3f 93       	push	r19
     51c:	4f 93       	push	r20
     51e:	5f 93       	push	r21
     520:	6f 93       	push	r22
     522:	7f 93       	push	r23
     524:	8f 93       	push	r24
     526:	9f 93       	push	r25
     528:	af 93       	push	r26
     52a:	bf 93       	push	r27
     52c:	ef 93       	push	r30
     52e:	ff 93       	push	r31
     530:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__data_end>
     534:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <__data_end+0x1>
     538:	89 3c       	cpi	r24, 0xC9	; 201
     53a:	91 05       	cpc	r25, r1
     53c:	2c f0       	brlt	.+10     	; 0x548 <__vector_13+0x3e>
     53e:	15 b8       	out	0x05, r1	; 5
     540:	83 e0       	ldi	r24, 0x03	; 3
     542:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <STATE>
     546:	0c c0       	rjmp	.+24     	; 0x560 <__vector_13+0x56>
     548:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__data_end>
     54c:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <__data_end+0x1>
     550:	01 96       	adiw	r24, 0x01	; 1
     552:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <__data_end+0x1>
     556:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <__data_end>
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	c1 df       	rcall	.-126    	; 0x4e2 <rampTimer>
     560:	ff 91       	pop	r31
     562:	ef 91       	pop	r30
     564:	bf 91       	pop	r27
     566:	af 91       	pop	r26
     568:	9f 91       	pop	r25
     56a:	8f 91       	pop	r24
     56c:	7f 91       	pop	r23
     56e:	6f 91       	pop	r22
     570:	5f 91       	pop	r21
     572:	4f 91       	pop	r20
     574:	3f 91       	pop	r19
     576:	2f 91       	pop	r18
     578:	0f 90       	pop	r0
     57a:	0b be       	out	0x3b, r0	; 59
     57c:	0f 90       	pop	r0
     57e:	0f be       	out	0x3f, r0	; 63
     580:	0f 90       	pop	r0
     582:	1f 90       	pop	r1
     584:	18 95       	reti

00000586 <PWM>:
     586:	83 e8       	ldi	r24, 0x83	; 131
     588:	84 bd       	out	0x24, r24	; 36
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	85 bd       	out	0x25, r24	; 37
     58e:	86 e6       	ldi	r24, 0x66	; 102
     590:	87 bd       	out	0x27, r24	; 39
     592:	08 95       	ret

00000594 <CCW>:
     594:	80 e7       	ldi	r24, 0x70	; 112
     596:	85 b9       	out	0x05, r24	; 5
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <belt_flag+0x1>
     5a0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <belt_flag>
     5a4:	08 95       	ret

000005a6 <__vector_2>:
     5a6:	1f 92       	push	r1
     5a8:	0f 92       	push	r0
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	0f 92       	push	r0
     5ae:	11 24       	eor	r1, r1
     5b0:	0b b6       	in	r0, 0x3b	; 59
     5b2:	0f 92       	push	r0
     5b4:	2f 93       	push	r18
     5b6:	3f 93       	push	r19
     5b8:	4f 93       	push	r20
     5ba:	5f 93       	push	r21
     5bc:	6f 93       	push	r22
     5be:	7f 93       	push	r23
     5c0:	8f 93       	push	r24
     5c2:	9f 93       	push	r25
     5c4:	af 93       	push	r26
     5c6:	bf 93       	push	r27
     5c8:	ef 93       	push	r30
     5ca:	ff 93       	push	r31
     5cc:	84 e1       	ldi	r24, 0x14	; 20
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	af de       	rcall	.-674    	; 0x330 <mTimer>
     5d2:	49 99       	sbic	0x09, 1	; 9
     5d4:	4d c0       	rjmp	.+154    	; 0x670 <__vector_2+0xca>
     5d6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <belt_flag>
     5da:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <belt_flag+0x1>
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <__vector_2+0x3e>
     5e2:	46 c0       	rjmp	.+140    	; 0x670 <__vector_2+0xca>
     5e4:	84 e1       	ldi	r24, 0x14	; 20
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	a3 de       	rcall	.-698    	; 0x330 <mTimer>
     5ea:	15 b8       	out	0x05, r1	; 5
     5ec:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <belt_flag+0x1>
     5f0:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <belt_flag>
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	c5 dd       	rcall	.-1142   	; 0x184 <LCDByte>
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	87 de       	rcall	.-754    	; 0x30e <LCDGotoXY>
     600:	80 e2       	ldi	r24, 0x20	; 32
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	19 de       	rcall	.-974    	; 0x238 <LCDWriteString>
     606:	61 e0       	ldi	r22, 0x01	; 1
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	81 de       	rcall	.-766    	; 0x30e <LCDGotoXY>
     60c:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <alum_count>
     610:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <alum_count+0x1>
     614:	62 e0       	ldi	r22, 0x02	; 2
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	1e de       	rcall	.-964    	; 0x256 <LCDWriteInt>
     61a:	61 e0       	ldi	r22, 0x01	; 1
     61c:	83 e0       	ldi	r24, 0x03	; 3
     61e:	77 de       	rcall	.-786    	; 0x30e <LCDGotoXY>
     620:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <steel_count>
     624:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <steel_count+0x1>
     628:	62 e0       	ldi	r22, 0x02	; 2
     62a:	70 e0       	ldi	r23, 0x00	; 0
     62c:	14 de       	rcall	.-984    	; 0x256 <LCDWriteInt>
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	86 e0       	ldi	r24, 0x06	; 6
     632:	6d de       	rcall	.-806    	; 0x30e <LCDGotoXY>
     634:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <white_count>
     638:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <white_count+0x1>
     63c:	62 e0       	ldi	r22, 0x02	; 2
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	0a de       	rcall	.-1004   	; 0x256 <LCDWriteInt>
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	89 e0       	ldi	r24, 0x09	; 9
     646:	63 de       	rcall	.-826    	; 0x30e <LCDGotoXY>
     648:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <black_count>
     64c:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <black_count+0x1>
     650:	62 e0       	ldi	r22, 0x02	; 2
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	00 de       	rcall	.-1024   	; 0x256 <LCDWriteInt>
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	8c e0       	ldi	r24, 0x0C	; 12
     65a:	59 de       	rcall	.-846    	; 0x30e <LCDGotoXY>
     65c:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <i>
     660:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <i+0x1>
     664:	62 e0       	ldi	r22, 0x02	; 2
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	f6 dd       	rcall	.-1044   	; 0x256 <LCDWriteInt>
     66a:	49 9b       	sbis	0x09, 1	; 9
     66c:	fe cf       	rjmp	.-4      	; 0x66a <__vector_2+0xc4>
     66e:	1a c0       	rjmp	.+52     	; 0x6a4 <__vector_2+0xfe>
     670:	49 99       	sbic	0x09, 1	; 9
     672:	18 c0       	rjmp	.+48     	; 0x6a4 <__vector_2+0xfe>
     674:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <belt_flag>
     678:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <belt_flag+0x1>
     67c:	89 2b       	or	r24, r25
     67e:	91 f4       	brne	.+36     	; 0x6a4 <__vector_2+0xfe>
     680:	84 e1       	ldi	r24, 0x14	; 20
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	55 de       	rcall	.-854    	; 0x330 <mTimer>
     686:	86 df       	rcall	.-244    	; 0x594 <CCW>
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	7b dd       	rcall	.-1290   	; 0x184 <LCDByte>
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	3d de       	rcall	.-902    	; 0x30e <LCDGotoXY>
     694:	8f e2       	ldi	r24, 0x2F	; 47
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	cf dd       	rcall	.-1122   	; 0x238 <LCDWriteString>
     69a:	83 e0       	ldi	r24, 0x03	; 3
     69c:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <STATE>
     6a0:	49 9b       	sbis	0x09, 1	; 9
     6a2:	fe cf       	rjmp	.-4      	; 0x6a0 <__vector_2+0xfa>
     6a4:	ff 91       	pop	r31
     6a6:	ef 91       	pop	r30
     6a8:	bf 91       	pop	r27
     6aa:	af 91       	pop	r26
     6ac:	9f 91       	pop	r25
     6ae:	8f 91       	pop	r24
     6b0:	7f 91       	pop	r23
     6b2:	6f 91       	pop	r22
     6b4:	5f 91       	pop	r21
     6b6:	4f 91       	pop	r20
     6b8:	3f 91       	pop	r19
     6ba:	2f 91       	pop	r18
     6bc:	0f 90       	pop	r0
     6be:	0b be       	out	0x3b, r0	; 59
     6c0:	0f 90       	pop	r0
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	0f 90       	pop	r0
     6c6:	1f 90       	pop	r1
     6c8:	18 95       	reti

000006ca <CW>:
     6ca:	88 e3       	ldi	r24, 0x38	; 56
     6cc:	85 b9       	out	0x05, r24	; 5
     6ce:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <belt_flag+0x1>
     6d2:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <belt_flag>
     6d6:	08 95       	ret

000006d8 <initLink>:
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	ec 01       	movw	r28, r24
     6de:	84 e0       	ldi	r24, 0x04	; 4
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	f8 d3       	rcall	.+2032   	; 0xed4 <malloc>
     6e4:	99 83       	std	Y+1, r25	; 0x01
     6e6:	88 83       	st	Y, r24
     6e8:	fc 01       	movw	r30, r24
     6ea:	13 82       	std	Z+3, r1	; 0x03
     6ec:	12 82       	std	Z+2, r1	; 0x02
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <enqueue>:
     6f4:	db 01       	movw	r26, r22
     6f6:	ed 91       	ld	r30, X+
     6f8:	fc 91       	ld	r31, X
     6fa:	30 97       	sbiw	r30, 0x00	; 0
     6fc:	61 f0       	breq	.+24     	; 0x716 <enqueue+0x22>
     6fe:	da 01       	movw	r26, r20
     700:	8d 91       	ld	r24, X+
     702:	9c 91       	ld	r25, X
     704:	11 97       	sbiw	r26, 0x01	; 1
     706:	93 83       	std	Z+3, r25	; 0x03
     708:	82 83       	std	Z+2, r24	; 0x02
     70a:	8d 91       	ld	r24, X+
     70c:	9c 91       	ld	r25, X
     70e:	fb 01       	movw	r30, r22
     710:	91 83       	std	Z+1, r25	; 0x01
     712:	80 83       	st	Z, r24
     714:	08 95       	ret
     716:	da 01       	movw	r26, r20
     718:	2d 91       	ld	r18, X+
     71a:	3c 91       	ld	r19, X
     71c:	11 97       	sbiw	r26, 0x01	; 1
     71e:	fc 01       	movw	r30, r24
     720:	31 83       	std	Z+1, r19	; 0x01
     722:	20 83       	st	Z, r18
     724:	8d 91       	ld	r24, X+
     726:	9c 91       	ld	r25, X
     728:	db 01       	movw	r26, r22
     72a:	8d 93       	st	X+, r24
     72c:	9c 93       	st	X, r25
     72e:	08 95       	ret

00000730 <__vector_29>:
     730:	1f 92       	push	r1
     732:	0f 92       	push	r0
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	0f 92       	push	r0
     738:	11 24       	eor	r1, r1
     73a:	0b b6       	in	r0, 0x3b	; 59
     73c:	0f 92       	push	r0
     73e:	2f 93       	push	r18
     740:	3f 93       	push	r19
     742:	4f 93       	push	r20
     744:	5f 93       	push	r21
     746:	6f 93       	push	r22
     748:	7f 93       	push	r23
     74a:	8f 93       	push	r24
     74c:	9f 93       	push	r25
     74e:	af 93       	push	r26
     750:	bf 93       	push	r27
     752:	ef 93       	push	r30
     754:	ff 93       	push	r31
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	1f 92       	push	r1
     75c:	1f 92       	push	r1
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <ADC_low+0x1>
     76c:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <ADC_low>
     770:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	98 2f       	mov	r25, r24
     778:	88 27       	eor	r24, r24
     77a:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <ADC_high+0x1>
     77e:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <ADC_high>
     782:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <ADC_low>
     786:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <ADC_low+0x1>
     78a:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <ADC_high>
     78e:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <ADC_high+0x1>
     792:	82 0f       	add	r24, r18
     794:	93 1f       	adc	r25, r19
     796:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <ADC_result+0x1>
     79a:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <ADC_result>
     79e:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <ADC_result>
     7a2:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <ADC_result+0x1>
     7a6:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <lowest_ref>
     7aa:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <lowest_ref+0x1>
     7ae:	28 17       	cp	r18, r24
     7b0:	39 07       	cpc	r19, r25
     7b2:	40 f4       	brcc	.+16     	; 0x7c4 <__vector_29+0x94>
     7b4:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <ADC_result>
     7b8:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <ADC_result+0x1>
     7bc:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <lowest_ref+0x1>
     7c0:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <lowest_ref>
     7c4:	4a 9b       	sbis	0x09, 2	; 9
     7c6:	0c c0       	rjmp	.+24     	; 0x7e0 <__vector_29+0xb0>
     7c8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <belt_flag>
     7cc:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <belt_flag+0x1>
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	31 f4       	brne	.+12     	; 0x7e0 <__vector_29+0xb0>
     7d4:	ea e7       	ldi	r30, 0x7A	; 122
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	80 81       	ld	r24, Z
     7da:	80 64       	ori	r24, 0x40	; 64
     7dc:	80 83       	st	Z, r24
     7de:	96 c0       	rjmp	.+300    	; 0x90c <__vector_29+0x1dc>
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	79 df       	rcall	.-270    	; 0x6d8 <initLink>
     7e6:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <lowest_ref>
     7ea:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <lowest_ref+0x1>
     7ee:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <alum_low>
     7f2:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <alum_low+0x1>
     7f6:	28 17       	cp	r18, r24
     7f8:	39 07       	cpc	r19, r25
     7fa:	d4 f0       	brlt	.+52     	; 0x830 <__vector_29+0x100>
     7fc:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <lowest_ref>
     800:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <lowest_ref+0x1>
     804:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <alum_high>
     808:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <alum_high+0x1>
     80c:	82 17       	cp	r24, r18
     80e:	93 07       	cpc	r25, r19
     810:	7c f0       	brlt	.+30     	; 0x830 <__vector_29+0x100>
     812:	e9 81       	ldd	r30, Y+1	; 0x01
     814:	fa 81       	ldd	r31, Y+2	; 0x02
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	91 83       	std	Z+1, r25	; 0x01
     81c:	80 83       	st	Z, r24
     81e:	ae 01       	movw	r20, r28
     820:	4f 5f       	subi	r20, 0xFF	; 255
     822:	5f 4f       	sbci	r21, 0xFF	; 255
     824:	6a e7       	ldi	r22, 0x7A	; 122
     826:	72 e0       	ldi	r23, 0x02	; 2
     828:	8c e7       	ldi	r24, 0x7C	; 124
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	63 df       	rcall	.-314    	; 0x6f4 <enqueue>
     82e:	6e c0       	rjmp	.+220    	; 0x90c <__vector_29+0x1dc>
     830:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <lowest_ref>
     834:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <lowest_ref+0x1>
     838:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <steel_low>
     83c:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <steel_low+0x1>
     840:	28 17       	cp	r18, r24
     842:	39 07       	cpc	r19, r25
     844:	d4 f0       	brlt	.+52     	; 0x87a <__vector_29+0x14a>
     846:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <lowest_ref>
     84a:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <lowest_ref+0x1>
     84e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <steel_high>
     852:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <steel_high+0x1>
     856:	82 17       	cp	r24, r18
     858:	93 07       	cpc	r25, r19
     85a:	7c f0       	brlt	.+30     	; 0x87a <__vector_29+0x14a>
     85c:	e9 81       	ldd	r30, Y+1	; 0x01
     85e:	fa 81       	ldd	r31, Y+2	; 0x02
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	80 83       	st	Z, r24
     868:	ae 01       	movw	r20, r28
     86a:	4f 5f       	subi	r20, 0xFF	; 255
     86c:	5f 4f       	sbci	r21, 0xFF	; 255
     86e:	6a e7       	ldi	r22, 0x7A	; 122
     870:	72 e0       	ldi	r23, 0x02	; 2
     872:	8c e7       	ldi	r24, 0x7C	; 124
     874:	92 e0       	ldi	r25, 0x02	; 2
     876:	3e df       	rcall	.-388    	; 0x6f4 <enqueue>
     878:	49 c0       	rjmp	.+146    	; 0x90c <__vector_29+0x1dc>
     87a:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <lowest_ref>
     87e:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <lowest_ref+0x1>
     882:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <white_low>
     886:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <white_low+0x1>
     88a:	28 17       	cp	r18, r24
     88c:	39 07       	cpc	r19, r25
     88e:	d4 f0       	brlt	.+52     	; 0x8c4 <__vector_29+0x194>
     890:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <lowest_ref>
     894:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <lowest_ref+0x1>
     898:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <white_high>
     89c:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <white_high+0x1>
     8a0:	82 17       	cp	r24, r18
     8a2:	93 07       	cpc	r25, r19
     8a4:	7c f0       	brlt	.+30     	; 0x8c4 <__vector_29+0x194>
     8a6:	e9 81       	ldd	r30, Y+1	; 0x01
     8a8:	fa 81       	ldd	r31, Y+2	; 0x02
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	91 83       	std	Z+1, r25	; 0x01
     8b0:	80 83       	st	Z, r24
     8b2:	ae 01       	movw	r20, r28
     8b4:	4f 5f       	subi	r20, 0xFF	; 255
     8b6:	5f 4f       	sbci	r21, 0xFF	; 255
     8b8:	6a e7       	ldi	r22, 0x7A	; 122
     8ba:	72 e0       	ldi	r23, 0x02	; 2
     8bc:	8c e7       	ldi	r24, 0x7C	; 124
     8be:	92 e0       	ldi	r25, 0x02	; 2
     8c0:	19 df       	rcall	.-462    	; 0x6f4 <enqueue>
     8c2:	24 c0       	rjmp	.+72     	; 0x90c <__vector_29+0x1dc>
     8c4:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <lowest_ref>
     8c8:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <lowest_ref+0x1>
     8cc:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <black_low>
     8d0:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <black_low+0x1>
     8d4:	28 17       	cp	r18, r24
     8d6:	39 07       	cpc	r19, r25
     8d8:	cc f0       	brlt	.+50     	; 0x90c <__vector_29+0x1dc>
     8da:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <lowest_ref>
     8de:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <lowest_ref+0x1>
     8e2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <black_high>
     8e6:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <black_high+0x1>
     8ea:	82 17       	cp	r24, r18
     8ec:	93 07       	cpc	r25, r19
     8ee:	74 f0       	brlt	.+28     	; 0x90c <__vector_29+0x1dc>
     8f0:	e9 81       	ldd	r30, Y+1	; 0x01
     8f2:	fa 81       	ldd	r31, Y+2	; 0x02
     8f4:	84 e0       	ldi	r24, 0x04	; 4
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	91 83       	std	Z+1, r25	; 0x01
     8fa:	80 83       	st	Z, r24
     8fc:	ae 01       	movw	r20, r28
     8fe:	4f 5f       	subi	r20, 0xFF	; 255
     900:	5f 4f       	sbci	r21, 0xFF	; 255
     902:	6a e7       	ldi	r22, 0x7A	; 122
     904:	72 e0       	ldi	r23, 0x02	; 2
     906:	8c e7       	ldi	r24, 0x7C	; 124
     908:	92 e0       	ldi	r25, 0x02	; 2
     90a:	f4 de       	rcall	.-536    	; 0x6f4 <enqueue>
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	ff 91       	pop	r31
     916:	ef 91       	pop	r30
     918:	bf 91       	pop	r27
     91a:	af 91       	pop	r26
     91c:	9f 91       	pop	r25
     91e:	8f 91       	pop	r24
     920:	7f 91       	pop	r23
     922:	6f 91       	pop	r22
     924:	5f 91       	pop	r21
     926:	4f 91       	pop	r20
     928:	3f 91       	pop	r19
     92a:	2f 91       	pop	r18
     92c:	0f 90       	pop	r0
     92e:	0b be       	out	0x3b, r0	; 59
     930:	0f 90       	pop	r0
     932:	0f be       	out	0x3f, r0	; 63
     934:	0f 90       	pop	r0
     936:	1f 90       	pop	r1
     938:	18 95       	reti

0000093a <dequeue>:
     93a:	fc 01       	movw	r30, r24
     93c:	80 81       	ld	r24, Z
     93e:	91 81       	ldd	r25, Z+1	; 0x01
     940:	da 01       	movw	r26, r20
     942:	8d 93       	st	X+, r24
     944:	9c 93       	st	X, r25
     946:	a0 81       	ld	r26, Z
     948:	b1 81       	ldd	r27, Z+1	; 0x01
     94a:	10 97       	sbiw	r26, 0x00	; 0
     94c:	41 f0       	breq	.+16     	; 0x95e <dequeue+0x24>
     94e:	12 96       	adiw	r26, 0x02	; 2
     950:	8d 91       	ld	r24, X+
     952:	9c 91       	ld	r25, X
     954:	13 97       	sbiw	r26, 0x03	; 3
     956:	91 83       	std	Z+1, r25	; 0x01
     958:	80 83       	st	Z, r24
     95a:	89 2b       	or	r24, r25
     95c:	19 f4       	brne	.+6      	; 0x964 <dequeue+0x2a>
     95e:	fb 01       	movw	r30, r22
     960:	11 82       	std	Z+1, r1	; 0x01
     962:	10 82       	st	Z, r1
     964:	08 95       	ret

00000966 <stepper>:


void stepper(){
	current_step += direction;
     966:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <direction>
     96a:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <direction+0x1>
     96e:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <current_step>
     972:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <current_step+0x1>
     976:	82 0f       	add	r24, r18
     978:	93 1f       	adc	r25, r19
     97a:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <current_step+0x1>
     97e:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <current_step>
	position += direction;
     982:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <direction>
     986:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <direction+0x1>
     98a:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <position>
     98e:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <position+0x1>
     992:	82 0f       	add	r24, r18
     994:	93 1f       	adc	r25, r19
     996:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <position+0x1>
     99a:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <position>
	
	if (current_step == 4){
     99e:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <current_step>
     9a2:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <current_step+0x1>
     9a6:	04 97       	sbiw	r24, 0x04	; 4
     9a8:	21 f4       	brne	.+8      	; 0x9b2 <stepper+0x4c>
		current_step = 0;
     9aa:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <current_step+0x1>
     9ae:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <current_step>
	}
	if (current_step == -1){
     9b2:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <current_step>
     9b6:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <current_step+0x1>
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	31 f4       	brne	.+12     	; 0x9ca <stepper+0x64>
		current_step = 3;
     9be:	83 e0       	ldi	r24, 0x03	; 3
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <current_step+0x1>
     9c6:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <current_step>
	}

	PORTA = steps[current_step];
     9ca:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <current_step>
     9ce:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <current_step+0x1>
     9d2:	ee 0f       	add	r30, r30
     9d4:	ff 1f       	adc	r31, r31
     9d6:	ec 5a       	subi	r30, 0xAC	; 172
     9d8:	fd 4f       	sbci	r31, 0xFD	; 253
     9da:	80 81       	ld	r24, Z
     9dc:	82 b9       	out	0x02, r24	; 2
	
	if (position == 201){
     9de:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <position>
     9e2:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <position+0x1>
     9e6:	89 3c       	cpi	r24, 0xC9	; 201
     9e8:	91 05       	cpc	r25, r1
     9ea:	31 f4       	brne	.+12     	; 0x9f8 <stepper+0x92>
		position = 1;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <position+0x1>
     9f4:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <position>
	}
	if (position == 0){
     9f8:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <position>
     9fc:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <position+0x1>
     a00:	89 2b       	or	r24, r25
     a02:	31 f4       	brne	.+12     	; 0xa10 <stepper+0xaa>
		position = 200;
     a04:	88 ec       	ldi	r24, 0xC8	; 200
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <position+0x1>
     a0c:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <position>
	}
	
	
	if(a_flag == 1){
     a10:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <a_flag>
     a14:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <a_flag+0x1>
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	31 f4       	brne	.+12     	; 0xa28 <stepper+0xc2>
		mTimer(a_delay);
     a1c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <a_delay>
     a20:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <a_delay+0x1>
     a24:	85 cc       	rjmp	.-1782   	; 0x330 <mTimer>
     a26:	08 95       	ret
		}
	else{
		mTimer(20);
     a28:	84 e1       	ldi	r24, 0x14	; 20
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	81 cc       	rjmp	.-1790   	; 0x330 <mTimer>
     a2e:	08 95       	ret

00000a30 <stepper_direction>:
	
}

void stepper_direction(int required_pos){
	
	a_flag = 1;
     a30:	21 e0       	ldi	r18, 0x01	; 1
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	30 93 61 02 	sts	0x0261, r19	; 0x800261 <a_flag+0x1>
     a38:	20 93 60 02 	sts	0x0260, r18	; 0x800260 <a_flag>
	
	int distance = required_pos - position;
     a3c:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <position>
     a40:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <position+0x1>
     a44:	82 1b       	sub	r24, r18
     a46:	93 0b       	sbc	r25, r19
     a48:	9c 01       	movw	r18, r24
	
	if (distance >= 100)
     a4a:	84 36       	cpi	r24, 0x64	; 100
     a4c:	91 05       	cpc	r25, r1
     a4e:	14 f0       	brlt	.+4      	; 0xa54 <stepper_direction+0x24>
	distance -= 200;
     a50:	28 5c       	subi	r18, 0xC8	; 200
     a52:	31 09       	sbc	r19, r1
	
	if (distance < -100)
     a54:	2c 39       	cpi	r18, 0x9C	; 156
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	38 07       	cpc	r19, r24
     a5a:	14 f4       	brge	.+4      	; 0xa60 <stepper_direction+0x30>
	distance += 200;
     a5c:	28 53       	subi	r18, 0x38	; 56
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
	
	direction = (distance)/ abs(distance);
     a60:	f9 01       	movw	r30, r18
     a62:	33 23       	and	r19, r19
     a64:	24 f4       	brge	.+8      	; 0xa6e <stepper_direction+0x3e>
     a66:	ee 27       	eor	r30, r30
     a68:	ff 27       	eor	r31, r31
     a6a:	e2 1b       	sub	r30, r18
     a6c:	f3 0b       	sbc	r31, r19
     a6e:	c9 01       	movw	r24, r18
     a70:	bf 01       	movw	r22, r30
     a72:	09 d2       	rcall	.+1042   	; 0xe86 <__divmodhi4>
     a74:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <direction+0x1>
     a78:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <direction>
	/*
	if(abs(distance) == 15){
		CCW();
	} */
	
	if (abs(distance) > 3 && (a_delay > 6) ) //accelerating - found max speed to be at a_delay = 7
     a7c:	34 97       	sbiw	r30, 0x04	; 4
     a7e:	7c f0       	brlt	.+30     	; 0xa9e <stepper_direction+0x6e>
     a80:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <a_delay>
     a84:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <a_delay+0x1>
     a88:	07 97       	sbiw	r24, 0x07	; 7
     a8a:	4c f0       	brlt	.+18     	; 0xa9e <stepper_direction+0x6e>
	a_delay -= 1; 
     a8c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <a_delay>
     a90:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <a_delay+0x1>
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <a_delay+0x1>
     a9a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <a_delay>
	if (abs(distance) < 10 && (a_delay < 20) ) //braking 
     a9e:	27 5f       	subi	r18, 0xF7	; 247
     aa0:	3f 4f       	sbci	r19, 0xFF	; 255
     aa2:	23 31       	cpi	r18, 0x13	; 19
     aa4:	31 05       	cpc	r19, r1
     aa6:	78 f4       	brcc	.+30     	; 0xac6 <stepper_direction+0x96>
     aa8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <a_delay>
     aac:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <a_delay+0x1>
     ab0:	44 97       	sbiw	r24, 0x14	; 20
     ab2:	4c f4       	brge	.+18     	; 0xac6 <stepper_direction+0x96>
	a_delay += 1;
     ab4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <a_delay>
     ab8:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <a_delay+0x1>
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <a_delay+0x1>
     ac2:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <a_delay>
     ac6:	08 95       	ret

00000ac8 <initialize>:
/* returns the size of the queue*/


void initialize(){
	//Timer Code
	CLKPR = 0x80;
     ac8:	e1 e6       	ldi	r30, 0x61	; 97
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 e8       	ldi	r24, 0x80	; 128
     ace:	80 83       	st	Z, r24
	CLKPR = 0x01;		//  sets system clock to 8MHz
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	80 83       	st	Z, r24
	TCCR1B |= _BV(CS11);
     ad4:	e1 e8       	ldi	r30, 0x81	; 129
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	82 60       	ori	r24, 0x02	; 2
     adc:	80 83       	st	Z, r24
	
	//Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
     ade:	83 e0       	ldi	r24, 0x03	; 3
     ae0:	7c db       	rcall	.-2312   	; 0x1da <InitLCD>
	
	LCDClear();
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	4e db       	rcall	.-2404   	; 0x184 <LCDByte>
	LCDWriteStringXY(0,0,"i sTaRt");
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	10 dc       	rcall	.-2016   	; 0x30e <LCDGotoXY>
     aee:	89 e3       	ldi	r24, 0x39	; 57
     af0:	92 e0       	ldi	r25, 0x02	; 2
     af2:	a2 db       	rcall	.-2236   	; 0x238 <LCDWriteString>

	STATE = 0;
     af4:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <STATE>
		
	rtnLink = NULL;
     af8:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <rtnLink+0x1>
     afc:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <rtnLink>
	newLink = NULL;
     b00:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <newLink+0x1>
     b04:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <newLink>
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
     b08:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <head+0x1>
     b0c:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <head>
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
     b10:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <tail+0x1>
     b14:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <tail>
	newLink = NULL;
	
	setup(&head, &tail); //set up linked list
	
	//Setting inputs and outputs
	DDRD = 0x00;		// use PORTD for interrupts (pins 18-21)
     b18:	1a b8       	out	0x0a, r1	; 10
	DDRC = 0xFF;		// output for LCD
     b1a:	8f ef       	ldi	r24, 0xFF	; 255
     b1c:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF;		// output for DC motor
     b1e:	84 b9       	out	0x04, r24	; 4
	DDRL = 0xFF;		// output for LED display
     b20:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	DDRA = 0b00111111;	// output for stepper motor
     b24:	8f e3       	ldi	r24, 0x3F	; 63
     b26:	81 b9       	out	0x01, r24	; 1

	cli();		// Disables all interrupts
     b28:	f8 94       	cli
	
	//set up interrupts
	
	EIMSK |= _BV(INT0); //enable INT0
     b2a:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= _BV(ISC01) | _BV(ISC00); //rising edge interrupt
     b2c:	e9 e6       	ldi	r30, 0x69	; 105
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	80 81       	ld	r24, Z
     b32:	83 60       	ori	r24, 0x03	; 3
     b34:	80 83       	st	Z, r24
	
	EIMSK |= _BV(INT1); //enable INT1
     b36:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= _BV(ISC11);  //falling edge interrupt
     b38:	80 81       	ld	r24, Z
     b3a:	88 60       	ori	r24, 0x08	; 8
     b3c:	80 83       	st	Z, r24
	
	EIMSK |= _BV(INT2); //enable INT2
     b3e:	ea 9a       	sbi	0x1d, 2	; 29
	EICRA |= _BV(ISC21) | _BV(ISC20); //rising edge interrupt
     b40:	80 81       	ld	r24, Z
     b42:	80 63       	ori	r24, 0x30	; 48
     b44:	80 83       	st	Z, r24
	
	EIMSK |= _BV(INT3); //enable INT3
     b46:	eb 9a       	sbi	0x1d, 3	; 29
	EICRA |= _BV(ISC31); //falling edge interrupt
     b48:	80 81       	ld	r24, Z
     b4a:	80 68       	ori	r24, 0x80	; 128
     b4c:	80 83       	st	Z, r24
	
	ADCSRA |= _BV(ADEN) | _BV(ADIE);   // enable ADC and interrupt of ADC
     b4e:	ea e7       	ldi	r30, 0x7A	; 122
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	88 68       	ori	r24, 0x88	; 136
     b56:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADPS2) | _BV(ADPS0);//  //prescale by 1/32
     b58:	80 81       	ld	r24, Z
     b5a:	85 60       	ori	r24, 0x05	; 5
     b5c:	80 83       	st	Z, r24
	ADMUX |=_BV(REFS0);  // sets voltage reference selection 
     b5e:	ec e7       	ldi	r30, 0x7C	; 124
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 64       	ori	r24, 0x40	; 64
     b66:	80 83       	st	Z, r24

	// See page 112 - EIFR External Interrupt Flags...notice how they reset on their own in 'C'...not in assembly
	//EIMSK |= 0x0C;

	// Enable all interrupts
	sei();	// Note this sets the Global Enable for all interrupts
     b68:	78 94       	sei
     b6a:	08 95       	ret

00000b6c <main>:
element eTest;		/* A variable to hold the aggregate data type known as element */


int main(int argc, char *argv[]){
	
	initialize(); //initializes LCD, interrupts
     b6c:	ad df       	rcall	.-166    	; 0xac8 <initialize>

	PWM(); //initialize PWM 
     b6e:	0b dd       	rcall	.-1514   	; 0x586 <PWM>
     b70:	07 9b       	sbis	0x00, 7	; 0
	
	while ((PINA & 0b10000000) != 0x00){ //homing the stepper motor to the black position
     b72:	03 c0       	rjmp	.+6      	; 0xb7a <main+0xe>
		stepper();
     b74:	f8 de       	rcall	.-528    	; 0x966 <stepper>
     b76:	07 99       	sbic	0x00, 7	; 0
	
	initialize(); //initializes LCD, interrupts

	PWM(); //initialize PWM 
	
	while ((PINA & 0b10000000) != 0x00){ //homing the stepper motor to the black position
     b78:	fd cf       	rjmp	.-6      	; 0xb74 <main+0x8>
		stepper();
	}
	
	mTimer(500);
     b7a:	84 ef       	ldi	r24, 0xF4	; 244
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	d8 db       	rcall	.-2128   	; 0x330 <mTimer>
     b80:	8f ef       	ldi	r24, 0xFF	; 255
	
	int c = 0;
	direction = -1;
     b82:	9f ef       	ldi	r25, 0xFF	; 255
     b84:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <direction+0x1>
     b88:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <direction>
     b8c:	c4 e0       	ldi	r28, 0x04	; 4
     b8e:	d0 e0       	ldi	r29, 0x00	; 0
	while(c < 4){
		stepper();
     b90:	ea de       	rcall	.-556    	; 0x966 <stepper>
     b92:	84 ef       	ldi	r24, 0xF4	; 244
		c++;
		mTimer(500);
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	cc db       	rcall	.-2152   	; 0x330 <mTimer>
     b98:	21 97       	sbiw	r28, 0x01	; 1
     b9a:	d1 f7       	brne	.-12     	; 0xb90 <main+0x24>
     b9c:	88 ec       	ldi	r24, 0xC8	; 200
	
	mTimer(500);
	
	int c = 0;
	direction = -1;
	while(c < 4){
     b9e:	90 e0       	ldi	r25, 0x00	; 0
		stepper();
		c++;
		mTimer(500);
	}
	//move 4 more steps
	position = 200; //setting the home position of the stepper after homing
     ba0:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <position+0x1>
     ba4:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <position>
     ba8:	60 e0       	ldi	r22, 0x00	; 0
	
	LCDClear();
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	eb da       	rcall	.-2602   	; 0x184 <LCDByte>
     bae:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteStringXY(0,0,"i SoRt :)");
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	ad db       	rcall	.-2214   	; 0x30e <LCDGotoXY>
     bb4:	8f e2       	ldi	r24, 0x2F	; 47
     bb6:	92 e0       	ldi	r25, 0x02	; 2
     bb8:	3f db       	rcall	.-2434   	; 0x238 <LCDWriteString>
     bba:	ec dc       	rcall	.-1576   	; 0x594 <CCW>
     bbc:	c0 e1       	ldi	r28, 0x10	; 16
     bbe:	d0 e0       	ldi	r29, 0x00	; 0
	//LCDClear();
	
	CCW();
     bc0:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <STATE>
		dequeue(&head, &tail, &rtnLink); /* remove the item at the head of the list */
		
		int brake_time = 30;
		int drop_time = 20;
		
		a_delay = 16;
     bc4:	82 30       	cpi	r24, 0x02	; 2
     bc6:	69 f0       	breq	.+26     	; 0xbe2 <main+0x76>

	// POLLING STATE
	POLLING_STAGE:
	//PORTC |= 0xF0;	// Indicates this state is active
	
	switch(STATE){
     bc8:	18 f4       	brcc	.+6      	; 0xbd0 <main+0x64>
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	39 f0       	breq	.+14     	; 0xbdc <main+0x70>
     bce:	f8 cf       	rjmp	.-16     	; 0xbc0 <main+0x54>
     bd0:	83 30       	cpi	r24, 0x03	; 3
     bd2:	51 f0       	breq	.+20     	; 0xbe8 <main+0x7c>
     bd4:	85 30       	cpi	r24, 0x05	; 5
     bd6:	09 f4       	brne	.+2      	; 0xbda <main+0x6e>
     bd8:	17 c1       	rjmp	.+558    	; 0xe08 <main+0x29c>
     bda:	f2 cf       	rjmp	.-28     	; 0xbc0 <main+0x54>
     bdc:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <STATE>
     be0:	ef cf       	rjmp	.-34     	; 0xbc0 <main+0x54>
     be2:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <STATE>

	MAGNETIC_STAGE:
	// Do whatever is necessary HERE
	//PORTC = 0x01; // Just output pretty lights know you made it here
	//Reset the state variable
	STATE = 0;
     be6:	ec cf       	rjmp	.-40     	; 0xbc0 <main+0x54>
	goto POLLING_STAGE;
     be8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <sort_flag>

	REFLECTIVE_STAGE:
	
	//PORTC = 0x04; // Just output pretty lights know you made it here
	//Reset the state variable
	STATE = 0;
     bec:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <sort_flag+0x1>
	BUCKET_STAGE:
	//LCDClear();
	//LCDWriteStringXY(0,0,"BUCKET STAGE");
	

	if(sort_flag == 1){
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <main+0x8a>
     bf4:	ed c0       	rjmp	.+474    	; 0xdd0 <main+0x264>
     bf6:	48 e7       	ldi	r20, 0x78	; 120
     bf8:	52 e0       	ldi	r21, 0x02	; 2
     bfa:	6a e7       	ldi	r22, 0x7A	; 122
		//int mat = firstValue(&head);
		dequeue(&head, &tail, &rtnLink); /* remove the item at the head of the list */
     bfc:	72 e0       	ldi	r23, 0x02	; 2
     bfe:	8c e7       	ldi	r24, 0x7C	; 124
     c00:	92 e0       	ldi	r25, 0x02	; 2
     c02:	9b de       	rcall	.-714    	; 0x93a <dequeue>
     c04:	d0 93 0b 02 	sts	0x020B, r29	; 0x80020b <a_delay+0x1>
     c08:	c0 93 0a 02 	sts	0x020A, r28	; 0x80020a <a_delay>
		
		int brake_time = 30;
		int drop_time = 20;
		
		a_delay = 16;
     c0c:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <rtnLink>
     c10:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <rtnLink+0x1>
				}
				CCW();
			}*/
				
				
		if(rtnLink->e.material == 1){//works
     c14:	80 81       	ld	r24, Z
     c16:	91 81       	ldd	r25, Z+1	; 0x01
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	91 05       	cpc	r25, r1
     c1c:	71 f5       	brne	.+92     	; 0xc7a <main+0x10e>
     c1e:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <alum_count>
     c22:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <alum_count+0x1>
			alum_count++;
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <alum_count+0x1>
     c2c:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <alum_count>
     c30:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <position>
     c34:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <position+0x1>
			if(position != alum_pos){
     c38:	c2 97       	sbiw	r24, 0x32	; 50
     c3a:	09 f4       	brne	.+2      	; 0xc3e <main+0xd2>
     c3c:	b7 c0       	rjmp	.+366    	; 0xdac <main+0x240>
     c3e:	45 dd       	rcall	.-1398   	; 0x6ca <CW>
     c40:	8e e1       	ldi	r24, 0x1E	; 30
     c42:	90 e0       	ldi	r25, 0x00	; 0
				CW(); //brake
     c44:	75 db       	rcall	.-2326   	; 0x330 <mTimer>
     c46:	15 b8       	out	0x05, r1	; 5
				mTimer(brake_time);
     c48:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <belt_flag+0x1>
     c4c:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <belt_flag>
				PORTB = 0x00; // turn belt off
				belt_flag = 0;
     c50:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <position>
     c54:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <position+0x1>
				//a_delay = a_start;
				while (position != alum_pos){ //moving the stepper motor to the indicated position
     c58:	c2 97       	sbiw	r24, 0x32	; 50
     c5a:	51 f0       	breq	.+20     	; 0xc70 <main+0x104>
     c5c:	82 e3       	ldi	r24, 0x32	; 50
     c5e:	90 e0       	ldi	r25, 0x00	; 0
					stepper_direction(alum_pos);
     c60:	e7 de       	rcall	.-562    	; 0xa30 <stepper_direction>
     c62:	81 de       	rcall	.-766    	; 0x966 <stepper>
     c64:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <position>
					stepper();
     c68:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <position+0x1>
				CW(); //brake
				mTimer(brake_time);
				PORTB = 0x00; // turn belt off
				belt_flag = 0;
				//a_delay = a_start;
				while (position != alum_pos){ //moving the stepper motor to the indicated position
     c6c:	c2 97       	sbiw	r24, 0x32	; 50
     c6e:	b1 f7       	brne	.-20     	; 0xc5c <main+0xf0>
     c70:	91 dc       	rcall	.-1758   	; 0x594 <CCW>
     c72:	84 e1       	ldi	r24, 0x14	; 20
     c74:	90 e0       	ldi	r25, 0x00	; 0
					stepper_direction(alum_pos);
					stepper();
				}
				CCW();
     c76:	5c db       	rcall	.-2376   	; 0x330 <mTimer>
     c78:	99 c0       	rjmp	.+306    	; 0xdac <main+0x240>
				mTimer(drop_time);
     c7a:	82 30       	cpi	r24, 0x02	; 2
     c7c:	91 05       	cpc	r25, r1
     c7e:	89 f5       	brne	.+98     	; 0xce2 <main+0x176>
     c80:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <steel_count>
				
			}
		}		
		
		else if(rtnLink->e.material == 2){
     c84:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <steel_count+0x1>
     c88:	01 96       	adiw	r24, 0x01	; 1
			steel_count++;
     c8a:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <steel_count+0x1>
     c8e:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <steel_count>
     c92:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <position>
     c96:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <position+0x1>
			if(position != steel_pos){
     c9a:	86 39       	cpi	r24, 0x96	; 150
     c9c:	91 05       	cpc	r25, r1
     c9e:	09 f4       	brne	.+2      	; 0xca2 <main+0x136>
     ca0:	85 c0       	rjmp	.+266    	; 0xdac <main+0x240>
     ca2:	13 dd       	rcall	.-1498   	; 0x6ca <CW>
     ca4:	8e e1       	ldi	r24, 0x1E	; 30
     ca6:	90 e0       	ldi	r25, 0x00	; 0
				CW(); //brake
     ca8:	43 db       	rcall	.-2426   	; 0x330 <mTimer>
				mTimer(brake_time);
     caa:	15 b8       	out	0x05, r1	; 5
     cac:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <belt_flag+0x1>
				PORTB = 0x00; // turn belt off
     cb0:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <belt_flag>
				belt_flag = 0;
     cb4:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <position>
				//a_delay = a_start;
				while (position != steel_pos){ //moving the stepper motor to the indicated position
     cb8:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <position+0x1>
     cbc:	86 39       	cpi	r24, 0x96	; 150
     cbe:	91 05       	cpc	r25, r1
     cc0:	59 f0       	breq	.+22     	; 0xcd8 <main+0x16c>
     cc2:	86 e9       	ldi	r24, 0x96	; 150
					stepper_direction(steel_pos);
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	b4 de       	rcall	.-664    	; 0xa30 <stepper_direction>
     cc8:	4e de       	rcall	.-868    	; 0x966 <stepper>
     cca:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <position>
					stepper();
     cce:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <position+0x1>
				CW(); //brake
				mTimer(brake_time);
				PORTB = 0x00; // turn belt off
				belt_flag = 0;
				//a_delay = a_start;
				while (position != steel_pos){ //moving the stepper motor to the indicated position
     cd2:	86 39       	cpi	r24, 0x96	; 150
     cd4:	91 05       	cpc	r25, r1
     cd6:	a9 f7       	brne	.-22     	; 0xcc2 <main+0x156>
     cd8:	5d dc       	rcall	.-1862   	; 0x594 <CCW>
     cda:	84 e1       	ldi	r24, 0x14	; 20
     cdc:	90 e0       	ldi	r25, 0x00	; 0
					stepper_direction(steel_pos);
					stepper();
				}
				CCW();
     cde:	28 db       	rcall	.-2480   	; 0x330 <mTimer>
     ce0:	65 c0       	rjmp	.+202    	; 0xdac <main+0x240>
				mTimer(drop_time);
     ce2:	83 30       	cpi	r24, 0x03	; 3
     ce4:	91 05       	cpc	r25, r1
     ce6:	89 f5       	brne	.+98     	; 0xd4a <main+0x1de>
     ce8:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <white_count>
				
			}
		}
		else if(rtnLink->e.material == 3){
     cec:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <white_count+0x1>
			white_count++;
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <white_count+0x1>
     cf6:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <white_count>
     cfa:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <position>
     cfe:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <position+0x1>
			if(position != white_pos){
     d02:	84 36       	cpi	r24, 0x64	; 100
     d04:	91 05       	cpc	r25, r1
     d06:	09 f4       	brne	.+2      	; 0xd0a <main+0x19e>
     d08:	51 c0       	rjmp	.+162    	; 0xdac <main+0x240>
     d0a:	df dc       	rcall	.-1602   	; 0x6ca <CW>
				CW(); //brake
     d0c:	8e e1       	ldi	r24, 0x1E	; 30
     d0e:	90 e0       	ldi	r25, 0x00	; 0
				mTimer(brake_time);
     d10:	0f db       	rcall	.-2530   	; 0x330 <mTimer>
     d12:	15 b8       	out	0x05, r1	; 5
     d14:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <belt_flag+0x1>
				PORTB = 0x00; // turn belt off
				belt_flag = 0;
     d18:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <belt_flag>
     d1c:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <position>
				//a_delay = a_start;
				while (position != white_pos){ //moving the stepper motor to the indicated position
     d20:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <position+0x1>
     d24:	84 36       	cpi	r24, 0x64	; 100
     d26:	91 05       	cpc	r25, r1
     d28:	59 f0       	breq	.+22     	; 0xd40 <main+0x1d4>
     d2a:	84 e6       	ldi	r24, 0x64	; 100
					stepper_direction(white_pos);
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	80 de       	rcall	.-768    	; 0xa30 <stepper_direction>
     d30:	1a de       	rcall	.-972    	; 0x966 <stepper>
     d32:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <position>
					stepper();
     d36:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <position+0x1>
				CW(); //brake
				mTimer(brake_time);
				PORTB = 0x00; // turn belt off
				belt_flag = 0;
				//a_delay = a_start;
				while (position != white_pos){ //moving the stepper motor to the indicated position
     d3a:	84 36       	cpi	r24, 0x64	; 100
     d3c:	91 05       	cpc	r25, r1
     d3e:	a9 f7       	brne	.-22     	; 0xd2a <main+0x1be>
     d40:	29 dc       	rcall	.-1966   	; 0x594 <CCW>
     d42:	84 e1       	ldi	r24, 0x14	; 20
					stepper_direction(white_pos);
					stepper();
				}
				CCW();
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	f4 da       	rcall	.-2584   	; 0x330 <mTimer>
				mTimer(drop_time);
     d48:	31 c0       	rjmp	.+98     	; 0xdac <main+0x240>
     d4a:	04 97       	sbiw	r24, 0x04	; 4
     d4c:	79 f5       	brne	.+94     	; 0xdac <main+0x240>
     d4e:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <black_count>
					
			}
		}
		else if(rtnLink->e.material == 4){
     d52:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <black_count+0x1>
			black_count++;
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <black_count+0x1>
     d5c:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <black_count>
     d60:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <position>
			if(position != black_pos){
     d64:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <position+0x1>
     d68:	88 3c       	cpi	r24, 0xC8	; 200
     d6a:	91 05       	cpc	r25, r1
     d6c:	f9 f0       	breq	.+62     	; 0xdac <main+0x240>
     d6e:	ad dc       	rcall	.-1702   	; 0x6ca <CW>
				CW(); //brake
     d70:	8e e1       	ldi	r24, 0x1E	; 30
				mTimer(brake_time);
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	dd da       	rcall	.-2630   	; 0x330 <mTimer>
     d76:	15 b8       	out	0x05, r1	; 5
     d78:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <belt_flag+0x1>
				PORTB = 0x00; // turn belt off
				belt_flag = 0;
     d7c:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <belt_flag>
     d80:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <position>
				//a_delay = a_start;
				while (position != black_pos){ //moving the stepper motor to the indicated position
     d84:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <position+0x1>
     d88:	88 3c       	cpi	r24, 0xC8	; 200
     d8a:	91 05       	cpc	r25, r1
     d8c:	59 f0       	breq	.+22     	; 0xda4 <main+0x238>
     d8e:	88 ec       	ldi	r24, 0xC8	; 200
					stepper_direction(black_pos);
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	4e de       	rcall	.-868    	; 0xa30 <stepper_direction>
     d94:	e8 dd       	rcall	.-1072   	; 0x966 <stepper>
     d96:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <position>
					stepper();
     d9a:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <position+0x1>
				CW(); //brake
				mTimer(brake_time);
				PORTB = 0x00; // turn belt off
				belt_flag = 0;
				//a_delay = a_start;
				while (position != black_pos){ //moving the stepper motor to the indicated position
     d9e:	88 3c       	cpi	r24, 0xC8	; 200
     da0:	91 05       	cpc	r25, r1
     da2:	a9 f7       	brne	.-22     	; 0xd8e <main+0x222>
     da4:	f7 db       	rcall	.-2066   	; 0x594 <CCW>
     da6:	84 e1       	ldi	r24, 0x14	; 20
     da8:	90 e0       	ldi	r25, 0x00	; 0
					stepper_direction(black_pos);
					stepper();
				}
				CCW();
     daa:	c2 da       	rcall	.-2684   	; 0x330 <mTimer>
     dac:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <i>
				mTimer(drop_time);
     db0:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <i+0x1>
     db4:	01 97       	sbiw	r24, 0x01	; 1
				
			}
		}
		
		i--; 		
     db6:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <i+0x1>
     dba:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <i>
     dbe:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rtnLink>
     dc2:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <rtnLink+0x1>
     dc6:	1e d1       	rcall	.+572    	; 0x1004 <free>
		//LCDWriteIntXY(5,1,rtnLink->e.material,1);
		free(rtnLink);
     dc8:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <sort_flag+0x1>
     dcc:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <sort_flag>
     dd0:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <ex_count>
		//mTimer(50);
		sort_flag = 0;
     dd4:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <ex_count+0x1>

	}
	
	
	if(ex_count == drop_count){ //if dropped the same number of EX triggers
     dd8:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <drop_count>
     ddc:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <drop_count+0x1>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	19 f4       	brne	.+6      	; 0xdec <main+0x280>
     de6:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <STATE>
		STATE = 0;
     dea:	ea ce       	rjmp	.-556    	; 0xbc0 <main+0x54>
		goto POLLING_STAGE;
	}
	else if (ex_count != drop_count) {
     dec:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <ex_count>
     df0:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <ex_count+0x1>
     df4:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <drop_count>
     df8:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <drop_count+0x1>
     dfc:	28 17       	cp	r18, r24
		STATE = 3;
     dfe:	39 07       	cpc	r19, r25
     e00:	19 f0       	breq	.+6      	; 0xe08 <main+0x29c>
	//goto POLLING_STAGE;
	
	
	
	END: // use background ramp down timer
	PORTB = 0x00; //turn off belt
     e02:	83 e0       	ldi	r24, 0x03	; 3
	LCDClear();
     e04:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <STATE>
     e08:	15 b8       	out	0x05, r1	; 5
     e0a:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteStringXY(0,0, "i done");
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	ba d9       	rcall	.-3212   	; 0x184 <LCDByte>
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	7c da       	rcall	.-2824   	; 0x30e <LCDGotoXY>
     e16:	81 e4       	ldi	r24, 0x41	; 65
	mTimer(2000);
     e18:	92 e0       	ldi	r25, 0x02	; 2
     e1a:	0e da       	rcall	.-3044   	; 0x238 <LCDWriteString>
     e1c:	80 ed       	ldi	r24, 0xD0	; 208
	LCDClear();
     e1e:	97 e0       	ldi	r25, 0x07	; 7
     e20:	87 da       	rcall	.-2802   	; 0x330 <mTimer>
     e22:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteStringXY(0,0,"A: S: W: B:") //display number of sorted pieces 
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	ae d9       	rcall	.-3236   	; 0x184 <LCDByte>
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	70 da       	rcall	.-2848   	; 0x30e <LCDGotoXY>
     e2e:	88 e4       	ldi	r24, 0x48	; 72
     e30:	92 e0       	ldi	r25, 0x02	; 2
	LCDWriteIntXY(0,1,alum_count,2);
     e32:	02 da       	rcall	.-3068   	; 0x238 <LCDWriteString>
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	6a da       	rcall	.-2860   	; 0x30e <LCDGotoXY>
     e3a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <alum_count>
     e3e:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <alum_count+0x1>
     e42:	62 e0       	ldi	r22, 0x02	; 2
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	07 da       	rcall	.-3058   	; 0x256 <LCDWriteInt>
     e48:	61 e0       	ldi	r22, 0x01	; 1
	LCDWriteIntXY(3,1,steel_count,2);
     e4a:	83 e0       	ldi	r24, 0x03	; 3
     e4c:	60 da       	rcall	.-2880   	; 0x30e <LCDGotoXY>
     e4e:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <steel_count>
     e52:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <steel_count+0x1>
     e56:	62 e0       	ldi	r22, 0x02	; 2
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	fd d9       	rcall	.-3078   	; 0x256 <LCDWriteInt>
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	86 e0       	ldi	r24, 0x06	; 6
     e60:	56 da       	rcall	.-2900   	; 0x30e <LCDGotoXY>
	LCDWriteIntXY(6,1,white_count,2);
     e62:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <white_count>
     e66:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <white_count+0x1>
     e6a:	62 e0       	ldi	r22, 0x02	; 2
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	f3 d9       	rcall	.-3098   	; 0x256 <LCDWriteInt>
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	89 e0       	ldi	r24, 0x09	; 9
     e74:	4c da       	rcall	.-2920   	; 0x30e <LCDGotoXY>
     e76:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <black_count>
	LCDWriteIntXY(9,1,black_count,2);
     e7a:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <black_count+0x1>
     e7e:	62 e0       	ldi	r22, 0x02	; 2
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	e9 d9       	rcall	.-3118   	; 0x256 <LCDWriteInt>
     e84:	ff cf       	rjmp	.-2      	; 0xe84 <main+0x318>

00000e86 <__divmodhi4>:
     e86:	97 fb       	bst	r25, 7
     e88:	07 2e       	mov	r0, r23
     e8a:	16 f4       	brtc	.+4      	; 0xe90 <__divmodhi4+0xa>
     e8c:	00 94       	com	r0
     e8e:	06 d0       	rcall	.+12     	; 0xe9c <__divmodhi4_neg1>
     e90:	77 fd       	sbrc	r23, 7
     e92:	08 d0       	rcall	.+16     	; 0xea4 <__divmodhi4_neg2>
     e94:	0b d0       	rcall	.+22     	; 0xeac <__udivmodhi4>
     e96:	07 fc       	sbrc	r0, 7
     e98:	05 d0       	rcall	.+10     	; 0xea4 <__divmodhi4_neg2>
     e9a:	3e f4       	brtc	.+14     	; 0xeaa <__divmodhi4_exit>

00000e9c <__divmodhi4_neg1>:
     e9c:	90 95       	com	r25
     e9e:	81 95       	neg	r24
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	08 95       	ret

00000ea4 <__divmodhi4_neg2>:
     ea4:	70 95       	com	r23
     ea6:	61 95       	neg	r22
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255

00000eaa <__divmodhi4_exit>:
     eaa:	08 95       	ret

00000eac <__udivmodhi4>:
     eac:	aa 1b       	sub	r26, r26
     eae:	bb 1b       	sub	r27, r27
     eb0:	51 e1       	ldi	r21, 0x11	; 17
     eb2:	07 c0       	rjmp	.+14     	; 0xec2 <__udivmodhi4_ep>

00000eb4 <__udivmodhi4_loop>:
     eb4:	aa 1f       	adc	r26, r26
     eb6:	bb 1f       	adc	r27, r27
     eb8:	a6 17       	cp	r26, r22
     eba:	b7 07       	cpc	r27, r23
     ebc:	10 f0       	brcs	.+4      	; 0xec2 <__udivmodhi4_ep>
     ebe:	a6 1b       	sub	r26, r22
     ec0:	b7 0b       	sbc	r27, r23

00000ec2 <__udivmodhi4_ep>:
     ec2:	88 1f       	adc	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	5a 95       	dec	r21
     ec8:	a9 f7       	brne	.-22     	; 0xeb4 <__udivmodhi4_loop>
     eca:	80 95       	com	r24
     ecc:	90 95       	com	r25
     ece:	bc 01       	movw	r22, r24
     ed0:	cd 01       	movw	r24, r26
     ed2:	08 95       	ret

00000ed4 <malloc>:
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	82 30       	cpi	r24, 0x02	; 2
     ede:	91 05       	cpc	r25, r1
     ee0:	10 f4       	brcc	.+4      	; 0xee6 <malloc+0x12>
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <__flp>
     eea:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <__flp+0x1>
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	a0 e0       	ldi	r26, 0x00	; 0
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	30 97       	sbiw	r30, 0x00	; 0
     ef8:	19 f1       	breq	.+70     	; 0xf40 <malloc+0x6c>
     efa:	40 81       	ld	r20, Z
     efc:	51 81       	ldd	r21, Z+1	; 0x01
     efe:	02 81       	ldd	r16, Z+2	; 0x02
     f00:	13 81       	ldd	r17, Z+3	; 0x03
     f02:	48 17       	cp	r20, r24
     f04:	59 07       	cpc	r21, r25
     f06:	c8 f0       	brcs	.+50     	; 0xf3a <malloc+0x66>
     f08:	84 17       	cp	r24, r20
     f0a:	95 07       	cpc	r25, r21
     f0c:	69 f4       	brne	.+26     	; 0xf28 <malloc+0x54>
     f0e:	10 97       	sbiw	r26, 0x00	; 0
     f10:	31 f0       	breq	.+12     	; 0xf1e <malloc+0x4a>
     f12:	12 96       	adiw	r26, 0x02	; 2
     f14:	0c 93       	st	X, r16
     f16:	12 97       	sbiw	r26, 0x02	; 2
     f18:	13 96       	adiw	r26, 0x03	; 3
     f1a:	1c 93       	st	X, r17
     f1c:	27 c0       	rjmp	.+78     	; 0xf6c <malloc+0x98>
     f1e:	00 93 87 02 	sts	0x0287, r16	; 0x800287 <__flp>
     f22:	10 93 88 02 	sts	0x0288, r17	; 0x800288 <__flp+0x1>
     f26:	22 c0       	rjmp	.+68     	; 0xf6c <malloc+0x98>
     f28:	21 15       	cp	r18, r1
     f2a:	31 05       	cpc	r19, r1
     f2c:	19 f0       	breq	.+6      	; 0xf34 <malloc+0x60>
     f2e:	42 17       	cp	r20, r18
     f30:	53 07       	cpc	r21, r19
     f32:	18 f4       	brcc	.+6      	; 0xf3a <malloc+0x66>
     f34:	9a 01       	movw	r18, r20
     f36:	bd 01       	movw	r22, r26
     f38:	ef 01       	movw	r28, r30
     f3a:	df 01       	movw	r26, r30
     f3c:	f8 01       	movw	r30, r16
     f3e:	db cf       	rjmp	.-74     	; 0xef6 <malloc+0x22>
     f40:	21 15       	cp	r18, r1
     f42:	31 05       	cpc	r19, r1
     f44:	f9 f0       	breq	.+62     	; 0xf84 <malloc+0xb0>
     f46:	28 1b       	sub	r18, r24
     f48:	39 0b       	sbc	r19, r25
     f4a:	24 30       	cpi	r18, 0x04	; 4
     f4c:	31 05       	cpc	r19, r1
     f4e:	80 f4       	brcc	.+32     	; 0xf70 <malloc+0x9c>
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	9b 81       	ldd	r25, Y+3	; 0x03
     f54:	61 15       	cp	r22, r1
     f56:	71 05       	cpc	r23, r1
     f58:	21 f0       	breq	.+8      	; 0xf62 <malloc+0x8e>
     f5a:	fb 01       	movw	r30, r22
     f5c:	93 83       	std	Z+3, r25	; 0x03
     f5e:	82 83       	std	Z+2, r24	; 0x02
     f60:	04 c0       	rjmp	.+8      	; 0xf6a <malloc+0x96>
     f62:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <__flp+0x1>
     f66:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <__flp>
     f6a:	fe 01       	movw	r30, r28
     f6c:	32 96       	adiw	r30, 0x02	; 2
     f6e:	44 c0       	rjmp	.+136    	; 0xff8 <malloc+0x124>
     f70:	fe 01       	movw	r30, r28
     f72:	e2 0f       	add	r30, r18
     f74:	f3 1f       	adc	r31, r19
     f76:	81 93       	st	Z+, r24
     f78:	91 93       	st	Z+, r25
     f7a:	22 50       	subi	r18, 0x02	; 2
     f7c:	31 09       	sbc	r19, r1
     f7e:	39 83       	std	Y+1, r19	; 0x01
     f80:	28 83       	st	Y, r18
     f82:	3a c0       	rjmp	.+116    	; 0xff8 <malloc+0x124>
     f84:	20 91 85 02 	lds	r18, 0x0285	; 0x800285 <__brkval>
     f88:	30 91 86 02 	lds	r19, 0x0286	; 0x800286 <__brkval+0x1>
     f8c:	23 2b       	or	r18, r19
     f8e:	41 f4       	brne	.+16     	; 0xfa0 <malloc+0xcc>
     f90:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
     f94:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
     f98:	30 93 86 02 	sts	0x0286, r19	; 0x800286 <__brkval+0x1>
     f9c:	20 93 85 02 	sts	0x0285, r18	; 0x800285 <__brkval>
     fa0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     fa4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     fa8:	21 15       	cp	r18, r1
     faa:	31 05       	cpc	r19, r1
     fac:	41 f4       	brne	.+16     	; 0xfbe <malloc+0xea>
     fae:	2d b7       	in	r18, 0x3d	; 61
     fb0:	3e b7       	in	r19, 0x3e	; 62
     fb2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
     fb6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
     fba:	24 1b       	sub	r18, r20
     fbc:	35 0b       	sbc	r19, r21
     fbe:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <__brkval>
     fc2:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <__brkval+0x1>
     fc6:	e2 17       	cp	r30, r18
     fc8:	f3 07       	cpc	r31, r19
     fca:	a0 f4       	brcc	.+40     	; 0xff4 <malloc+0x120>
     fcc:	2e 1b       	sub	r18, r30
     fce:	3f 0b       	sbc	r19, r31
     fd0:	28 17       	cp	r18, r24
     fd2:	39 07       	cpc	r19, r25
     fd4:	78 f0       	brcs	.+30     	; 0xff4 <malloc+0x120>
     fd6:	ac 01       	movw	r20, r24
     fd8:	4e 5f       	subi	r20, 0xFE	; 254
     fda:	5f 4f       	sbci	r21, 0xFF	; 255
     fdc:	24 17       	cp	r18, r20
     fde:	35 07       	cpc	r19, r21
     fe0:	48 f0       	brcs	.+18     	; 0xff4 <malloc+0x120>
     fe2:	4e 0f       	add	r20, r30
     fe4:	5f 1f       	adc	r21, r31
     fe6:	50 93 86 02 	sts	0x0286, r21	; 0x800286 <__brkval+0x1>
     fea:	40 93 85 02 	sts	0x0285, r20	; 0x800285 <__brkval>
     fee:	81 93       	st	Z+, r24
     ff0:	91 93       	st	Z+, r25
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <malloc+0x124>
     ff4:	e0 e0       	ldi	r30, 0x00	; 0
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	cf 01       	movw	r24, r30
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	08 95       	ret

00001004 <free>:
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	09 f4       	brne	.+2      	; 0x100e <free+0xa>
    100c:	81 c0       	rjmp	.+258    	; 0x1110 <free+0x10c>
    100e:	fc 01       	movw	r30, r24
    1010:	32 97       	sbiw	r30, 0x02	; 2
    1012:	13 82       	std	Z+3, r1	; 0x03
    1014:	12 82       	std	Z+2, r1	; 0x02
    1016:	a0 91 87 02 	lds	r26, 0x0287	; 0x800287 <__flp>
    101a:	b0 91 88 02 	lds	r27, 0x0288	; 0x800288 <__flp+0x1>
    101e:	10 97       	sbiw	r26, 0x00	; 0
    1020:	81 f4       	brne	.+32     	; 0x1042 <free+0x3e>
    1022:	20 81       	ld	r18, Z
    1024:	31 81       	ldd	r19, Z+1	; 0x01
    1026:	82 0f       	add	r24, r18
    1028:	93 1f       	adc	r25, r19
    102a:	20 91 85 02 	lds	r18, 0x0285	; 0x800285 <__brkval>
    102e:	30 91 86 02 	lds	r19, 0x0286	; 0x800286 <__brkval+0x1>
    1032:	28 17       	cp	r18, r24
    1034:	39 07       	cpc	r19, r25
    1036:	51 f5       	brne	.+84     	; 0x108c <free+0x88>
    1038:	f0 93 86 02 	sts	0x0286, r31	; 0x800286 <__brkval+0x1>
    103c:	e0 93 85 02 	sts	0x0285, r30	; 0x800285 <__brkval>
    1040:	67 c0       	rjmp	.+206    	; 0x1110 <free+0x10c>
    1042:	ed 01       	movw	r28, r26
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	ce 17       	cp	r28, r30
    104a:	df 07       	cpc	r29, r31
    104c:	40 f4       	brcc	.+16     	; 0x105e <free+0x5a>
    104e:	4a 81       	ldd	r20, Y+2	; 0x02
    1050:	5b 81       	ldd	r21, Y+3	; 0x03
    1052:	9e 01       	movw	r18, r28
    1054:	41 15       	cp	r20, r1
    1056:	51 05       	cpc	r21, r1
    1058:	f1 f0       	breq	.+60     	; 0x1096 <free+0x92>
    105a:	ea 01       	movw	r28, r20
    105c:	f5 cf       	rjmp	.-22     	; 0x1048 <free+0x44>
    105e:	d3 83       	std	Z+3, r29	; 0x03
    1060:	c2 83       	std	Z+2, r28	; 0x02
    1062:	40 81       	ld	r20, Z
    1064:	51 81       	ldd	r21, Z+1	; 0x01
    1066:	84 0f       	add	r24, r20
    1068:	95 1f       	adc	r25, r21
    106a:	c8 17       	cp	r28, r24
    106c:	d9 07       	cpc	r29, r25
    106e:	59 f4       	brne	.+22     	; 0x1086 <free+0x82>
    1070:	88 81       	ld	r24, Y
    1072:	99 81       	ldd	r25, Y+1	; 0x01
    1074:	84 0f       	add	r24, r20
    1076:	95 1f       	adc	r25, r21
    1078:	02 96       	adiw	r24, 0x02	; 2
    107a:	91 83       	std	Z+1, r25	; 0x01
    107c:	80 83       	st	Z, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	9b 81       	ldd	r25, Y+3	; 0x03
    1082:	93 83       	std	Z+3, r25	; 0x03
    1084:	82 83       	std	Z+2, r24	; 0x02
    1086:	21 15       	cp	r18, r1
    1088:	31 05       	cpc	r19, r1
    108a:	29 f4       	brne	.+10     	; 0x1096 <free+0x92>
    108c:	f0 93 88 02 	sts	0x0288, r31	; 0x800288 <__flp+0x1>
    1090:	e0 93 87 02 	sts	0x0287, r30	; 0x800287 <__flp>
    1094:	3d c0       	rjmp	.+122    	; 0x1110 <free+0x10c>
    1096:	e9 01       	movw	r28, r18
    1098:	fb 83       	std	Y+3, r31	; 0x03
    109a:	ea 83       	std	Y+2, r30	; 0x02
    109c:	49 91       	ld	r20, Y+
    109e:	59 91       	ld	r21, Y+
    10a0:	c4 0f       	add	r28, r20
    10a2:	d5 1f       	adc	r29, r21
    10a4:	ec 17       	cp	r30, r28
    10a6:	fd 07       	cpc	r31, r29
    10a8:	61 f4       	brne	.+24     	; 0x10c2 <free+0xbe>
    10aa:	80 81       	ld	r24, Z
    10ac:	91 81       	ldd	r25, Z+1	; 0x01
    10ae:	84 0f       	add	r24, r20
    10b0:	95 1f       	adc	r25, r21
    10b2:	02 96       	adiw	r24, 0x02	; 2
    10b4:	e9 01       	movw	r28, r18
    10b6:	99 83       	std	Y+1, r25	; 0x01
    10b8:	88 83       	st	Y, r24
    10ba:	82 81       	ldd	r24, Z+2	; 0x02
    10bc:	93 81       	ldd	r25, Z+3	; 0x03
    10be:	9b 83       	std	Y+3, r25	; 0x03
    10c0:	8a 83       	std	Y+2, r24	; 0x02
    10c2:	e0 e0       	ldi	r30, 0x00	; 0
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	12 96       	adiw	r26, 0x02	; 2
    10c8:	8d 91       	ld	r24, X+
    10ca:	9c 91       	ld	r25, X
    10cc:	13 97       	sbiw	r26, 0x03	; 3
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	19 f0       	breq	.+6      	; 0x10d8 <free+0xd4>
    10d2:	fd 01       	movw	r30, r26
    10d4:	dc 01       	movw	r26, r24
    10d6:	f7 cf       	rjmp	.-18     	; 0x10c6 <free+0xc2>
    10d8:	8d 91       	ld	r24, X+
    10da:	9c 91       	ld	r25, X
    10dc:	11 97       	sbiw	r26, 0x01	; 1
    10de:	9d 01       	movw	r18, r26
    10e0:	2e 5f       	subi	r18, 0xFE	; 254
    10e2:	3f 4f       	sbci	r19, 0xFF	; 255
    10e4:	82 0f       	add	r24, r18
    10e6:	93 1f       	adc	r25, r19
    10e8:	20 91 85 02 	lds	r18, 0x0285	; 0x800285 <__brkval>
    10ec:	30 91 86 02 	lds	r19, 0x0286	; 0x800286 <__brkval+0x1>
    10f0:	28 17       	cp	r18, r24
    10f2:	39 07       	cpc	r19, r25
    10f4:	69 f4       	brne	.+26     	; 0x1110 <free+0x10c>
    10f6:	30 97       	sbiw	r30, 0x00	; 0
    10f8:	29 f4       	brne	.+10     	; 0x1104 <free+0x100>
    10fa:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <__flp+0x1>
    10fe:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <__flp>
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <free+0x104>
    1104:	13 82       	std	Z+3, r1	; 0x03
    1106:	12 82       	std	Z+2, r1	; 0x02
    1108:	b0 93 86 02 	sts	0x0286, r27	; 0x800286 <__brkval+0x1>
    110c:	a0 93 85 02 	sts	0x0285, r26	; 0x800285 <__brkval>
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <_exit>:
    1116:	f8 94       	cli

00001118 <__stop_program>:
    1118:	ff cf       	rjmp	.-2      	; 0x1118 <__stop_program>
